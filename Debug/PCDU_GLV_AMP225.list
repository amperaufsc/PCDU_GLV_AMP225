
PCDU_GLV_AMP225.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004bd8  08004bd8  00005bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c04  08004c04  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004c04  08004c04  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004c04  08004c04  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c04  08004c04  00005c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c08  08004c08  00005c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004c0c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08004c18  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004c18  0000618c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d14d  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f4  00000000  00000000  00013182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00015278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0a  00000000  00000000  00016088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ae4  00000000  00000000  00016b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a82  00000000  00000000  0002e676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c285  00000000  00000000  0003f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb37d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d18  00000000  00000000  000cb3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000cf0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004bc0 	.word	0x08004bc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004bc0 	.word	0x08004bc0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	@ 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c3a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	@ 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	@ 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__aeabi_f2uiz>:
 8000e88:	0042      	lsls	r2, r0, #1
 8000e8a:	d20e      	bcs.n	8000eaa <__aeabi_f2uiz+0x22>
 8000e8c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e90:	d30b      	bcc.n	8000eaa <__aeabi_f2uiz+0x22>
 8000e92:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e96:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e9a:	d409      	bmi.n	8000eb0 <__aeabi_f2uiz+0x28>
 8000e9c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ea0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ea4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ea8:	4770      	bx	lr
 8000eaa:	f04f 0000 	mov.w	r0, #0
 8000eae:	4770      	bx	lr
 8000eb0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000eb4:	d101      	bne.n	8000eba <__aeabi_f2uiz+0x32>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d102      	bne.n	8000ec0 <__aeabi_f2uiz+0x38>
 8000eba:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebe:	4770      	bx	lr
 8000ec0:	f04f 0000 	mov.w	r0, #0
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <INA226_Init>:
/* Private macros ------------------------------------------------------------*/
/* Variables -----------------------------------------------------------------*/
Anglas_IN226 ina;
/* Private functions ---------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
void INA226_Init(const double Maximum_Expected_Current, const uint16_t resMiliohmios, uint16_t AVG, uint16_t Time_Vbus, uint16_t Time_Vshunt, uint16_t ModeOperation){
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b089      	sub	sp, #36	@ 0x24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	80fb      	strh	r3, [r7, #6]
 8000eda:	4613      	mov	r3, r2
 8000edc:	80bb      	strh	r3, [r7, #4]
	uint8_t datos[3];
	uint8_t MSB,LSB;
	uint16_t REGISTER;

	ina.Rshunt = resMiliohmios; //esto lo hago porq necesito Rshunt para la funcion "INA226_Alert_Limit_Write"
 8000ede:	4a50      	ldr	r2, [pc, #320]	@ (8001020 <INA226_Init+0x158>)
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	81d3      	strh	r3, [r2, #14]
	 * bit 11-9 : 100 (AVG=128, promedio de numero de muestras)
	 * bit  8-6 : 100 (T=1.1ms, tiempo de conversion de Vbus)
	 * bit  5-3 : 111 (T=8.24ms, tiempo de conversion de Vshunt)
	 * bit  2-0 : 111 (Shunt & Bus continuo, modo de operacion)
	*/
	REGISTER = NO_RESET_INA226|(AVG << 9)|(Time_Vbus << 6)|(Time_Vshunt << 3)|ModeOperation;
 8000ee4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ee8:	025b      	lsls	r3, r3, #9
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000ef6:	019b      	lsls	r3, r3, #6
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	b21b      	sxth	r3, r3
 8000f06:	4313      	orrs	r3, r2
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	82fb      	strh	r3, [r7, #22]

	MSB = (uint8_t)(REGISTER >> 8);
 8000f14:	8afb      	ldrh	r3, [r7, #22]
 8000f16:	0a1b      	lsrs	r3, r3, #8
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	757b      	strb	r3, [r7, #21]
	LSB = (uint8_t)(REGISTER & 0xFF);
 8000f1c:	8afb      	ldrh	r3, [r7, #22]
 8000f1e:	753b      	strb	r3, [r7, #20]

	datos[0] = INA_CONFIGURATION_REGISTER;
 8000f20:	2300      	movs	r3, #0
 8000f22:	743b      	strb	r3, [r7, #16]
	datos[1] = MSB;
 8000f24:	7d7b      	ldrb	r3, [r7, #21]
 8000f26:	747b      	strb	r3, [r7, #17]
	datos[2] = LSB;
 8000f28:	7d3b      	ldrb	r3, [r7, #20]
 8000f2a:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 8000f2c:	f107 0210 	add.w	r2, r7, #16
 8000f30:	2364      	movs	r3, #100	@ 0x64
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2303      	movs	r3, #3
 8000f36:	2180      	movs	r1, #128	@ 0x80
 8000f38:	483a      	ldr	r0, [pc, #232]	@ (8001024 <INA226_Init+0x15c>)
 8000f3a:	f001 fecb 	bl	8002cd4 <HAL_I2C_Master_Transmit>

	ina.current_LSB = (Maximum_Expected_Current*1000000000/32768); // Conseguir el mejor LSB posible en nA
 8000f3e:	a336      	add	r3, pc, #216	@ (adr r3, 8001018 <INA226_Init+0x150>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f48:	f7ff fabe 	bl	80004c8 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b33      	ldr	r3, [pc, #204]	@ (8001028 <INA226_Init+0x160>)
 8000f5a:	f7ff fbdf 	bl	800071c <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	f7ff fcc1 	bl	80008ec <__aeabi_d2uiz>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001020 <INA226_Init+0x158>)
 8000f6e:	6053      	str	r3, [r2, #4]
	ina.calibration = (float)5120000 / ((float)ina.current_LSB * ina.Rshunt/1000);  // Compute calibration register(CAL)
 8000f70:	4b2b      	ldr	r3, [pc, #172]	@ (8001020 <INA226_Init+0x158>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fddf 	bl	8000b38 <__aeabi_ui2f>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <INA226_Init+0x158>)
 8000f7e:	89db      	ldrh	r3, [r3, #14]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fddd 	bl	8000b40 <__aeabi_i2f>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f7ff fe2c 	bl	8000be8 <__aeabi_fmul>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4926      	ldr	r1, [pc, #152]	@ (800102c <INA226_Init+0x164>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fedb 	bl	8000d50 <__aeabi_fdiv>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4824      	ldr	r0, [pc, #144]	@ (8001030 <INA226_Init+0x168>)
 8000fa0:	f7ff fed6 	bl	8000d50 <__aeabi_fdiv>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff6e 	bl	8000e88 <__aeabi_f2uiz>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <INA226_Init+0x158>)
 8000fb2:	805a      	strh	r2, [r3, #2]

	//La formula para "power_LSB" es solo multiplicar "current_LSB" por 25 (pag.16 datasheet)
	//Lo resto 900 para calibrar(probar desde 600 - 1500 )
	//Lo divido entre 1000 porq el numero es muy grande y para la operacion de "INA226_Power()" el numero excede de uint32_t
	ina.power_LSB   = (float)25 * ina.current_LSB/1000;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <INA226_Init+0x158>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fdbd 	bl	8000b38 <__aeabi_ui2f>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	491c      	ldr	r1, [pc, #112]	@ (8001034 <INA226_Init+0x16c>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fe10 	bl	8000be8 <__aeabi_fmul>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4918      	ldr	r1, [pc, #96]	@ (800102c <INA226_Init+0x164>)
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff febf 	bl	8000d50 <__aeabi_fdiv>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff57 	bl	8000e88 <__aeabi_f2uiz>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a10      	ldr	r2, [pc, #64]	@ (8001020 <INA226_Init+0x158>)
 8000fde:	6093      	str	r3, [r2, #8]

	MSB = (uint8_t)(ina.calibration >> 8);
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <INA226_Init+0x158>)
 8000fe2:	885b      	ldrh	r3, [r3, #2]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	757b      	strb	r3, [r7, #21]
	LSB = (uint8_t)(ina.calibration & 0xFF);
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <INA226_Init+0x158>)
 8000fec:	885b      	ldrh	r3, [r3, #2]
 8000fee:	753b      	strb	r3, [r7, #20]

	datos[0] = INA_CALIBRATION_REGISTER;
 8000ff0:	2305      	movs	r3, #5
 8000ff2:	743b      	strb	r3, [r7, #16]
	datos[1] = MSB;
 8000ff4:	7d7b      	ldrb	r3, [r7, #21]
 8000ff6:	747b      	strb	r3, [r7, #17]
	datos[2] = LSB;
 8000ff8:	7d3b      	ldrb	r3, [r7, #20]
 8000ffa:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 8000ffc:	f107 0210 	add.w	r2, r7, #16
 8001000:	2364      	movs	r3, #100	@ 0x64
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2303      	movs	r3, #3
 8001006:	2180      	movs	r1, #128	@ 0x80
 8001008:	4806      	ldr	r0, [pc, #24]	@ (8001024 <INA226_Init+0x15c>)
 800100a:	f001 fe63 	bl	8002cd4 <HAL_I2C_Master_Transmit>
}
 800100e:	bf00      	nop
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd90      	pop	{r4, r7, pc}
 8001016:	bf00      	nop
 8001018:	00000000 	.word	0x00000000
 800101c:	41cdcd65 	.word	0x41cdcd65
 8001020:	20000028 	.word	0x20000028
 8001024:	200000e0 	.word	0x200000e0
 8001028:	40e00000 	.word	0x40e00000
 800102c:	447a0000 	.word	0x447a0000
 8001030:	4a9c4000 	.word	0x4a9c4000
 8001034:	41c80000 	.word	0x41c80000

08001038 <INA226_Vbus>:
		Vshunt = (uint32_t)dato * INA_SHUNT_VOLTAGE_LSB;
		return Vshunt/10000.0;
	}
}

float INA226_Vbus(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
	uint16_t dato;
	uint32_t Vbus;
	uint8_t datos[3];

	datos[0] = INA_BUS_VOLTAGE_REGISTER;
 800103e:	2302      	movs	r3, #2
 8001040:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 8001042:	1d3a      	adds	r2, r7, #4
 8001044:	2364      	movs	r3, #100	@ 0x64
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	2180      	movs	r1, #128	@ 0x80
 800104c:	4818      	ldr	r0, [pc, #96]	@ (80010b0 <INA226_Vbus+0x78>)
 800104e:	f001 fe41 	bl	8002cd4 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 8001052:	1d3a      	adds	r2, r7, #4
 8001054:	2364      	movs	r3, #100	@ 0x64
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2302      	movs	r3, #2
 800105a:	2181      	movs	r1, #129	@ 0x81
 800105c:	4814      	ldr	r0, [pc, #80]	@ (80010b0 <INA226_Vbus+0x78>)
 800105e:	f001 ff37 	bl	8002ed0 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 8001062:	793b      	ldrb	r3, [r7, #4]
 8001064:	b21b      	sxth	r3, r3
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	81fb      	strh	r3, [r7, #14]
	Vbus = (uint32_t)dato * INA_BUS_VOLTAGE_LSB;
 8001074:	89fa      	ldrh	r2, [r7, #14]
 8001076:	4613      	mov	r3, r2
 8001078:	015b      	lsls	r3, r3, #5
 800107a:	1a9b      	subs	r3, r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	60bb      	str	r3, [r7, #8]

	return Vbus/100000.0;//Voltios;
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f7ff f9a6 	bl	80003d4 <__aeabi_ui2d>
 8001088:	a307      	add	r3, pc, #28	@ (adr r3, 80010a8 <INA226_Vbus+0x70>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fb45 	bl	800071c <__aeabi_ddiv>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fc47 	bl	800092c <__aeabi_d2f>
 800109e:	4603      	mov	r3, r0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40f86a00 	.word	0x40f86a00
 80010b0:	200000e0 	.word	0x200000e0

080010b4 <INA226_Current>:

float INA226_Current(void){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af02      	add	r7, sp, #8
	uint16_t dato;
	uint32_t current;
	uint8_t datos[3];

	//todo esto es lo mismo que float INA226_Vshunt(void) ya que si ingreso esta funcion dentro de esta funcion, no me deja hacer debug
	datos[0] = INA_SHUNT_VOLTAGE_REGISTER;
 80010ba:	2301      	movs	r3, #1
 80010bc:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80010be:	1d3a      	adds	r2, r7, #4
 80010c0:	2364      	movs	r3, #100	@ 0x64
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	2180      	movs	r1, #128	@ 0x80
 80010c8:	4824      	ldr	r0, [pc, #144]	@ (800115c <INA226_Current+0xa8>)
 80010ca:	f001 fe03 	bl	8002cd4 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 80010ce:	1d3a      	adds	r2, r7, #4
 80010d0:	2364      	movs	r3, #100	@ 0x64
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2302      	movs	r3, #2
 80010d6:	2181      	movs	r1, #129	@ 0x81
 80010d8:	4820      	ldr	r0, [pc, #128]	@ (800115c <INA226_Current+0xa8>)
 80010da:	f001 fef9 	bl	8002ed0 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 80010de:	793b      	ldrb	r3, [r7, #4]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	797b      	ldrb	r3, [r7, #5]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	81fb      	strh	r3, [r7, #14]

	if(dato >= 65534){//si no hay carga conectada, devuelve el dato 65535(puede oscilar entre 65534 y 65535)
 80010f0:	89fb      	ldrh	r3, [r7, #14]
 80010f2:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d902      	bls.n	8001100 <INA226_Current+0x4c>
		return 0;
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	e029      	b.n	8001154 <INA226_Current+0xa0>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	}else{
		datos[0] = INA_CURRENT_REGISTER;
 8001100:	2304      	movs	r3, #4
 8001102:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 8001104:	1d3a      	adds	r2, r7, #4
 8001106:	2364      	movs	r3, #100	@ 0x64
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	2180      	movs	r1, #128	@ 0x80
 800110e:	4813      	ldr	r0, [pc, #76]	@ (800115c <INA226_Current+0xa8>)
 8001110:	f001 fde0 	bl	8002cd4 <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 8001114:	1d3a      	adds	r2, r7, #4
 8001116:	2364      	movs	r3, #100	@ 0x64
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2302      	movs	r3, #2
 800111c:	2181      	movs	r1, #129	@ 0x81
 800111e:	480f      	ldr	r0, [pc, #60]	@ (800115c <INA226_Current+0xa8>)
 8001120:	f001 fed6 	bl	8002ed0 <HAL_I2C_Master_Receive>
		dato = ((datos[0]<<8)|datos[1]);
 8001124:	793b      	ldrb	r3, [r7, #4]
 8001126:	b21b      	sxth	r3, r3
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21a      	sxth	r2, r3
 800112c:	797b      	ldrb	r3, [r7, #5]
 800112e:	b21b      	sxth	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b21b      	sxth	r3, r3
 8001134:	81fb      	strh	r3, [r7, #14]
		current = (uint32_t)dato * ina.current_LSB;
 8001136:	89fb      	ldrh	r3, [r7, #14]
 8001138:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <INA226_Current+0xac>)
 800113a:	6852      	ldr	r2, [r2, #4]
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	60bb      	str	r3, [r7, #8]
		return current/1000000;//mA;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <INA226_Current+0xb0>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	0c9b      	lsrs	r3, r3, #18
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fcf3 	bl	8000b38 <__aeabi_ui2f>
 8001152:	4603      	mov	r3, r0
		HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
		dato = ((datos[0]<<8)|datos[1]);
		current = (uint32_t)dato * (ina.current_LSB-900);
		return current/1000000.0;//mA;
	}*/
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200000e0 	.word	0x200000e0
 8001160:	20000028 	.word	0x20000028
 8001164:	431bde83 	.word	0x431bde83

08001168 <INA226_Mode_pinAlert>:
	dato = ((datos[0]<<8)|datos[1]);
	power = (uint32_t)dato * ina.power_LSB;
	return power/1000000.0;//Watts;
}

uint16_t INA226_Mode_pinAlert(uint16_t umbral){// 1000 0xxx xxx0 0010 = 0x2002
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af02      	add	r7, sp, #8
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
	uint16_t dato;
	uint8_t datos[3];
	uint8_t MSB,LSB;

	ina.mask_Enable = umbral;
 8001172:	4a1d      	ldr	r2, [pc, #116]	@ (80011e8 <INA226_Mode_pinAlert+0x80>)
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	8213      	strh	r3, [r2, #16]
	 * bit  2: 0 (Indicador de desbordamiento matematico)
	 * bit  1: 1 (Polaridad de alerta 1:Invertido 0:Normal)
	 * bit  0: 0 (Alert Latch Enable)
	*/

	MSB = (uint8_t)(umbral >> 8);
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	b29b      	uxth	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
	LSB = (uint8_t)(umbral & 0xFF);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	73bb      	strb	r3, [r7, #14]

	//Envio el "umbral" al registro mask/enable
	datos[0] = INA_MASK_ENABLE_REGISTER;
 8001184:	2306      	movs	r3, #6
 8001186:	723b      	strb	r3, [r7, #8]
	datos[1] = MSB;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	727b      	strb	r3, [r7, #9]
	datos[2] = LSB;
 800118c:	7bbb      	ldrb	r3, [r7, #14]
 800118e:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 8001190:	f107 0208 	add.w	r2, r7, #8
 8001194:	2364      	movs	r3, #100	@ 0x64
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2303      	movs	r3, #3
 800119a:	2180      	movs	r1, #128	@ 0x80
 800119c:	4813      	ldr	r0, [pc, #76]	@ (80011ec <INA226_Mode_pinAlert+0x84>)
 800119e:	f001 fd99 	bl	8002cd4 <HAL_I2C_Master_Transmit>

	//Leo el dato "umbral" que envie, para verificar que llego correctamente
	datos[0] = INA_MASK_ENABLE_REGISTER;
 80011a2:	2306      	movs	r3, #6
 80011a4:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80011a6:	f107 0208 	add.w	r2, r7, #8
 80011aa:	2364      	movs	r3, #100	@ 0x64
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2301      	movs	r3, #1
 80011b0:	2180      	movs	r1, #128	@ 0x80
 80011b2:	480e      	ldr	r0, [pc, #56]	@ (80011ec <INA226_Mode_pinAlert+0x84>)
 80011b4:	f001 fd8e 	bl	8002cd4 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 80011b8:	f107 0208 	add.w	r2, r7, #8
 80011bc:	2364      	movs	r3, #100	@ 0x64
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2302      	movs	r3, #2
 80011c2:	2181      	movs	r1, #129	@ 0x81
 80011c4:	4809      	ldr	r0, [pc, #36]	@ (80011ec <INA226_Mode_pinAlert+0x84>)
 80011c6:	f001 fe83 	bl	8002ed0 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 80011ca:	7a3b      	ldrb	r3, [r7, #8]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7a7b      	ldrb	r3, [r7, #9]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21b      	sxth	r3, r3
 80011da:	81bb      	strh	r3, [r7, #12]
	return dato;
 80011dc:	89bb      	ldrh	r3, [r7, #12]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000028 	.word	0x20000028
 80011ec:	200000e0 	.word	0x200000e0

080011f0 <INA226_Alert_Limit>:

uint16_t INA226_Alert_Limit(uint16_t limite){//presicion ±2mA, el mV y mW falta probar, pero es muy preciso
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
	uint16_t dato;
	uint8_t datos[3];
	uint8_t MSB,LSB;
	float calibrar=1.0099;////lo multiplico por 1.0099 para calibrarlo, esto lo hice con varias pruebas fisicas y probando con varios Rload
 80011fa:	4b93      	ldr	r3, [pc, #588]	@ (8001448 <INA226_Alert_Limit+0x258>)
 80011fc:	617b      	str	r3, [r7, #20]
	 * dato = power/ina.power_LSB;
	 * dato = (power*1000)/ina.power_LSB;      se multiplica por 1000 para tener el "dato" en 16bits
	 * 										   dato: es el valor(0-32767) que nos devuelve el IN226 en "INA226_Vbus()"
	 * 										   limite = power (Ingresar "uint16_t limite" en miliwatts)
	*/
	switch(ina.mask_Enable){
 80011fe:	4b93      	ldr	r3, [pc, #588]	@ (800144c <INA226_Alert_Limit+0x25c>)
 8001200:	8a1b      	ldrh	r3, [r3, #16]
 8001202:	f248 0202 	movw	r2, #32770	@ 0x8002
 8001206:	4293      	cmp	r3, r2
 8001208:	d021      	beq.n	800124e <INA226_Alert_Limit+0x5e>
 800120a:	f248 0202 	movw	r2, #32770	@ 0x8002
 800120e:	4293      	cmp	r3, r2
 8001210:	f300 80dc 	bgt.w	80013cc <INA226_Alert_Limit+0x1dc>
 8001214:	f244 0202 	movw	r2, #16386	@ 0x4002
 8001218:	4293      	cmp	r3, r2
 800121a:	d04f      	beq.n	80012bc <INA226_Alert_Limit+0xcc>
 800121c:	f244 0202 	movw	r2, #16386	@ 0x4002
 8001220:	4293      	cmp	r3, r2
 8001222:	f300 80d3 	bgt.w	80013cc <INA226_Alert_Limit+0x1dc>
 8001226:	f242 0202 	movw	r2, #8194	@ 0x2002
 800122a:	4293      	cmp	r3, r2
 800122c:	d07d      	beq.n	800132a <INA226_Alert_Limit+0x13a>
 800122e:	f242 0202 	movw	r2, #8194	@ 0x2002
 8001232:	4293      	cmp	r3, r2
 8001234:	f300 80ca 	bgt.w	80013cc <INA226_Alert_Limit+0x1dc>
 8001238:	f640 0202 	movw	r2, #2050	@ 0x802
 800123c:	4293      	cmp	r3, r2
 800123e:	f000 80a0 	beq.w	8001382 <INA226_Alert_Limit+0x192>
 8001242:	f241 0202 	movw	r2, #4098	@ 0x1002
 8001246:	4293      	cmp	r3, r2
 8001248:	f000 8085 	beq.w	8001356 <INA226_Alert_Limit+0x166>
 800124c:	e0be      	b.n	80013cc <INA226_Alert_Limit+0x1dc>
		case SHUNT_VOLTAGE_OVER : limite = ((float)limite*ina.Rshunt*10.0*calibrar)/INA_SHUNT_VOLTAGE_LSB;break;
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fc71 	bl	8000b38 <__aeabi_ui2f>
 8001256:	4604      	mov	r4, r0
 8001258:	4b7c      	ldr	r3, [pc, #496]	@ (800144c <INA226_Alert_Limit+0x25c>)
 800125a:	89db      	ldrh	r3, [r3, #14]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fc6f 	bl	8000b40 <__aeabi_i2f>
 8001262:	4603      	mov	r3, r0
 8001264:	4619      	mov	r1, r3
 8001266:	4620      	mov	r0, r4
 8001268:	f7ff fcbe 	bl	8000be8 <__aeabi_fmul>
 800126c:	4603      	mov	r3, r0
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f8d2 	bl	8000418 <__aeabi_f2d>
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	4b75      	ldr	r3, [pc, #468]	@ (8001450 <INA226_Alert_Limit+0x260>)
 800127a:	f7ff f925 	bl	80004c8 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4614      	mov	r4, r2
 8001284:	461d      	mov	r5, r3
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff f8c6 	bl	8000418 <__aeabi_f2d>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4620      	mov	r0, r4
 8001292:	4629      	mov	r1, r5
 8001294:	f7ff f918 	bl	80004c8 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001454 <INA226_Alert_Limit+0x264>)
 80012a6:	f7ff fa39 	bl	800071c <__aeabi_ddiv>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fb1b 	bl	80008ec <__aeabi_d2uiz>
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
 80012ba:	e087      	b.n	80013cc <INA226_Alert_Limit+0x1dc>
		case SHUNT_VOLTAGE_UNDER: limite = ((float)limite*ina.Rshunt*10.0*calibrar)/INA_SHUNT_VOLTAGE_LSB;break;
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fc3a 	bl	8000b38 <__aeabi_ui2f>
 80012c4:	4604      	mov	r4, r0
 80012c6:	4b61      	ldr	r3, [pc, #388]	@ (800144c <INA226_Alert_Limit+0x25c>)
 80012c8:	89db      	ldrh	r3, [r3, #14]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fc38 	bl	8000b40 <__aeabi_i2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4619      	mov	r1, r3
 80012d4:	4620      	mov	r0, r4
 80012d6:	f7ff fc87 	bl	8000be8 <__aeabi_fmul>
 80012da:	4603      	mov	r3, r0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f89b 	bl	8000418 <__aeabi_f2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001450 <INA226_Alert_Limit+0x260>)
 80012e8:	f7ff f8ee 	bl	80004c8 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	461d      	mov	r5, r3
 80012f4:	6978      	ldr	r0, [r7, #20]
 80012f6:	f7ff f88f 	bl	8000418 <__aeabi_f2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7ff f8e1 	bl	80004c8 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b50      	ldr	r3, [pc, #320]	@ (8001454 <INA226_Alert_Limit+0x264>)
 8001314:	f7ff fa02 	bl	800071c <__aeabi_ddiv>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff fae4 	bl	80008ec <__aeabi_d2uiz>
 8001324:	4603      	mov	r3, r0
 8001326:	80fb      	strh	r3, [r7, #6]
 8001328:	e050      	b.n	80013cc <INA226_Alert_Limit+0x1dc>
		case BUS_VOLTAGE_OVER   : limite = ((float)limite*0.8);break;
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fc03 	bl	8000b38 <__aeabi_ui2f>
 8001332:	4603      	mov	r3, r0
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f86f 	bl	8000418 <__aeabi_f2d>
 800133a:	a341      	add	r3, pc, #260	@ (adr r3, 8001440 <INA226_Alert_Limit+0x250>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff f8c2 	bl	80004c8 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff face 	bl	80008ec <__aeabi_d2uiz>
 8001350:	4603      	mov	r3, r0
 8001352:	80fb      	strh	r3, [r7, #6]
 8001354:	e03a      	b.n	80013cc <INA226_Alert_Limit+0x1dc>
		case BUS_VOLTAGE_UNDER  : limite = ((float)limite*0.8);break;
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fbed 	bl	8000b38 <__aeabi_ui2f>
 800135e:	4603      	mov	r3, r0
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f859 	bl	8000418 <__aeabi_f2d>
 8001366:	a336      	add	r3, pc, #216	@ (adr r3, 8001440 <INA226_Alert_Limit+0x250>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7ff f8ac 	bl	80004c8 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fab8 	bl	80008ec <__aeabi_d2uiz>
 800137c:	4603      	mov	r3, r0
 800137e:	80fb      	strh	r3, [r7, #6]
 8001380:	e024      	b.n	80013cc <INA226_Alert_Limit+0x1dc>
		case OVER_LIMIT_POWER   : limite = ((float)limite*1000.0)/ina.power_LSB;break;
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fbd7 	bl	8000b38 <__aeabi_ui2f>
 800138a:	4603      	mov	r3, r0
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f843 	bl	8000418 <__aeabi_f2d>
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	4b30      	ldr	r3, [pc, #192]	@ (8001458 <INA226_Alert_Limit+0x268>)
 8001398:	f7ff f896 	bl	80004c8 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4614      	mov	r4, r2
 80013a2:	461d      	mov	r5, r3
 80013a4:	4b29      	ldr	r3, [pc, #164]	@ (800144c <INA226_Alert_Limit+0x25c>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f813 	bl	80003d4 <__aeabi_ui2d>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4620      	mov	r0, r4
 80013b4:	4629      	mov	r1, r5
 80013b6:	f7ff f9b1 	bl	800071c <__aeabi_ddiv>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fa93 	bl	80008ec <__aeabi_d2uiz>
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
 80013ca:	bf00      	nop
	}

	MSB = (uint8_t)(limite >> 8);
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	74fb      	strb	r3, [r7, #19]
	LSB = (uint8_t)(limite & 0xFF);
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	74bb      	strb	r3, [r7, #18]

	//Envio el "limite" al registro mask/enable
	datos[0] = INA_ALERT_LIMIT_REGISTER;
 80013d8:	2307      	movs	r3, #7
 80013da:	733b      	strb	r3, [r7, #12]
	datos[1] = MSB;
 80013dc:	7cfb      	ldrb	r3, [r7, #19]
 80013de:	737b      	strb	r3, [r7, #13]
	datos[2] = LSB;
 80013e0:	7cbb      	ldrb	r3, [r7, #18]
 80013e2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 80013e4:	f107 020c 	add.w	r2, r7, #12
 80013e8:	2364      	movs	r3, #100	@ 0x64
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2303      	movs	r3, #3
 80013ee:	2180      	movs	r1, #128	@ 0x80
 80013f0:	481a      	ldr	r0, [pc, #104]	@ (800145c <INA226_Alert_Limit+0x26c>)
 80013f2:	f001 fc6f 	bl	8002cd4 <HAL_I2C_Master_Transmit>

	//Leo el dato "limite" que envie, para verificar que llego correctamente
	datos[0] = INA_ALERT_LIMIT_REGISTER;
 80013f6:	2307      	movs	r3, #7
 80013f8:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80013fa:	f107 020c 	add.w	r2, r7, #12
 80013fe:	2364      	movs	r3, #100	@ 0x64
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2301      	movs	r3, #1
 8001404:	2180      	movs	r1, #128	@ 0x80
 8001406:	4815      	ldr	r0, [pc, #84]	@ (800145c <INA226_Alert_Limit+0x26c>)
 8001408:	f001 fc64 	bl	8002cd4 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 800140c:	f107 020c 	add.w	r2, r7, #12
 8001410:	2364      	movs	r3, #100	@ 0x64
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2302      	movs	r3, #2
 8001416:	2181      	movs	r1, #129	@ 0x81
 8001418:	4810      	ldr	r0, [pc, #64]	@ (800145c <INA226_Alert_Limit+0x26c>)
 800141a:	f001 fd59 	bl	8002ed0 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 800141e:	7b3b      	ldrb	r3, [r7, #12]
 8001420:	b21b      	sxth	r3, r3
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	7b7b      	ldrb	r3, [r7, #13]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21b      	sxth	r3, r3
 800142e:	823b      	strh	r3, [r7, #16]
	return dato;
 8001430:	8a3b      	ldrh	r3, [r7, #16]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bdb0      	pop	{r4, r5, r7, pc}
 800143a:	bf00      	nop
 800143c:	f3af 8000 	nop.w
 8001440:	9999999a 	.word	0x9999999a
 8001444:	3fe99999 	.word	0x3fe99999
 8001448:	3f814467 	.word	0x3f814467
 800144c:	20000028 	.word	0x20000028
 8001450:	40240000 	.word	0x40240000
 8001454:	40390000 	.word	0x40390000
 8001458:	408f4000 	.word	0x408f4000
 800145c:	200000e0 	.word	0x200000e0

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001466:	f000 fbfb 	bl	8001c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146a:	f000 f84b 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146e:	f000 f9db 	bl	8001828 <MX_GPIO_Init>
  MX_DMA_Init();
 8001472:	f000 f9bb 	bl	80017ec <MX_DMA_Init>
  MX_ADC1_Init();
 8001476:	f000 f8a1 	bl	80015bc <MX_ADC1_Init>
  MX_TIM3_Init();
 800147a:	f000 f969 	bl	8001750 <MX_TIM3_Init>
  MX_ADC2_Init();
 800147e:	f000 f8fb 	bl	8001678 <MX_ADC2_Init>
  MX_I2C1_Init();
 8001482:	f000 f937 	bl	80016f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  INA226_Init(32.768,2,AVG_4,T_Vbus_1_1ms,T_Vshunt_1_1ms,MODE_SHUNT_BUS_CONTINUOUS);
 8001486:	2307      	movs	r3, #7
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2304      	movs	r3, #4
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	2304      	movs	r3, #4
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2301      	movs	r3, #1
 8001494:	2202      	movs	r2, #2
 8001496:	a114      	add	r1, pc, #80	@ (adr r1, 80014e8 <main+0x88>)
 8001498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800149c:	f7ff fd14 	bl	8000ec8 <INA226_Init>

  alert = INA226_Mode_pinAlert(SHUNT_VOLTAGE_OVER);
 80014a0:	f248 0002 	movw	r0, #32770	@ 0x8002
 80014a4:	f7ff fe60 	bl	8001168 <INA226_Mode_pinAlert>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <main+0x90>)
 80014ae:	801a      	strh	r2, [r3, #0]
  alertLimit = INA226_Alert_Limit(401);             //ativa o pino alerta
 80014b0:	f240 1091 	movw	r0, #401	@ 0x191
 80014b4:	f7ff fe9c 	bl	80011f0 <INA226_Alert_Limit>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <main+0x94>)
 80014be:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  voltage = INA226_Vbus();
 80014c0:	f7ff fdba 	bl	8001038 <INA226_Vbus>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a0c      	ldr	r2, [pc, #48]	@ (80014f8 <main+0x98>)
 80014c8:	6013      	str	r3, [r2, #0]
	  current = (INA226_Current()/1000);
 80014ca:	f7ff fdf3 	bl	80010b4 <INA226_Current>
 80014ce:	4603      	mov	r3, r0
 80014d0:	490a      	ldr	r1, [pc, #40]	@ (80014fc <main+0x9c>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fc3c 	bl	8000d50 <__aeabi_fdiv>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <main+0xa0>)
 80014de:	601a      	str	r2, [r3, #0]
	  voltage = INA226_Vbus();
 80014e0:	bf00      	nop
 80014e2:	e7ed      	b.n	80014c0 <main+0x60>
 80014e4:	f3af 8000 	nop.w
 80014e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80014ec:	4040624d 	.word	0x4040624d
 80014f0:	20000184 	.word	0x20000184
 80014f4:	20000186 	.word	0x20000186
 80014f8:	20000180 	.word	0x20000180
 80014fc:	447a0000 	.word	0x447a0000
 8001500:	2000017c 	.word	0x2000017c

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b094      	sub	sp, #80	@ 0x50
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800150e:	2228      	movs	r2, #40	@ 0x28
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f003 fb28 	bl	8004b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001534:	2301      	movs	r3, #1
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001538:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800153c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001542:	2301      	movs	r3, #1
 8001544:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001546:	2302      	movs	r3, #2
 8001548:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800154a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800154e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001550:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001554:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001556:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800155a:	4618      	mov	r0, r3
 800155c:	f002 faaa 	bl	8003ab4 <HAL_RCC_OscConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001566:	f000 f9d9 	bl	800191c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156a:	230f      	movs	r3, #15
 800156c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800157a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2102      	movs	r1, #2
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fd16 	bl	8003fb8 <HAL_RCC_ClockConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001592:	f000 f9c3 	bl	800191c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001596:	2302      	movs	r3, #2
 8001598:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800159a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800159e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fe82 	bl	80042ac <HAL_RCCEx_PeriphCLKConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015ae:	f000 f9b5 	bl	800191c <Error_Handler>
  }
}
 80015b2:	bf00      	nop
 80015b4:	3750      	adds	r7, #80	@ 0x50
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015de:	4b23      	ldr	r3, [pc, #140]	@ (800166c <MX_ADC1_Init+0xb0>)
 80015e0:	4a23      	ldr	r2, [pc, #140]	@ (8001670 <MX_ADC1_Init+0xb4>)
 80015e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015e4:	4b21      	ldr	r3, [pc, #132]	@ (800166c <MX_ADC1_Init+0xb0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015ea:	4b20      	ldr	r3, [pc, #128]	@ (800166c <MX_ADC1_Init+0xb0>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <MX_ADC1_Init+0xb0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <MX_ADC1_Init+0xb0>)
 80015f8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80015fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015fe:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <MX_ADC1_Init+0xb0>)
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001604:	4b19      	ldr	r3, [pc, #100]	@ (800166c <MX_ADC1_Init+0xb0>)
 8001606:	2201      	movs	r2, #1
 8001608:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800160a:	4818      	ldr	r0, [pc, #96]	@ (800166c <MX_ADC1_Init+0xb0>)
 800160c:	f000 fb8a 	bl	8001d24 <HAL_ADC_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 8001616:	f000 f981 	bl	800191c <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800161a:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <MX_ADC1_Init+0xb8>)
 800161c:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	4619      	mov	r1, r3
 8001634:	480d      	ldr	r0, [pc, #52]	@ (800166c <MX_ADC1_Init+0xb0>)
 8001636:	f000 fd45 	bl	80020c4 <HAL_ADC_AnalogWDGConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001640:	f000 f96c 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001644:	2300      	movs	r3, #0
 8001646:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001648:	2301      	movs	r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800164c:	2307      	movs	r3, #7
 800164e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	@ (800166c <MX_ADC1_Init+0xb0>)
 8001656:	f000 fc3d 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001660:	f000 f95c 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	@ 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	2000003c 	.word	0x2000003c
 8001670:	40012400 	.word	0x40012400
 8001674:	00800200 	.word	0x00800200

08001678 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001688:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <MX_ADC2_Init+0x74>)
 800168a:	4a19      	ldr	r2, [pc, #100]	@ (80016f0 <MX_ADC2_Init+0x78>)
 800168c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800168e:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <MX_ADC2_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001694:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <MX_ADC2_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_ADC2_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <MX_ADC2_Init+0x74>)
 80016a2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80016a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <MX_ADC2_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80016ae:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <MX_ADC2_Init+0x74>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016b4:	480d      	ldr	r0, [pc, #52]	@ (80016ec <MX_ADC2_Init+0x74>)
 80016b6:	f000 fb35 	bl	8001d24 <HAL_ADC_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80016c0:	f000 f92c 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016c4:	2301      	movs	r3, #1
 80016c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	@ (80016ec <MX_ADC2_Init+0x74>)
 80016d6:	f000 fbfd 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80016e0:	f000 f91c 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2000006c 	.word	0x2000006c
 80016f0:	40012800 	.word	0x40012800

080016f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <MX_I2C1_Init+0x50>)
 80016fa:	4a13      	ldr	r2, [pc, #76]	@ (8001748 <MX_I2C1_Init+0x54>)
 80016fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001700:	4a12      	ldr	r2, [pc, #72]	@ (800174c <MX_I2C1_Init+0x58>)
 8001702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <MX_I2C1_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001712:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <MX_I2C1_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001724:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <MX_I2C1_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001732:	f001 f98b 	bl	8002a4c <HAL_I2C_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800173c:	f000 f8ee 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200000e0 	.word	0x200000e0
 8001748:	40005400 	.word	0x40005400
 800174c:	000186a0 	.word	0x000186a0

08001750 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	463b      	mov	r3, r7
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800176c:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <MX_TIM3_Init+0x94>)
 800176e:	4a1e      	ldr	r2, [pc, #120]	@ (80017e8 <MX_TIM3_Init+0x98>)
 8001770:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <MX_TIM3_Init+0x94>)
 8001774:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001778:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <MX_TIM3_Init+0x94>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001780:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <MX_TIM3_Init+0x94>)
 8001782:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001786:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <MX_TIM3_Init+0x94>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <MX_TIM3_Init+0x94>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001794:	4813      	ldr	r0, [pc, #76]	@ (80017e4 <MX_TIM3_Init+0x94>)
 8001796:	f002 fe3f 	bl	8004418 <HAL_TIM_Base_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80017a0:	f000 f8bc 	bl	800191c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4619      	mov	r1, r3
 80017b0:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <MX_TIM3_Init+0x94>)
 80017b2:	f002 ff70 	bl	8004696 <HAL_TIM_ConfigClockSource>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017bc:	f000 f8ae 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017c8:	463b      	mov	r3, r7
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <MX_TIM3_Init+0x94>)
 80017ce:	f003 f95b 	bl	8004a88 <HAL_TIMEx_MasterConfigSynchronization>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80017d8:	f000 f8a0 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000134 	.word	0x20000134
 80017e8:	40000400 	.word	0x40000400

080017ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <MX_DMA_Init+0x38>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001824 <MX_DMA_Init+0x38>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6153      	str	r3, [r2, #20]
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <MX_DMA_Init+0x38>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	200b      	movs	r0, #11
 8001810:	f000 fdc7 	bl	80023a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001814:	200b      	movs	r0, #11
 8001816:	f000 fde0 	bl	80023da <HAL_NVIC_EnableIRQ>

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183c:	4b33      	ldr	r3, [pc, #204]	@ (800190c <MX_GPIO_Init+0xe4>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a32      	ldr	r2, [pc, #200]	@ (800190c <MX_GPIO_Init+0xe4>)
 8001842:	f043 0310 	orr.w	r3, r3, #16
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b30      	ldr	r3, [pc, #192]	@ (800190c <MX_GPIO_Init+0xe4>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001854:	4b2d      	ldr	r3, [pc, #180]	@ (800190c <MX_GPIO_Init+0xe4>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a2c      	ldr	r2, [pc, #176]	@ (800190c <MX_GPIO_Init+0xe4>)
 800185a:	f043 0320 	orr.w	r3, r3, #32
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b2a      	ldr	r3, [pc, #168]	@ (800190c <MX_GPIO_Init+0xe4>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <MX_GPIO_Init+0xe4>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a26      	ldr	r2, [pc, #152]	@ (800190c <MX_GPIO_Init+0xe4>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b24      	ldr	r3, [pc, #144]	@ (800190c <MX_GPIO_Init+0xe4>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001884:	4b21      	ldr	r3, [pc, #132]	@ (800190c <MX_GPIO_Init+0xe4>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a20      	ldr	r2, [pc, #128]	@ (800190c <MX_GPIO_Init+0xe4>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <MX_GPIO_Init+0xe4>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2120      	movs	r1, #32
 80018a0:	481b      	ldr	r0, [pc, #108]	@ (8001910 <MX_GPIO_Init+0xe8>)
 80018a2:	f001 f899 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ac:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <MX_GPIO_Init+0xec>)
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	4817      	ldr	r0, [pc, #92]	@ (8001918 <MX_GPIO_Init+0xf0>)
 80018bc:	f000 ff08 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_TX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 80018c0:	2304      	movs	r3, #4
 80018c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	4619      	mov	r1, r3
 80018d2:	480f      	ldr	r0, [pc, #60]	@ (8001910 <MX_GPIO_Init+0xe8>)
 80018d4:	f000 fefc 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018d8:	2320      	movs	r3, #32
 80018da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2302      	movs	r3, #2
 80018e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	4619      	mov	r1, r3
 80018ee:	4808      	ldr	r0, [pc, #32]	@ (8001910 <MX_GPIO_Init+0xe8>)
 80018f0:	f000 feee 	bl	80026d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2100      	movs	r1, #0
 80018f8:	2028      	movs	r0, #40	@ 0x28
 80018fa:	f000 fd52 	bl	80023a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018fe:	2028      	movs	r0, #40	@ 0x28
 8001900:	f000 fd6b 	bl	80023da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	40010800 	.word	0x40010800
 8001914:	10110000 	.word	0x10110000
 8001918:	40011000 	.word	0x40011000

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <Error_Handler+0x8>

08001928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <HAL_MspInit+0x5c>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <HAL_MspInit+0x5c>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6193      	str	r3, [r2, #24]
 800193a:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HAL_MspInit+0x5c>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <HAL_MspInit+0x5c>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a0e      	ldr	r2, [pc, #56]	@ (8001984 <HAL_MspInit+0x5c>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001950:	61d3      	str	r3, [r2, #28]
 8001952:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <HAL_MspInit+0x5c>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800195e:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <HAL_MspInit+0x60>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	4a04      	ldr	r2, [pc, #16]	@ (8001988 <HAL_MspInit+0x60>)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000

0800198c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	@ 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0318 	add.w	r3, r7, #24
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a3c      	ldr	r2, [pc, #240]	@ (8001a98 <HAL_ADC_MspInit+0x10c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d14a      	bne.n	8001a42 <HAL_ADC_MspInit+0xb6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019ac:	4b3b      	ldr	r3, [pc, #236]	@ (8001a9c <HAL_ADC_MspInit+0x110>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a3a      	ldr	r2, [pc, #232]	@ (8001a9c <HAL_ADC_MspInit+0x110>)
 80019b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b38      	ldr	r3, [pc, #224]	@ (8001a9c <HAL_ADC_MspInit+0x110>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b35      	ldr	r3, [pc, #212]	@ (8001a9c <HAL_ADC_MspInit+0x110>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a34      	ldr	r2, [pc, #208]	@ (8001a9c <HAL_ADC_MspInit+0x110>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b32      	ldr	r3, [pc, #200]	@ (8001a9c <HAL_ADC_MspInit+0x110>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019dc:	2301      	movs	r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e0:	2303      	movs	r3, #3
 80019e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0318 	add.w	r3, r7, #24
 80019e8:	4619      	mov	r1, r3
 80019ea:	482d      	ldr	r0, [pc, #180]	@ (8001aa0 <HAL_ADC_MspInit+0x114>)
 80019ec:	f000 fe70 	bl	80026d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019f0:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa4 <HAL_ADC_MspInit+0x118>)
 80019f2:	4a2d      	ldr	r2, [pc, #180]	@ (8001aa8 <HAL_ADC_MspInit+0x11c>)
 80019f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019f6:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <HAL_ADC_MspInit+0x118>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fc:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <HAL_ADC_MspInit+0x118>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a02:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <HAL_ADC_MspInit+0x118>)
 8001a04:	2280      	movs	r2, #128	@ 0x80
 8001a06:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a08:	4b26      	ldr	r3, [pc, #152]	@ (8001aa4 <HAL_ADC_MspInit+0x118>)
 8001a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a0e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a10:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_ADC_MspInit+0x118>)
 8001a12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a16:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a18:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <HAL_ADC_MspInit+0x118>)
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a1e:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <HAL_ADC_MspInit+0x118>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a24:	481f      	ldr	r0, [pc, #124]	@ (8001aa4 <HAL_ADC_MspInit+0x118>)
 8001a26:	f000 fcf3 	bl	8002410 <HAL_DMA_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001a30:	f7ff ff74 	bl	800191c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa4 <HAL_ADC_MspInit+0x118>)
 8001a38:	621a      	str	r2, [r3, #32]
 8001a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa4 <HAL_ADC_MspInit+0x118>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6253      	str	r3, [r2, #36]	@ 0x24
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a40:	e026      	b.n	8001a90 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a19      	ldr	r2, [pc, #100]	@ (8001aac <HAL_ADC_MspInit+0x120>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d121      	bne.n	8001a90 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a4c:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <HAL_ADC_MspInit+0x110>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a12      	ldr	r2, [pc, #72]	@ (8001a9c <HAL_ADC_MspInit+0x110>)
 8001a52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <HAL_ADC_MspInit+0x110>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <HAL_ADC_MspInit+0x110>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a0c      	ldr	r2, [pc, #48]	@ (8001a9c <HAL_ADC_MspInit+0x110>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_ADC_MspInit+0x110>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a80:	2303      	movs	r3, #3
 8001a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 0318 	add.w	r3, r7, #24
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4805      	ldr	r0, [pc, #20]	@ (8001aa0 <HAL_ADC_MspInit+0x114>)
 8001a8c:	f000 fe20 	bl	80026d0 <HAL_GPIO_Init>
}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	@ 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40012400 	.word	0x40012400
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010800 	.word	0x40010800
 8001aa4:	2000009c 	.word	0x2000009c
 8001aa8:	40020008 	.word	0x40020008
 8001aac:	40012800 	.word	0x40012800

08001ab0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a15      	ldr	r2, [pc, #84]	@ (8001b20 <HAL_I2C_MspInit+0x70>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d123      	bne.n	8001b18 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad0:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <HAL_I2C_MspInit+0x74>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a13      	ldr	r2, [pc, #76]	@ (8001b24 <HAL_I2C_MspInit+0x74>)
 8001ad6:	f043 0308 	orr.w	r3, r3, #8
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <HAL_I2C_MspInit+0x74>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ae8:	23c0      	movs	r3, #192	@ 0xc0
 8001aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aec:	2312      	movs	r3, #18
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4619      	mov	r1, r3
 8001afa:	480b      	ldr	r0, [pc, #44]	@ (8001b28 <HAL_I2C_MspInit+0x78>)
 8001afc:	f000 fde8 	bl	80026d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <HAL_I2C_MspInit+0x74>)
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	4a07      	ldr	r2, [pc, #28]	@ (8001b24 <HAL_I2C_MspInit+0x74>)
 8001b06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b0a:	61d3      	str	r3, [r2, #28]
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_I2C_MspInit+0x74>)
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b18:	bf00      	nop
 8001b1a:	3720      	adds	r7, #32
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40005400 	.word	0x40005400
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010c00 	.word	0x40010c00

08001b2c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0d      	ldr	r2, [pc, #52]	@ (8001b70 <HAL_TIM_Base_MspInit+0x44>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d113      	bne.n	8001b66 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b74 <HAL_TIM_Base_MspInit+0x48>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a0c      	ldr	r2, [pc, #48]	@ (8001b74 <HAL_TIM_Base_MspInit+0x48>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <HAL_TIM_Base_MspInit+0x48>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	201d      	movs	r0, #29
 8001b5c:	f000 fc21 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b60:	201d      	movs	r0, #29
 8001b62:	f000 fc3a 	bl	80023da <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40021000 	.word	0x40021000

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <NMI_Handler+0x4>

08001b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <MemManage_Handler+0x4>

08001b90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <UsageFault_Handler+0x4>

08001ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc8:	f000 f890 	bl	8001cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <DMA1_Channel1_IRQHandler+0x10>)
 8001bd6:	f000 fc75 	bl	80024c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2000009c 	.word	0x2000009c

08001be4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <TIM3_IRQHandler+0x10>)
 8001bea:	f002 fc64 	bl	80044b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000134 	.word	0x20000134

08001bf8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001bfc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c00:	f000 ff02 	bl	8002a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c14:	f7ff fff8 	bl	8001c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c18:	480b      	ldr	r0, [pc, #44]	@ (8001c48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c1a:	490c      	ldr	r1, [pc, #48]	@ (8001c4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a09      	ldr	r2, [pc, #36]	@ (8001c54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c30:	4c09      	ldr	r4, [pc, #36]	@ (8001c58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f002 ff9b 	bl	8004b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c42:	f7ff fc0d 	bl	8001460 <main>
  bx lr
 8001c46:	4770      	bx	lr
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c50:	08004c0c 	.word	0x08004c0c
  ldr r2, =_sbss
 8001c54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c58:	2000018c 	.word	0x2000018c

08001c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC1_2_IRQHandler>
	...

08001c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c64:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <HAL_Init+0x28>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <HAL_Init+0x28>)
 8001c6a:	f043 0310 	orr.w	r3, r3, #16
 8001c6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c70:	2003      	movs	r0, #3
 8001c72:	f000 fb8b 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f000 f808 	bl	8001c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7c:	f7ff fe54 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c94:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <HAL_InitTick+0x54>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <HAL_InitTick+0x58>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fba3 	bl	80023f6 <HAL_SYSTICK_Config>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00e      	b.n	8001cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d80a      	bhi.n	8001cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f000 fb6b 	bl	80023a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ccc:	4a06      	ldr	r2, [pc, #24]	@ (8001ce8 <HAL_InitTick+0x5c>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_IncTick+0x1c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <HAL_IncTick+0x20>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a03      	ldr	r2, [pc, #12]	@ (8001d0c <HAL_IncTick+0x20>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	20000188 	.word	0x20000188

08001d10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b02      	ldr	r3, [pc, #8]	@ (8001d20 <HAL_GetTick+0x10>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	20000188 	.word	0x20000188

08001d24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0be      	b.n	8001ec4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fe12 	bl	800198c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fa01 	bl	8002170 <ADC_ConversionStop_Disable>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 8099 	bne.w	8001eb2 <HAL_ADC_Init+0x18e>
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 8095 	bne.w	8001eb2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d90:	f023 0302 	bic.w	r3, r3, #2
 8001d94:	f043 0202 	orr.w	r2, r3, #2
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001da4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7b1b      	ldrb	r3, [r3, #12]
 8001daa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dbc:	d003      	beq.n	8001dc6 <HAL_ADC_Init+0xa2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d102      	bne.n	8001dcc <HAL_ADC_Init+0xa8>
 8001dc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dca:	e000      	b.n	8001dce <HAL_ADC_Init+0xaa>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7d1b      	ldrb	r3, [r3, #20]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d119      	bne.n	8001e10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7b1b      	ldrb	r3, [r3, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	035a      	lsls	r2, r3, #13
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	e00b      	b.n	8001e10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfc:	f043 0220 	orr.w	r2, r3, #32
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	4b28      	ldr	r3, [pc, #160]	@ (8001ecc <HAL_ADC_Init+0x1a8>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e40:	d003      	beq.n	8001e4a <HAL_ADC_Init+0x126>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d104      	bne.n	8001e54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	051b      	lsls	r3, r3, #20
 8001e52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <HAL_ADC_Init+0x1ac>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d10b      	bne.n	8001e90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e8e:	e018      	b.n	8001ec2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	f023 0312 	bic.w	r3, r3, #18
 8001e98:	f043 0210 	orr.w	r2, r3, #16
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea4:	f043 0201 	orr.w	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001eb0:	e007      	b.n	8001ec2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb6:	f043 0210 	orr.w	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	ffe1f7fd 	.word	0xffe1f7fd
 8001ed0:	ff1f0efe 	.word	0xff1f0efe

08001ed4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x20>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e0dc      	b.n	80020ae <HAL_ADC_ConfigChannel+0x1da>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b06      	cmp	r3, #6
 8001f02:	d81c      	bhi.n	8001f3e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	3b05      	subs	r3, #5
 8001f16:	221f      	movs	r2, #31
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	4019      	ands	r1, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b05      	subs	r3, #5
 8001f30:	fa00 f203 	lsl.w	r2, r0, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f3c:	e03c      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d81c      	bhi.n	8001f80 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	3b23      	subs	r3, #35	@ 0x23
 8001f58:	221f      	movs	r2, #31
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	4019      	ands	r1, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b23      	subs	r3, #35	@ 0x23
 8001f72:	fa00 f203 	lsl.w	r2, r0, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f7e:	e01b      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b41      	subs	r3, #65	@ 0x41
 8001f92:	221f      	movs	r2, #31
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4019      	ands	r1, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	3b41      	subs	r3, #65	@ 0x41
 8001fac:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b09      	cmp	r3, #9
 8001fbe:	d91c      	bls.n	8001ffa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68d9      	ldr	r1, [r3, #12]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b1e      	subs	r3, #30
 8001fd2:	2207      	movs	r2, #7
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	4019      	ands	r1, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6898      	ldr	r0, [r3, #8]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b1e      	subs	r3, #30
 8001fec:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	e019      	b.n	800202e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6919      	ldr	r1, [r3, #16]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	2207      	movs	r2, #7
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	4019      	ands	r1, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6898      	ldr	r0, [r3, #8]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	fa00 f203 	lsl.w	r2, r0, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b10      	cmp	r3, #16
 8002034:	d003      	beq.n	800203e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800203a:	2b11      	cmp	r3, #17
 800203c:	d132      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d125      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d126      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002064:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b10      	cmp	r3, #16
 800206c:	d11a      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800206e:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <HAL_ADC_ConfigChannel+0x1e8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a13      	ldr	r2, [pc, #76]	@ (80020c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	0c9a      	lsrs	r2, r3, #18
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002084:	e002      	b.n	800208c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3b01      	subs	r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f9      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x1b2>
 8002092:	e007      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	f043 0220 	orr.w	r2, r3, #32
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40012400 	.word	0x40012400
 80020bc:	20000000 	.word	0x20000000
 80020c0:	431bde83 	.word	0x431bde83

080020c4 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a24      	ldr	r2, [pc, #144]	@ (8002164 <HAL_ADC_AnalogWDGConfig+0xa0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80020dc:	4a22      	ldr	r2, [pc, #136]	@ (8002168 <HAL_ADC_AnalogWDGConfig+0xa4>)
 80020de:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_AnalogWDGConfig+0x2a>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e035      	b.n	800215a <HAL_ADC_AnalogWDGConfig+0x96>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	7a1b      	ldrb	r3, [r3, #8]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d108      	bne.n	8002110 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	e007      	b.n	8002120 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800211e:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HAL_ADC_AnalogWDGConfig+0xa8>)
 8002128:	4013      	ands	r3, r2
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	6811      	ldr	r1, [r2, #0]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	6852      	ldr	r2, [r2, #4]
 8002132:	4311      	orrs	r1, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	430b      	orrs	r3, r1
 800213a:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	68d2      	ldr	r2, [r2, #12]
 8002144:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	6912      	ldr	r2, [r2, #16]
 800214e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	00800200 	.word	0x00800200
 8002168:	00400200 	.word	0x00400200
 800216c:	ff3ffde0 	.word	0xff3ffde0

08002170 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d12e      	bne.n	80021e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800219a:	f7ff fdb9 	bl	8001d10 <HAL_GetTick>
 800219e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021a0:	e01b      	b.n	80021da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021a2:	f7ff fdb5 	bl	8001d10 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d914      	bls.n	80021da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d10d      	bne.n	80021da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	f043 0210 	orr.w	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e007      	b.n	80021ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d0dc      	beq.n	80021a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db0b      	blt.n	8002282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4906      	ldr	r1, [pc, #24]	@ (800228c <__NVIC_EnableIRQ+0x34>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	@ (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	@ (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	@ 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002358:	d301      	bcc.n	800235e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <SysTick_Config+0x40>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002366:	210f      	movs	r1, #15
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f7ff ff90 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002370:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <SysTick_Config+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002376:	4b04      	ldr	r3, [pc, #16]	@ (8002388 <SysTick_Config+0x40>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000e010 	.word	0xe000e010

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff2d 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff42 	bl	800223c <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff90 	bl	80022e4 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5f 	bl	8002290 <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff35 	bl	8002258 <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa2 	bl	8002348 <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e043      	b.n	80024ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <HAL_DMA_Init+0xa8>)
 800242e:	4413      	add	r3, r2
 8002430:	4a22      	ldr	r2, [pc, #136]	@ (80024bc <HAL_DMA_Init+0xac>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	009a      	lsls	r2, r3, #2
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a1f      	ldr	r2, [pc, #124]	@ (80024c0 <HAL_DMA_Init+0xb0>)
 8002442:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800245a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800245e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002468:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002474:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002480:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	bffdfff8 	.word	0xbffdfff8
 80024bc:	cccccccd 	.word	0xcccccccd
 80024c0:	40020000 	.word	0x40020000

080024c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	2204      	movs	r2, #4
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d04f      	beq.n	800258c <HAL_DMA_IRQHandler+0xc8>
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d04a      	beq.n	800258c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0204 	bic.w	r2, r2, #4
 8002512:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a66      	ldr	r2, [pc, #408]	@ (80026b4 <HAL_DMA_IRQHandler+0x1f0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d029      	beq.n	8002572 <HAL_DMA_IRQHandler+0xae>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a65      	ldr	r2, [pc, #404]	@ (80026b8 <HAL_DMA_IRQHandler+0x1f4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d022      	beq.n	800256e <HAL_DMA_IRQHandler+0xaa>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a63      	ldr	r2, [pc, #396]	@ (80026bc <HAL_DMA_IRQHandler+0x1f8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01a      	beq.n	8002568 <HAL_DMA_IRQHandler+0xa4>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a62      	ldr	r2, [pc, #392]	@ (80026c0 <HAL_DMA_IRQHandler+0x1fc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d012      	beq.n	8002562 <HAL_DMA_IRQHandler+0x9e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a60      	ldr	r2, [pc, #384]	@ (80026c4 <HAL_DMA_IRQHandler+0x200>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00a      	beq.n	800255c <HAL_DMA_IRQHandler+0x98>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a5f      	ldr	r2, [pc, #380]	@ (80026c8 <HAL_DMA_IRQHandler+0x204>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d102      	bne.n	8002556 <HAL_DMA_IRQHandler+0x92>
 8002550:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002554:	e00e      	b.n	8002574 <HAL_DMA_IRQHandler+0xb0>
 8002556:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800255a:	e00b      	b.n	8002574 <HAL_DMA_IRQHandler+0xb0>
 800255c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002560:	e008      	b.n	8002574 <HAL_DMA_IRQHandler+0xb0>
 8002562:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002566:	e005      	b.n	8002574 <HAL_DMA_IRQHandler+0xb0>
 8002568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800256c:	e002      	b.n	8002574 <HAL_DMA_IRQHandler+0xb0>
 800256e:	2340      	movs	r3, #64	@ 0x40
 8002570:	e000      	b.n	8002574 <HAL_DMA_IRQHandler+0xb0>
 8002572:	2304      	movs	r3, #4
 8002574:	4a55      	ldr	r2, [pc, #340]	@ (80026cc <HAL_DMA_IRQHandler+0x208>)
 8002576:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 8094 	beq.w	80026aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800258a:	e08e      	b.n	80026aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	2202      	movs	r2, #2
 8002592:	409a      	lsls	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d056      	beq.n	800264a <HAL_DMA_IRQHandler+0x186>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d051      	beq.n	800264a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10b      	bne.n	80025cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 020a 	bic.w	r2, r2, #10
 80025c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a38      	ldr	r2, [pc, #224]	@ (80026b4 <HAL_DMA_IRQHandler+0x1f0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d029      	beq.n	800262a <HAL_DMA_IRQHandler+0x166>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a37      	ldr	r2, [pc, #220]	@ (80026b8 <HAL_DMA_IRQHandler+0x1f4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d022      	beq.n	8002626 <HAL_DMA_IRQHandler+0x162>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a35      	ldr	r2, [pc, #212]	@ (80026bc <HAL_DMA_IRQHandler+0x1f8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d01a      	beq.n	8002620 <HAL_DMA_IRQHandler+0x15c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a34      	ldr	r2, [pc, #208]	@ (80026c0 <HAL_DMA_IRQHandler+0x1fc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d012      	beq.n	800261a <HAL_DMA_IRQHandler+0x156>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a32      	ldr	r2, [pc, #200]	@ (80026c4 <HAL_DMA_IRQHandler+0x200>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00a      	beq.n	8002614 <HAL_DMA_IRQHandler+0x150>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a31      	ldr	r2, [pc, #196]	@ (80026c8 <HAL_DMA_IRQHandler+0x204>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d102      	bne.n	800260e <HAL_DMA_IRQHandler+0x14a>
 8002608:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800260c:	e00e      	b.n	800262c <HAL_DMA_IRQHandler+0x168>
 800260e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002612:	e00b      	b.n	800262c <HAL_DMA_IRQHandler+0x168>
 8002614:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002618:	e008      	b.n	800262c <HAL_DMA_IRQHandler+0x168>
 800261a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800261e:	e005      	b.n	800262c <HAL_DMA_IRQHandler+0x168>
 8002620:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002624:	e002      	b.n	800262c <HAL_DMA_IRQHandler+0x168>
 8002626:	2320      	movs	r3, #32
 8002628:	e000      	b.n	800262c <HAL_DMA_IRQHandler+0x168>
 800262a:	2302      	movs	r3, #2
 800262c:	4a27      	ldr	r2, [pc, #156]	@ (80026cc <HAL_DMA_IRQHandler+0x208>)
 800262e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d034      	beq.n	80026aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002648:	e02f      	b.n	80026aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	2208      	movs	r2, #8
 8002650:	409a      	lsls	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d028      	beq.n	80026ac <HAL_DMA_IRQHandler+0x1e8>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d023      	beq.n	80026ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 020e 	bic.w	r2, r2, #14
 8002672:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
    }
  }
  return;
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
}
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40020008 	.word	0x40020008
 80026b8:	4002001c 	.word	0x4002001c
 80026bc:	40020030 	.word	0x40020030
 80026c0:	40020044 	.word	0x40020044
 80026c4:	40020058 	.word	0x40020058
 80026c8:	4002006c 	.word	0x4002006c
 80026cc:	40020000 	.word	0x40020000

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b08b      	sub	sp, #44	@ 0x2c
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e2:	e169      	b.n	80029b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026e4:	2201      	movs	r2, #1
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	f040 8158 	bne.w	80029b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4a9a      	ldr	r2, [pc, #616]	@ (8002970 <HAL_GPIO_Init+0x2a0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d05e      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 800270c:	4a98      	ldr	r2, [pc, #608]	@ (8002970 <HAL_GPIO_Init+0x2a0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d875      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 8002712:	4a98      	ldr	r2, [pc, #608]	@ (8002974 <HAL_GPIO_Init+0x2a4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d058      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 8002718:	4a96      	ldr	r2, [pc, #600]	@ (8002974 <HAL_GPIO_Init+0x2a4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d86f      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 800271e:	4a96      	ldr	r2, [pc, #600]	@ (8002978 <HAL_GPIO_Init+0x2a8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d052      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 8002724:	4a94      	ldr	r2, [pc, #592]	@ (8002978 <HAL_GPIO_Init+0x2a8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d869      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 800272a:	4a94      	ldr	r2, [pc, #592]	@ (800297c <HAL_GPIO_Init+0x2ac>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d04c      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 8002730:	4a92      	ldr	r2, [pc, #584]	@ (800297c <HAL_GPIO_Init+0x2ac>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d863      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 8002736:	4a92      	ldr	r2, [pc, #584]	@ (8002980 <HAL_GPIO_Init+0x2b0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d046      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 800273c:	4a90      	ldr	r2, [pc, #576]	@ (8002980 <HAL_GPIO_Init+0x2b0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d85d      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 8002742:	2b12      	cmp	r3, #18
 8002744:	d82a      	bhi.n	800279c <HAL_GPIO_Init+0xcc>
 8002746:	2b12      	cmp	r3, #18
 8002748:	d859      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 800274a:	a201      	add	r2, pc, #4	@ (adr r2, 8002750 <HAL_GPIO_Init+0x80>)
 800274c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002750:	080027cb 	.word	0x080027cb
 8002754:	080027a5 	.word	0x080027a5
 8002758:	080027b7 	.word	0x080027b7
 800275c:	080027f9 	.word	0x080027f9
 8002760:	080027ff 	.word	0x080027ff
 8002764:	080027ff 	.word	0x080027ff
 8002768:	080027ff 	.word	0x080027ff
 800276c:	080027ff 	.word	0x080027ff
 8002770:	080027ff 	.word	0x080027ff
 8002774:	080027ff 	.word	0x080027ff
 8002778:	080027ff 	.word	0x080027ff
 800277c:	080027ff 	.word	0x080027ff
 8002780:	080027ff 	.word	0x080027ff
 8002784:	080027ff 	.word	0x080027ff
 8002788:	080027ff 	.word	0x080027ff
 800278c:	080027ff 	.word	0x080027ff
 8002790:	080027ff 	.word	0x080027ff
 8002794:	080027ad 	.word	0x080027ad
 8002798:	080027c1 	.word	0x080027c1
 800279c:	4a79      	ldr	r2, [pc, #484]	@ (8002984 <HAL_GPIO_Init+0x2b4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027a2:	e02c      	b.n	80027fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	623b      	str	r3, [r7, #32]
          break;
 80027aa:	e029      	b.n	8002800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	3304      	adds	r3, #4
 80027b2:	623b      	str	r3, [r7, #32]
          break;
 80027b4:	e024      	b.n	8002800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	3308      	adds	r3, #8
 80027bc:	623b      	str	r3, [r7, #32]
          break;
 80027be:	e01f      	b.n	8002800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	330c      	adds	r3, #12
 80027c6:	623b      	str	r3, [r7, #32]
          break;
 80027c8:	e01a      	b.n	8002800 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027d2:	2304      	movs	r3, #4
 80027d4:	623b      	str	r3, [r7, #32]
          break;
 80027d6:	e013      	b.n	8002800 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027e0:	2308      	movs	r3, #8
 80027e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	611a      	str	r2, [r3, #16]
          break;
 80027ea:	e009      	b.n	8002800 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ec:	2308      	movs	r3, #8
 80027ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	615a      	str	r2, [r3, #20]
          break;
 80027f6:	e003      	b.n	8002800 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027f8:	2300      	movs	r3, #0
 80027fa:	623b      	str	r3, [r7, #32]
          break;
 80027fc:	e000      	b.n	8002800 <HAL_GPIO_Init+0x130>
          break;
 80027fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2bff      	cmp	r3, #255	@ 0xff
 8002804:	d801      	bhi.n	800280a <HAL_GPIO_Init+0x13a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	e001      	b.n	800280e <HAL_GPIO_Init+0x13e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3304      	adds	r3, #4
 800280e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2bff      	cmp	r3, #255	@ 0xff
 8002814:	d802      	bhi.n	800281c <HAL_GPIO_Init+0x14c>
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	e002      	b.n	8002822 <HAL_GPIO_Init+0x152>
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	3b08      	subs	r3, #8
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	210f      	movs	r1, #15
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	401a      	ands	r2, r3
 8002834:	6a39      	ldr	r1, [r7, #32]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	431a      	orrs	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80b1 	beq.w	80029b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002850:	4b4d      	ldr	r3, [pc, #308]	@ (8002988 <HAL_GPIO_Init+0x2b8>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4a4c      	ldr	r2, [pc, #304]	@ (8002988 <HAL_GPIO_Init+0x2b8>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6193      	str	r3, [r2, #24]
 800285c:	4b4a      	ldr	r3, [pc, #296]	@ (8002988 <HAL_GPIO_Init+0x2b8>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002868:	4a48      	ldr	r2, [pc, #288]	@ (800298c <HAL_GPIO_Init+0x2bc>)
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	3302      	adds	r3, #2
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4013      	ands	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a40      	ldr	r2, [pc, #256]	@ (8002990 <HAL_GPIO_Init+0x2c0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d013      	beq.n	80028bc <HAL_GPIO_Init+0x1ec>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a3f      	ldr	r2, [pc, #252]	@ (8002994 <HAL_GPIO_Init+0x2c4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00d      	beq.n	80028b8 <HAL_GPIO_Init+0x1e8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a3e      	ldr	r2, [pc, #248]	@ (8002998 <HAL_GPIO_Init+0x2c8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d007      	beq.n	80028b4 <HAL_GPIO_Init+0x1e4>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a3d      	ldr	r2, [pc, #244]	@ (800299c <HAL_GPIO_Init+0x2cc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d101      	bne.n	80028b0 <HAL_GPIO_Init+0x1e0>
 80028ac:	2303      	movs	r3, #3
 80028ae:	e006      	b.n	80028be <HAL_GPIO_Init+0x1ee>
 80028b0:	2304      	movs	r3, #4
 80028b2:	e004      	b.n	80028be <HAL_GPIO_Init+0x1ee>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e002      	b.n	80028be <HAL_GPIO_Init+0x1ee>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_GPIO_Init+0x1ee>
 80028bc:	2300      	movs	r3, #0
 80028be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c0:	f002 0203 	and.w	r2, r2, #3
 80028c4:	0092      	lsls	r2, r2, #2
 80028c6:	4093      	lsls	r3, r2
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028ce:	492f      	ldr	r1, [pc, #188]	@ (800298c <HAL_GPIO_Init+0x2bc>)
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	3302      	adds	r3, #2
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028e8:	4b2d      	ldr	r3, [pc, #180]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	492c      	ldr	r1, [pc, #176]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	608b      	str	r3, [r1, #8]
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028f6:	4b2a      	ldr	r3, [pc, #168]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	4928      	ldr	r1, [pc, #160]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002900:	4013      	ands	r3, r2
 8002902:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002910:	4b23      	ldr	r3, [pc, #140]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	4922      	ldr	r1, [pc, #136]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	60cb      	str	r3, [r1, #12]
 800291c:	e006      	b.n	800292c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800291e:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	43db      	mvns	r3, r3
 8002926:	491e      	ldr	r1, [pc, #120]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002928:	4013      	ands	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d006      	beq.n	8002946 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002938:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4918      	ldr	r1, [pc, #96]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
 8002944:	e006      	b.n	8002954 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002946:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	43db      	mvns	r3, r3
 800294e:	4914      	ldr	r1, [pc, #80]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002950:	4013      	ands	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d021      	beq.n	80029a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002960:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	490e      	ldr	r1, [pc, #56]	@ (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	e021      	b.n	80029b2 <HAL_GPIO_Init+0x2e2>
 800296e:	bf00      	nop
 8002970:	10320000 	.word	0x10320000
 8002974:	10310000 	.word	0x10310000
 8002978:	10220000 	.word	0x10220000
 800297c:	10210000 	.word	0x10210000
 8002980:	10120000 	.word	0x10120000
 8002984:	10110000 	.word	0x10110000
 8002988:	40021000 	.word	0x40021000
 800298c:	40010000 	.word	0x40010000
 8002990:	40010800 	.word	0x40010800
 8002994:	40010c00 	.word	0x40010c00
 8002998:	40011000 	.word	0x40011000
 800299c:	40011400 	.word	0x40011400
 80029a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029a4:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	4909      	ldr	r1, [pc, #36]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	3301      	adds	r3, #1
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	fa22 f303 	lsr.w	r3, r2, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f47f ae8e 	bne.w	80026e4 <HAL_GPIO_Init+0x14>
  }
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	372c      	adds	r7, #44	@ 0x2c
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40010400 	.word	0x40010400

080029d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
 80029e4:	4613      	mov	r3, r2
 80029e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029e8:	787b      	ldrb	r3, [r7, #1]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ee:	887a      	ldrh	r2, [r7, #2]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029f4:	e003      	b.n	80029fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029f6:	887b      	ldrh	r3, [r7, #2]
 80029f8:	041a      	lsls	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	611a      	str	r2, [r3, #16]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a12:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a1e:	4a05      	ldr	r2, [pc, #20]	@ (8002a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f806 	bl	8002a38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40010400 	.word	0x40010400

08002a38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e12b      	b.n	8002cb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff f81c 	bl	8001ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	@ 0x24
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002aae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ab0:	f001 fbca 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8002ab4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4a81      	ldr	r2, [pc, #516]	@ (8002cc0 <HAL_I2C_Init+0x274>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d807      	bhi.n	8002ad0 <HAL_I2C_Init+0x84>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a80      	ldr	r2, [pc, #512]	@ (8002cc4 <HAL_I2C_Init+0x278>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	bf94      	ite	ls
 8002ac8:	2301      	movls	r3, #1
 8002aca:	2300      	movhi	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e006      	b.n	8002ade <HAL_I2C_Init+0x92>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a7d      	ldr	r2, [pc, #500]	@ (8002cc8 <HAL_I2C_Init+0x27c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	bf94      	ite	ls
 8002ad8:	2301      	movls	r3, #1
 8002ada:	2300      	movhi	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0e7      	b.n	8002cb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a78      	ldr	r2, [pc, #480]	@ (8002ccc <HAL_I2C_Init+0x280>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	0c9b      	lsrs	r3, r3, #18
 8002af0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a6a      	ldr	r2, [pc, #424]	@ (8002cc0 <HAL_I2C_Init+0x274>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d802      	bhi.n	8002b20 <HAL_I2C_Init+0xd4>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	e009      	b.n	8002b34 <HAL_I2C_Init+0xe8>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	4a69      	ldr	r2, [pc, #420]	@ (8002cd0 <HAL_I2C_Init+0x284>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	3301      	adds	r3, #1
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	495c      	ldr	r1, [pc, #368]	@ (8002cc0 <HAL_I2C_Init+0x274>)
 8002b50:	428b      	cmp	r3, r1
 8002b52:	d819      	bhi.n	8002b88 <HAL_I2C_Init+0x13c>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1e59      	subs	r1, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b62:	1c59      	adds	r1, r3, #1
 8002b64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b68:	400b      	ands	r3, r1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_I2C_Init+0x138>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1e59      	subs	r1, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b82:	e051      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002b84:	2304      	movs	r3, #4
 8002b86:	e04f      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d111      	bne.n	8002bb4 <HAL_I2C_Init+0x168>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1e58      	subs	r0, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	440b      	add	r3, r1
 8002b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e012      	b.n	8002bda <HAL_I2C_Init+0x18e>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1e58      	subs	r0, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	0099      	lsls	r1, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_I2C_Init+0x196>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e022      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10e      	bne.n	8002c08 <HAL_I2C_Init+0x1bc>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1e58      	subs	r0, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	440b      	add	r3, r1
 8002bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c06:	e00f      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1e58      	subs	r0, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	0099      	lsls	r1, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	6809      	ldr	r1, [r1, #0]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6911      	ldr	r1, [r2, #16]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68d2      	ldr	r2, [r2, #12]
 8002c62:	4311      	orrs	r1, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	000186a0 	.word	0x000186a0
 8002cc4:	001e847f 	.word	0x001e847f
 8002cc8:	003d08ff 	.word	0x003d08ff
 8002ccc:	431bde83 	.word	0x431bde83
 8002cd0:	10624dd3 	.word	0x10624dd3

08002cd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	817b      	strh	r3, [r7, #10]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff f812 	bl	8001d10 <HAL_GetTick>
 8002cec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	f040 80e0 	bne.w	8002ebc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2319      	movs	r3, #25
 8002d02:	2201      	movs	r2, #1
 8002d04:	4970      	ldr	r1, [pc, #448]	@ (8002ec8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fc9e 	bl	8003648 <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
 8002d14:	e0d3      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_I2C_Master_Transmit+0x50>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e0cc      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1ea>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d007      	beq.n	8002d4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2221      	movs	r2, #33	@ 0x21
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2210      	movs	r2, #16
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	893a      	ldrh	r2, [r7, #8]
 8002d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4a50      	ldr	r2, [pc, #320]	@ (8002ecc <HAL_I2C_Master_Transmit+0x1f8>)
 8002d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d8c:	8979      	ldrh	r1, [r7, #10]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	6a3a      	ldr	r2, [r7, #32]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fb08 	bl	80033a8 <I2C_MasterRequestWrite>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e08d      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002db8:	e066      	b.n	8002e88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fd5c 	bl	800387c <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00d      	beq.n	8002de6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d107      	bne.n	8002de2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e06b      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d11b      	bne.n	8002e5c <HAL_I2C_Master_Transmit+0x188>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d017      	beq.n	8002e5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	6a39      	ldr	r1, [r7, #32]
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fd53 	bl	800390c <I2C_WaitOnBTFFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00d      	beq.n	8002e88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d107      	bne.n	8002e84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e01a      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d194      	bne.n	8002dba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e000      	b.n	8002ebe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
  }
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	00100002 	.word	0x00100002
 8002ecc:	ffff0000 	.word	0xffff0000

08002ed0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	@ 0x30
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	461a      	mov	r2, r3
 8002edc:	460b      	mov	r3, r1
 8002ede:	817b      	strh	r3, [r7, #10]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7fe ff12 	bl	8001d10 <HAL_GetTick>
 8002eec:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	f040 824b 	bne.w	8003392 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2319      	movs	r3, #25
 8002f02:	2201      	movs	r2, #1
 8002f04:	497f      	ldr	r1, [pc, #508]	@ (8003104 <HAL_I2C_Master_Receive+0x234>)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fb9e 	bl	8003648 <I2C_WaitOnFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
 8002f14:	e23e      	b.n	8003394 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_I2C_Master_Receive+0x54>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e237      	b.n	8003394 <HAL_I2C_Master_Receive+0x4c4>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d007      	beq.n	8002f4a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2222      	movs	r2, #34	@ 0x22
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2210      	movs	r2, #16
 8002f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	893a      	ldrh	r2, [r7, #8]
 8002f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a5f      	ldr	r2, [pc, #380]	@ (8003108 <HAL_I2C_Master_Receive+0x238>)
 8002f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f8c:	8979      	ldrh	r1, [r7, #10]
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fa8a 	bl	80034ac <I2C_MasterRequestRead>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1f8      	b.n	8003394 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d113      	bne.n	8002fd2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e1cc      	b.n	800336c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d11e      	bne.n	8003018 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fea:	b672      	cpsid	i
}
 8002fec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003012:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003014:	b662      	cpsie	i
}
 8003016:	e035      	b.n	8003084 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301c:	2b02      	cmp	r3, #2
 800301e:	d11e      	bne.n	800305e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800302e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003030:	b672      	cpsid	i
}
 8003032:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003058:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800305a:	b662      	cpsie	i
}
 800305c:	e012      	b.n	8003084 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800306c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003084:	e172      	b.n	800336c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308a:	2b03      	cmp	r3, #3
 800308c:	f200 811f 	bhi.w	80032ce <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003094:	2b01      	cmp	r3, #1
 8003096:	d123      	bne.n	80030e0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800309a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fc7d 	bl	800399c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e173      	b.n	8003394 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030de:	e145      	b.n	800336c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d152      	bne.n	800318e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ee:	2200      	movs	r2, #0
 80030f0:	4906      	ldr	r1, [pc, #24]	@ (800310c <HAL_I2C_Master_Receive+0x23c>)
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 faa8 	bl	8003648 <I2C_WaitOnFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e148      	b.n	8003394 <HAL_I2C_Master_Receive+0x4c4>
 8003102:	bf00      	nop
 8003104:	00100002 	.word	0x00100002
 8003108:	ffff0000 	.word	0xffff0000
 800310c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003110:	b672      	cpsid	i
}
 8003112:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003156:	b662      	cpsie	i
}
 8003158:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800318c:	e0ee      	b.n	800336c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003194:	2200      	movs	r2, #0
 8003196:	4981      	ldr	r1, [pc, #516]	@ (800339c <HAL_I2C_Master_Receive+0x4cc>)
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fa55 	bl	8003648 <I2C_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0f5      	b.n	8003394 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031b8:	b672      	cpsid	i
}
 80031ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80031ee:	4b6c      	ldr	r3, [pc, #432]	@ (80033a0 <HAL_I2C_Master_Receive+0x4d0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	08db      	lsrs	r3, r3, #3
 80031f4:	4a6b      	ldr	r2, [pc, #428]	@ (80033a4 <HAL_I2C_Master_Receive+0x4d4>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	0a1a      	lsrs	r2, r3, #8
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00da      	lsls	r2, r3, #3
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	3b01      	subs	r3, #1
 800320c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d118      	bne.n	8003246 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	f043 0220 	orr.w	r2, r3, #32
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003236:	b662      	cpsie	i
}
 8003238:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e0a6      	b.n	8003394 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b04      	cmp	r3, #4
 8003252:	d1d9      	bne.n	8003208 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003296:	b662      	cpsie	i
}
 8003298:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032cc:	e04e      	b.n	800336c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fb62 	bl	800399c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e058      	b.n	8003394 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b04      	cmp	r3, #4
 8003320:	d124      	bne.n	800336c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003326:	2b03      	cmp	r3, #3
 8003328:	d107      	bne.n	800333a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003338:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	f47f ae88 	bne.w	8003086 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e000      	b.n	8003394 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
  }
}
 8003394:	4618      	mov	r0, r3
 8003396:	3728      	adds	r7, #40	@ 0x28
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	00010004 	.word	0x00010004
 80033a0:	20000000 	.word	0x20000000
 80033a4:	14f8b589 	.word	0x14f8b589

080033a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	460b      	mov	r3, r1
 80033b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d006      	beq.n	80033d2 <I2C_MasterRequestWrite+0x2a>
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d003      	beq.n	80033d2 <I2C_MasterRequestWrite+0x2a>
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033d0:	d108      	bne.n	80033e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	e00b      	b.n	80033fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e8:	2b12      	cmp	r3, #18
 80033ea:	d107      	bne.n	80033fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f91d 	bl	8003648 <I2C_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003422:	d103      	bne.n	800342c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e035      	b.n	800349c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003438:	d108      	bne.n	800344c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003448:	611a      	str	r2, [r3, #16]
 800344a:	e01b      	b.n	8003484 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800344c:	897b      	ldrh	r3, [r7, #10]
 800344e:	11db      	asrs	r3, r3, #7
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f003 0306 	and.w	r3, r3, #6
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f063 030f 	orn	r3, r3, #15
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	490e      	ldr	r1, [pc, #56]	@ (80034a4 <I2C_MasterRequestWrite+0xfc>)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f966 	bl	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e010      	b.n	800349c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800347a:	897b      	ldrh	r3, [r7, #10]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4907      	ldr	r1, [pc, #28]	@ (80034a8 <I2C_MasterRequestWrite+0x100>)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f956 	bl	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	00010008 	.word	0x00010008
 80034a8:	00010002 	.word	0x00010002

080034ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	460b      	mov	r3, r1
 80034ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d006      	beq.n	80034e6 <I2C_MasterRequestRead+0x3a>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d003      	beq.n	80034e6 <I2C_MasterRequestRead+0x3a>
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034e4:	d108      	bne.n	80034f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e00b      	b.n	8003510 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fc:	2b11      	cmp	r3, #17
 80034fe:	d107      	bne.n	8003510 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800350e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f893 	bl	8003648 <I2C_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00d      	beq.n	8003544 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003536:	d103      	bne.n	8003540 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800353e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e079      	b.n	8003638 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800354c:	d108      	bne.n	8003560 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800354e:	897b      	ldrh	r3, [r7, #10]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	611a      	str	r2, [r3, #16]
 800355e:	e05f      	b.n	8003620 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003560:	897b      	ldrh	r3, [r7, #10]
 8003562:	11db      	asrs	r3, r3, #7
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 0306 	and.w	r3, r3, #6
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f063 030f 	orn	r3, r3, #15
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	4930      	ldr	r1, [pc, #192]	@ (8003640 <I2C_MasterRequestRead+0x194>)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f8dc 	bl	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e054      	b.n	8003638 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800358e:	897b      	ldrh	r3, [r7, #10]
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4929      	ldr	r1, [pc, #164]	@ (8003644 <I2C_MasterRequestRead+0x198>)
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f8cc 	bl	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e044      	b.n	8003638 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f831 	bl	8003648 <I2C_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00d      	beq.n	8003608 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035fa:	d103      	bne.n	8003604 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e017      	b.n	8003638 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003608:	897b      	ldrh	r3, [r7, #10]
 800360a:	11db      	asrs	r3, r3, #7
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f003 0306 	and.w	r3, r3, #6
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f063 030e 	orn	r3, r3, #14
 8003618:	b2da      	uxtb	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4907      	ldr	r1, [pc, #28]	@ (8003644 <I2C_MasterRequestRead+0x198>)
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f888 	bl	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	00010008 	.word	0x00010008
 8003644:	00010002 	.word	0x00010002

08003648 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003658:	e048      	b.n	80036ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d044      	beq.n	80036ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7fe fb55 	bl	8001d10 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d139      	bne.n	80036ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d10d      	bne.n	800369e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	43da      	mvns	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4013      	ands	r3, r2
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	e00c      	b.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	43da      	mvns	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	4013      	ands	r3, r2
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d116      	bne.n	80036ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	f043 0220 	orr.w	r2, r3, #32
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e023      	b.n	8003734 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	0c1b      	lsrs	r3, r3, #16
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d10d      	bne.n	8003712 <I2C_WaitOnFlagUntilTimeout+0xca>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	43da      	mvns	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4013      	ands	r3, r2
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	e00c      	b.n	800372c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	43da      	mvns	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	429a      	cmp	r2, r3
 8003730:	d093      	beq.n	800365a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800374a:	e071      	b.n	8003830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375a:	d123      	bne.n	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003774:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003790:	f043 0204 	orr.w	r2, r3, #4
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e067      	b.n	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d041      	beq.n	8003830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ac:	f7fe fab0 	bl	8001d10 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d302      	bcc.n	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d136      	bne.n	8003830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d10c      	bne.n	80037e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	43da      	mvns	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4013      	ands	r3, r2
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf14      	ite	ne
 80037de:	2301      	movne	r3, #1
 80037e0:	2300      	moveq	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	e00b      	b.n	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	43da      	mvns	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4013      	ands	r3, r2
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e021      	b.n	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	0c1b      	lsrs	r3, r3, #16
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b01      	cmp	r3, #1
 8003838:	d10c      	bne.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	43da      	mvns	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	4013      	ands	r3, r2
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e00b      	b.n	800386c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	43da      	mvns	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4013      	ands	r3, r2
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	bf14      	ite	ne
 8003866:	2301      	movne	r3, #1
 8003868:	2300      	moveq	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	f47f af6d 	bne.w	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003888:	e034      	b.n	80038f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f8e3 	bl	8003a56 <I2C_IsAcknowledgeFailed>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e034      	b.n	8003904 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d028      	beq.n	80038f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7fe fa35 	bl	8001d10 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11d      	bne.n	80038f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c2:	2b80      	cmp	r3, #128	@ 0x80
 80038c4:	d016      	beq.n	80038f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e007      	b.n	8003904 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038fe:	2b80      	cmp	r3, #128	@ 0x80
 8003900:	d1c3      	bne.n	800388a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003918:	e034      	b.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f89b 	bl	8003a56 <I2C_IsAcknowledgeFailed>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e034      	b.n	8003994 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d028      	beq.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003932:	f7fe f9ed 	bl	8001d10 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d11d      	bne.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b04      	cmp	r3, #4
 8003954:	d016      	beq.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e007      	b.n	8003994 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b04      	cmp	r3, #4
 8003990:	d1c3      	bne.n	800391a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a8:	e049      	b.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d119      	bne.n	80039ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0210 	mvn.w	r2, #16
 80039c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e030      	b.n	8003a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ec:	f7fe f990 	bl	8001d10 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d302      	bcc.n	8003a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d11d      	bne.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0c:	2b40      	cmp	r3, #64	@ 0x40
 8003a0e:	d016      	beq.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	f043 0220 	orr.w	r2, r3, #32
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e007      	b.n	8003a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a48:	2b40      	cmp	r3, #64	@ 0x40
 8003a4a:	d1ae      	bne.n	80039aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a6c:	d11b      	bne.n	8003aa6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	f043 0204 	orr.w	r2, r3, #4
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e272      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 8087 	beq.w	8003be2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ad4:	4b92      	ldr	r3, [pc, #584]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d00c      	beq.n	8003afa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ae0:	4b8f      	ldr	r3, [pc, #572]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d112      	bne.n	8003b12 <HAL_RCC_OscConfig+0x5e>
 8003aec:	4b8c      	ldr	r3, [pc, #560]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af8:	d10b      	bne.n	8003b12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afa:	4b89      	ldr	r3, [pc, #548]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d06c      	beq.n	8003be0 <HAL_RCC_OscConfig+0x12c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d168      	bne.n	8003be0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e24c      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x76>
 8003b1c:	4b80      	ldr	r3, [pc, #512]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a7f      	ldr	r2, [pc, #508]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	e02e      	b.n	8003b88 <HAL_RCC_OscConfig+0xd4>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x98>
 8003b32:	4b7b      	ldr	r3, [pc, #492]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7a      	ldr	r2, [pc, #488]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b78      	ldr	r3, [pc, #480]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a77      	ldr	r2, [pc, #476]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e01d      	b.n	8003b88 <HAL_RCC_OscConfig+0xd4>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0xbc>
 8003b56:	4b72      	ldr	r3, [pc, #456]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a71      	ldr	r2, [pc, #452]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b6f      	ldr	r3, [pc, #444]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6e      	ldr	r2, [pc, #440]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e00b      	b.n	8003b88 <HAL_RCC_OscConfig+0xd4>
 8003b70:	4b6b      	ldr	r3, [pc, #428]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a6a      	ldr	r2, [pc, #424]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b68      	ldr	r3, [pc, #416]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a67      	ldr	r2, [pc, #412]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d013      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe f8be 	bl	8001d10 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fe f8ba 	bl	8001d10 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	@ 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e200      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b5d      	ldr	r3, [pc, #372]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0xe4>
 8003bb6:	e014      	b.n	8003be2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7fe f8aa 	bl	8001d10 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7fe f8a6 	bl	8001d10 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	@ 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e1ec      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd2:	4b53      	ldr	r3, [pc, #332]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x10c>
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d063      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bee:	4b4c      	ldr	r3, [pc, #304]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bfa:	4b49      	ldr	r3, [pc, #292]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d11c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x18c>
 8003c06:	4b46      	ldr	r3, [pc, #280]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d116      	bne.n	8003c40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c12:	4b43      	ldr	r3, [pc, #268]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <HAL_RCC_OscConfig+0x176>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d001      	beq.n	8003c2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e1c0      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4939      	ldr	r1, [pc, #228]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3e:	e03a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d020      	beq.n	8003c8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c48:	4b36      	ldr	r3, [pc, #216]	@ (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4e:	f7fe f85f 	bl	8001d10 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c56:	f7fe f85b 	bl	8001d10 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e1a1      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c68:	4b2d      	ldr	r3, [pc, #180]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c74:	4b2a      	ldr	r3, [pc, #168]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4927      	ldr	r1, [pc, #156]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	600b      	str	r3, [r1, #0]
 8003c88:	e015      	b.n	8003cb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8a:	4b26      	ldr	r3, [pc, #152]	@ (8003d24 <HAL_RCC_OscConfig+0x270>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fe f83e 	bl	8001d10 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c98:	f7fe f83a 	bl	8001d10 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e180      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003caa:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d03a      	beq.n	8003d38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d019      	beq.n	8003cfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cca:	4b17      	ldr	r3, [pc, #92]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd0:	f7fe f81e 	bl	8001d10 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd8:	f7fe f81a 	bl	8001d10 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e160      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cea:	4b0d      	ldr	r3, [pc, #52]	@ (8003d20 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f000 faba 	bl	8004270 <RCC_Delay>
 8003cfc:	e01c      	b.n	8003d38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003d28 <HAL_RCC_OscConfig+0x274>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d04:	f7fe f804 	bl	8001d10 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0a:	e00f      	b.n	8003d2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0c:	f7fe f800 	bl	8001d10 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d908      	bls.n	8003d2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e146      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
 8003d24:	42420000 	.word	0x42420000
 8003d28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2c:	4b92      	ldr	r3, [pc, #584]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e9      	bne.n	8003d0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80a6 	beq.w	8003e92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4a:	4b8b      	ldr	r3, [pc, #556]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10d      	bne.n	8003d72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	4b88      	ldr	r3, [pc, #544]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	4a87      	ldr	r2, [pc, #540]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d60:	61d3      	str	r3, [r2, #28]
 8003d62:	4b85      	ldr	r3, [pc, #532]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d72:	4b82      	ldr	r3, [pc, #520]	@ (8003f7c <HAL_RCC_OscConfig+0x4c8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d118      	bne.n	8003db0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f7c <HAL_RCC_OscConfig+0x4c8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a7e      	ldr	r2, [pc, #504]	@ (8003f7c <HAL_RCC_OscConfig+0x4c8>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8a:	f7fd ffc1 	bl	8001d10 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d92:	f7fd ffbd 	bl	8001d10 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b64      	cmp	r3, #100	@ 0x64
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e103      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da4:	4b75      	ldr	r3, [pc, #468]	@ (8003f7c <HAL_RCC_OscConfig+0x4c8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x312>
 8003db8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	4a6e      	ldr	r2, [pc, #440]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6213      	str	r3, [r2, #32]
 8003dc4:	e02d      	b.n	8003e22 <HAL_RCC_OscConfig+0x36e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x334>
 8003dce:	4b6a      	ldr	r3, [pc, #424]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	4a69      	ldr	r2, [pc, #420]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	6213      	str	r3, [r2, #32]
 8003dda:	4b67      	ldr	r3, [pc, #412]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	4a66      	ldr	r2, [pc, #408]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003de0:	f023 0304 	bic.w	r3, r3, #4
 8003de4:	6213      	str	r3, [r2, #32]
 8003de6:	e01c      	b.n	8003e22 <HAL_RCC_OscConfig+0x36e>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	d10c      	bne.n	8003e0a <HAL_RCC_OscConfig+0x356>
 8003df0:	4b61      	ldr	r3, [pc, #388]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	4a60      	ldr	r2, [pc, #384]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003df6:	f043 0304 	orr.w	r3, r3, #4
 8003dfa:	6213      	str	r3, [r2, #32]
 8003dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	4a5d      	ldr	r2, [pc, #372]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6213      	str	r3, [r2, #32]
 8003e08:	e00b      	b.n	8003e22 <HAL_RCC_OscConfig+0x36e>
 8003e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	4a5a      	ldr	r2, [pc, #360]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	6213      	str	r3, [r2, #32]
 8003e16:	4b58      	ldr	r3, [pc, #352]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	4a57      	ldr	r2, [pc, #348]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e1c:	f023 0304 	bic.w	r3, r3, #4
 8003e20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d015      	beq.n	8003e56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2a:	f7fd ff71 	bl	8001d10 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fd ff6d 	bl	8001d10 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e0b1      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e48:	4b4b      	ldr	r3, [pc, #300]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ee      	beq.n	8003e32 <HAL_RCC_OscConfig+0x37e>
 8003e54:	e014      	b.n	8003e80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e56:	f7fd ff5b 	bl	8001d10 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5c:	e00a      	b.n	8003e74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5e:	f7fd ff57 	bl	8001d10 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e09b      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e74:	4b40      	ldr	r3, [pc, #256]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1ee      	bne.n	8003e5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d105      	bne.n	8003e92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e86:	4b3c      	ldr	r3, [pc, #240]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 8087 	beq.w	8003faa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e9c:	4b36      	ldr	r3, [pc, #216]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d061      	beq.n	8003f6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d146      	bne.n	8003f3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb0:	4b33      	ldr	r3, [pc, #204]	@ (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb6:	f7fd ff2b 	bl	8001d10 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebe:	f7fd ff27 	bl	8001d10 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e06d      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed0:	4b29      	ldr	r3, [pc, #164]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee4:	d108      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ee6:	4b24      	ldr	r3, [pc, #144]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	4921      	ldr	r1, [pc, #132]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a19      	ldr	r1, [r3, #32]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	491b      	ldr	r1, [pc, #108]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f10:	4b1b      	ldr	r3, [pc, #108]	@ (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f16:	f7fd fefb 	bl	8001d10 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fd fef7 	bl	8001d10 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e03d      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f30:	4b11      	ldr	r3, [pc, #68]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x46a>
 8003f3c:	e035      	b.n	8003faa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b10      	ldr	r3, [pc, #64]	@ (8003f80 <HAL_RCC_OscConfig+0x4cc>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fd fee4 	bl	8001d10 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fd fee0 	bl	8001d10 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e026      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f5e:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <HAL_RCC_OscConfig+0x4c4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x498>
 8003f6a:	e01e      	b.n	8003faa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d107      	bne.n	8003f84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e019      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f84:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb4 <HAL_RCC_OscConfig+0x500>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d106      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d001      	beq.n	8003faa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40021000 	.word	0x40021000

08003fb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0d0      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d910      	bls.n	8003ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b67      	ldr	r3, [pc, #412]	@ (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 0207 	bic.w	r2, r3, #7
 8003fe2:	4965      	ldr	r1, [pc, #404]	@ (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b63      	ldr	r3, [pc, #396]	@ (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0b8      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d020      	beq.n	800404a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004014:	4b59      	ldr	r3, [pc, #356]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4a58      	ldr	r2, [pc, #352]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800401e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800402c:	4b53      	ldr	r3, [pc, #332]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4a52      	ldr	r2, [pc, #328]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004036:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004038:	4b50      	ldr	r3, [pc, #320]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	494d      	ldr	r1, [pc, #308]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d040      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	4b47      	ldr	r3, [pc, #284]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d115      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e07f      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004076:	4b41      	ldr	r3, [pc, #260]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e073      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004086:	4b3d      	ldr	r3, [pc, #244]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e06b      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004096:	4b39      	ldr	r3, [pc, #228]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f023 0203 	bic.w	r2, r3, #3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4936      	ldr	r1, [pc, #216]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a8:	f7fd fe32 	bl	8001d10 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b0:	f7fd fe2e 	bl	8001d10 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e053      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	4b2d      	ldr	r3, [pc, #180]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f003 020c 	and.w	r2, r3, #12
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d1eb      	bne.n	80040b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d8:	4b27      	ldr	r3, [pc, #156]	@ (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d210      	bcs.n	8004108 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b24      	ldr	r3, [pc, #144]	@ (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 0207 	bic.w	r2, r3, #7
 80040ee:	4922      	ldr	r1, [pc, #136]	@ (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b20      	ldr	r3, [pc, #128]	@ (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e032      	b.n	800416e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004114:	4b19      	ldr	r3, [pc, #100]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4916      	ldr	r1, [pc, #88]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004132:	4b12      	ldr	r3, [pc, #72]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	490e      	ldr	r1, [pc, #56]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	4313      	orrs	r3, r2
 8004144:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004146:	f000 f821 	bl	800418c <HAL_RCC_GetSysClockFreq>
 800414a:	4602      	mov	r2, r0
 800414c:	4b0b      	ldr	r3, [pc, #44]	@ (800417c <HAL_RCC_ClockConfig+0x1c4>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	490a      	ldr	r1, [pc, #40]	@ (8004180 <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	5ccb      	ldrb	r3, [r1, r3]
 800415a:	fa22 f303 	lsr.w	r3, r2, r3
 800415e:	4a09      	ldr	r2, [pc, #36]	@ (8004184 <HAL_RCC_ClockConfig+0x1cc>)
 8004160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004162:	4b09      	ldr	r3, [pc, #36]	@ (8004188 <HAL_RCC_ClockConfig+0x1d0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f7fd fd90 	bl	8001c8c <HAL_InitTick>

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40022000 	.word	0x40022000
 800417c:	40021000 	.word	0x40021000
 8004180:	08004bd8 	.word	0x08004bd8
 8004184:	20000000 	.word	0x20000000
 8004188:	20000004 	.word	0x20000004

0800418c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	2300      	movs	r3, #0
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	2300      	movs	r3, #0
 80041a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004220 <HAL_RCC_GetSysClockFreq+0x94>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d002      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x30>
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d003      	beq.n	80041c2 <HAL_RCC_GetSysClockFreq+0x36>
 80041ba:	e027      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041bc:	4b19      	ldr	r3, [pc, #100]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x98>)
 80041be:	613b      	str	r3, [r7, #16]
      break;
 80041c0:	e027      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	0c9b      	lsrs	r3, r3, #18
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	4a17      	ldr	r2, [pc, #92]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041cc:	5cd3      	ldrb	r3, [r2, r3]
 80041ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d010      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041da:	4b11      	ldr	r3, [pc, #68]	@ (8004220 <HAL_RCC_GetSysClockFreq+0x94>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	0c5b      	lsrs	r3, r3, #17
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	4a11      	ldr	r2, [pc, #68]	@ (800422c <HAL_RCC_GetSysClockFreq+0xa0>)
 80041e6:	5cd3      	ldrb	r3, [r2, r3]
 80041e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ee:	fb03 f202 	mul.w	r2, r3, r2
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	e004      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004230 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004200:	fb02 f303 	mul.w	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	613b      	str	r3, [r7, #16]
      break;
 800420a:	e002      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800420c:	4b05      	ldr	r3, [pc, #20]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x98>)
 800420e:	613b      	str	r3, [r7, #16]
      break;
 8004210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004212:	693b      	ldr	r3, [r7, #16]
}
 8004214:	4618      	mov	r0, r3
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000
 8004224:	007a1200 	.word	0x007a1200
 8004228:	08004bf0 	.word	0x08004bf0
 800422c:	08004c00 	.word	0x08004c00
 8004230:	003d0900 	.word	0x003d0900

08004234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004238:	4b02      	ldr	r3, [pc, #8]	@ (8004244 <HAL_RCC_GetHCLKFreq+0x10>)
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr
 8004244:	20000000 	.word	0x20000000

08004248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800424c:	f7ff fff2 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4903      	ldr	r1, [pc, #12]	@ (800426c <HAL_RCC_GetPCLK1Freq+0x24>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004264:	4618      	mov	r0, r3
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40021000 	.word	0x40021000
 800426c:	08004be8 	.word	0x08004be8

08004270 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004278:	4b0a      	ldr	r3, [pc, #40]	@ (80042a4 <RCC_Delay+0x34>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a0a      	ldr	r2, [pc, #40]	@ (80042a8 <RCC_Delay+0x38>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0a5b      	lsrs	r3, r3, #9
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800428c:	bf00      	nop
  }
  while (Delay --);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	60fa      	str	r2, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f9      	bne.n	800428c <RCC_Delay+0x1c>
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	20000000 	.word	0x20000000
 80042a8:	10624dd3 	.word	0x10624dd3

080042ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d07d      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042c8:	2300      	movs	r3, #0
 80042ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042cc:	4b4f      	ldr	r3, [pc, #316]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10d      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d8:	4b4c      	ldr	r3, [pc, #304]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	4a4b      	ldr	r2, [pc, #300]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	61d3      	str	r3, [r2, #28]
 80042e4:	4b49      	ldr	r3, [pc, #292]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f4:	4b46      	ldr	r3, [pc, #280]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d118      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004300:	4b43      	ldr	r3, [pc, #268]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a42      	ldr	r2, [pc, #264]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800430a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430c:	f7fd fd00 	bl	8001d10 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004312:	e008      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004314:	f7fd fcfc 	bl	8001d10 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	@ 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e06d      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004326:	4b3a      	ldr	r3, [pc, #232]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004332:	4b36      	ldr	r3, [pc, #216]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800433a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02e      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	429a      	cmp	r2, r3
 800434e:	d027      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004350:	4b2e      	ldr	r3, [pc, #184]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004358:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800435a:	4b2e      	ldr	r3, [pc, #184]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004360:	4b2c      	ldr	r3, [pc, #176]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004366:	4a29      	ldr	r2, [pc, #164]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d014      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004376:	f7fd fccb 	bl	8001d10 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437c:	e00a      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437e:	f7fd fcc7 	bl	8001d10 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e036      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004394:	4b1d      	ldr	r3, [pc, #116]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ee      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043a0:	4b1a      	ldr	r3, [pc, #104]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4917      	ldr	r1, [pc, #92]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b8:	4b14      	ldr	r3, [pc, #80]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4a13      	ldr	r2, [pc, #76]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d0:	4b0e      	ldr	r3, [pc, #56]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	490b      	ldr	r1, [pc, #44]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d008      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ee:	4b07      	ldr	r3, [pc, #28]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	4904      	ldr	r1, [pc, #16]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	40007000 	.word	0x40007000
 8004414:	42420440 	.word	0x42420440

08004418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e041      	b.n	80044ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fd fb74 	bl	8001b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3304      	adds	r3, #4
 8004454:	4619      	mov	r1, r3
 8004456:	4610      	mov	r0, r2
 8004458:	f000 fa12 	bl	8004880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d020      	beq.n	800451a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d01b      	beq.n	800451a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f06f 0202 	mvn.w	r2, #2
 80044ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f9a1 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 8004506:	e005      	b.n	8004514 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f994 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9a3 	bl	800485a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01b      	beq.n	8004566 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f06f 0204 	mvn.w	r2, #4
 8004536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f97b 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 8004552:	e005      	b.n	8004560 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f96e 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f97d 	bl	800485a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d020      	beq.n	80045b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01b      	beq.n	80045b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f06f 0208 	mvn.w	r2, #8
 8004582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2204      	movs	r2, #4
 8004588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f955 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 800459e:	e005      	b.n	80045ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f948 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f957 	bl	800485a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d020      	beq.n	80045fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01b      	beq.n	80045fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f06f 0210 	mvn.w	r2, #16
 80045ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2208      	movs	r2, #8
 80045d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f92f 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 80045ea:	e005      	b.n	80045f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f922 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f931 	bl	800485a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00c      	beq.n	8004622 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d007      	beq.n	8004622 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f06f 0201 	mvn.w	r2, #1
 800461a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f901 	bl	8004824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00c      	beq.n	8004646 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800463e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fa88 	bl	8004b56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00c      	beq.n	800466a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f901 	bl	800486c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00c      	beq.n	800468e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f06f 0220 	mvn.w	r2, #32
 8004686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 fa5b 	bl	8004b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_TIM_ConfigClockSource+0x1c>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e0b4      	b.n	800481c <HAL_TIM_ConfigClockSource+0x186>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ea:	d03e      	beq.n	800476a <HAL_TIM_ConfigClockSource+0xd4>
 80046ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046f0:	f200 8087 	bhi.w	8004802 <HAL_TIM_ConfigClockSource+0x16c>
 80046f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f8:	f000 8086 	beq.w	8004808 <HAL_TIM_ConfigClockSource+0x172>
 80046fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004700:	d87f      	bhi.n	8004802 <HAL_TIM_ConfigClockSource+0x16c>
 8004702:	2b70      	cmp	r3, #112	@ 0x70
 8004704:	d01a      	beq.n	800473c <HAL_TIM_ConfigClockSource+0xa6>
 8004706:	2b70      	cmp	r3, #112	@ 0x70
 8004708:	d87b      	bhi.n	8004802 <HAL_TIM_ConfigClockSource+0x16c>
 800470a:	2b60      	cmp	r3, #96	@ 0x60
 800470c:	d050      	beq.n	80047b0 <HAL_TIM_ConfigClockSource+0x11a>
 800470e:	2b60      	cmp	r3, #96	@ 0x60
 8004710:	d877      	bhi.n	8004802 <HAL_TIM_ConfigClockSource+0x16c>
 8004712:	2b50      	cmp	r3, #80	@ 0x50
 8004714:	d03c      	beq.n	8004790 <HAL_TIM_ConfigClockSource+0xfa>
 8004716:	2b50      	cmp	r3, #80	@ 0x50
 8004718:	d873      	bhi.n	8004802 <HAL_TIM_ConfigClockSource+0x16c>
 800471a:	2b40      	cmp	r3, #64	@ 0x40
 800471c:	d058      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0x13a>
 800471e:	2b40      	cmp	r3, #64	@ 0x40
 8004720:	d86f      	bhi.n	8004802 <HAL_TIM_ConfigClockSource+0x16c>
 8004722:	2b30      	cmp	r3, #48	@ 0x30
 8004724:	d064      	beq.n	80047f0 <HAL_TIM_ConfigClockSource+0x15a>
 8004726:	2b30      	cmp	r3, #48	@ 0x30
 8004728:	d86b      	bhi.n	8004802 <HAL_TIM_ConfigClockSource+0x16c>
 800472a:	2b20      	cmp	r3, #32
 800472c:	d060      	beq.n	80047f0 <HAL_TIM_ConfigClockSource+0x15a>
 800472e:	2b20      	cmp	r3, #32
 8004730:	d867      	bhi.n	8004802 <HAL_TIM_ConfigClockSource+0x16c>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d05c      	beq.n	80047f0 <HAL_TIM_ConfigClockSource+0x15a>
 8004736:	2b10      	cmp	r3, #16
 8004738:	d05a      	beq.n	80047f0 <HAL_TIM_ConfigClockSource+0x15a>
 800473a:	e062      	b.n	8004802 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800474c:	f000 f97d 	bl	8004a4a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800475e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	609a      	str	r2, [r3, #8]
      break;
 8004768:	e04f      	b.n	800480a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800477a:	f000 f966 	bl	8004a4a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800478c:	609a      	str	r2, [r3, #8]
      break;
 800478e:	e03c      	b.n	800480a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800479c:	461a      	mov	r2, r3
 800479e:	f000 f8dd 	bl	800495c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2150      	movs	r1, #80	@ 0x50
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 f934 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 80047ae:	e02c      	b.n	800480a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047bc:	461a      	mov	r2, r3
 80047be:	f000 f8fb 	bl	80049b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2160      	movs	r1, #96	@ 0x60
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f924 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 80047ce:	e01c      	b.n	800480a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047dc:	461a      	mov	r2, r3
 80047de:	f000 f8bd 	bl	800495c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2140      	movs	r1, #64	@ 0x40
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 f914 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 80047ee:	e00c      	b.n	800480a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f000 f90b 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 8004800:	e003      	b.n	800480a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
      break;
 8004806:	e000      	b.n	800480a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004808:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800481a:	7bfb      	ldrb	r3, [r7, #15]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr

0800485a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr
	...

08004880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a2f      	ldr	r2, [pc, #188]	@ (8004950 <TIM_Base_SetConfig+0xd0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00b      	beq.n	80048b0 <TIM_Base_SetConfig+0x30>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800489e:	d007      	beq.n	80048b0 <TIM_Base_SetConfig+0x30>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004954 <TIM_Base_SetConfig+0xd4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d003      	beq.n	80048b0 <TIM_Base_SetConfig+0x30>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004958 <TIM_Base_SetConfig+0xd8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d108      	bne.n	80048c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a22      	ldr	r2, [pc, #136]	@ (8004950 <TIM_Base_SetConfig+0xd0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00b      	beq.n	80048e2 <TIM_Base_SetConfig+0x62>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d0:	d007      	beq.n	80048e2 <TIM_Base_SetConfig+0x62>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004954 <TIM_Base_SetConfig+0xd4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d003      	beq.n	80048e2 <TIM_Base_SetConfig+0x62>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004958 <TIM_Base_SetConfig+0xd8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d108      	bne.n	80048f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a0d      	ldr	r2, [pc, #52]	@ (8004950 <TIM_Base_SetConfig+0xd0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d103      	bne.n	8004928 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f023 0201 	bic.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	611a      	str	r2, [r3, #16]
  }
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr
 8004950:	40012c00 	.word	0x40012c00
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800

0800495c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0201 	bic.w	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f023 030a 	bic.w	r3, r3, #10
 8004998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f023 0210 	bic.w	r2, r3, #16
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	031b      	lsls	r3, r3, #12
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	621a      	str	r2, [r3, #32]
}
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f043 0307 	orr.w	r3, r3, #7
 8004a38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	609a      	str	r2, [r3, #8]
}
 8004a40:	bf00      	nop
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr

08004a4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b087      	sub	sp, #28
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	607a      	str	r2, [r7, #4]
 8004a56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	021a      	lsls	r2, r3, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	609a      	str	r2, [r3, #8]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e046      	b.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a16      	ldr	r2, [pc, #88]	@ (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aec:	d009      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a12      	ldr	r2, [pc, #72]	@ (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a10      	ldr	r2, [pc, #64]	@ (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d10c      	bne.n	8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800

08004b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr

08004b56 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <memset>:
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4402      	add	r2, r0
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d100      	bne.n	8004b72 <memset+0xa>
 8004b70:	4770      	bx	lr
 8004b72:	f803 1b01 	strb.w	r1, [r3], #1
 8004b76:	e7f9      	b.n	8004b6c <memset+0x4>

08004b78 <__libc_init_array>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	2600      	movs	r6, #0
 8004b7c:	4d0c      	ldr	r5, [pc, #48]	@ (8004bb0 <__libc_init_array+0x38>)
 8004b7e:	4c0d      	ldr	r4, [pc, #52]	@ (8004bb4 <__libc_init_array+0x3c>)
 8004b80:	1b64      	subs	r4, r4, r5
 8004b82:	10a4      	asrs	r4, r4, #2
 8004b84:	42a6      	cmp	r6, r4
 8004b86:	d109      	bne.n	8004b9c <__libc_init_array+0x24>
 8004b88:	f000 f81a 	bl	8004bc0 <_init>
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	4d0a      	ldr	r5, [pc, #40]	@ (8004bb8 <__libc_init_array+0x40>)
 8004b90:	4c0a      	ldr	r4, [pc, #40]	@ (8004bbc <__libc_init_array+0x44>)
 8004b92:	1b64      	subs	r4, r4, r5
 8004b94:	10a4      	asrs	r4, r4, #2
 8004b96:	42a6      	cmp	r6, r4
 8004b98:	d105      	bne.n	8004ba6 <__libc_init_array+0x2e>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba0:	4798      	blx	r3
 8004ba2:	3601      	adds	r6, #1
 8004ba4:	e7ee      	b.n	8004b84 <__libc_init_array+0xc>
 8004ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004baa:	4798      	blx	r3
 8004bac:	3601      	adds	r6, #1
 8004bae:	e7f2      	b.n	8004b96 <__libc_init_array+0x1e>
 8004bb0:	08004c04 	.word	0x08004c04
 8004bb4:	08004c04 	.word	0x08004c04
 8004bb8:	08004c04 	.word	0x08004c04
 8004bbc:	08004c08 	.word	0x08004c08

08004bc0 <_init>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	bf00      	nop
 8004bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc6:	bc08      	pop	{r3}
 8004bc8:	469e      	mov	lr, r3
 8004bca:	4770      	bx	lr

08004bcc <_fini>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	bf00      	nop
 8004bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd2:	bc08      	pop	{r3}
 8004bd4:	469e      	mov	lr, r3
 8004bd6:	4770      	bx	lr
