
PCDU_GLV_AMP225.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000561c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800572c  0800572c  0000672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005758  08005758  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005758  08005758  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005758  08005758  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005758  08005758  00006758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800575c  0800575c  0000675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005760  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000000c  0800576c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  0800576c  00007204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118dd  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026de  00000000  00000000  00018912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0001aff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de3  00000000  00000000  0001c180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f35  00000000  00000000  0001cf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014709  00000000  00000000  00035e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009425b  00000000  00000000  0004a5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de7fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de4  00000000  00000000  000de840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e3624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005714 	.word	0x08005714

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08005714 	.word	0x08005714

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	@ 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c3a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	@ 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	@ 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_f2uiz>:
 8000f74:	0042      	lsls	r2, r0, #1
 8000f76:	d20e      	bcs.n	8000f96 <__aeabi_f2uiz+0x22>
 8000f78:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f7c:	d30b      	bcc.n	8000f96 <__aeabi_f2uiz+0x22>
 8000f7e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f86:	d409      	bmi.n	8000f9c <__aeabi_f2uiz+0x28>
 8000f88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f90:	fa23 f002 	lsr.w	r0, r3, r2
 8000f94:	4770      	bx	lr
 8000f96:	f04f 0000 	mov.w	r0, #0
 8000f9a:	4770      	bx	lr
 8000f9c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fa0:	d101      	bne.n	8000fa6 <__aeabi_f2uiz+0x32>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	d102      	bne.n	8000fac <__aeabi_f2uiz+0x38>
 8000fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8000faa:	4770      	bx	lr
 8000fac:	f04f 0000 	mov.w	r0, #0
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	0000      	movs	r0, r0
	...

08000fb8 <INA226_Init>:
/* Private macros ------------------------------------------------------------*/
/* Variables -----------------------------------------------------------------*/
Anglas_IN226 ina;
/* Private functions ---------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
void INA226_Init(const double Maximum_Expected_Current, const uint16_t resMiliohmios, uint16_t AVG, uint16_t Time_Vbus, uint16_t Time_Vshunt, uint16_t ModeOperation){
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	80fb      	strh	r3, [r7, #6]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	80bb      	strh	r3, [r7, #4]
	uint8_t datos[3];
	uint8_t MSB,LSB;
	uint16_t REGISTER;

	ina.Rshunt = resMiliohmios; //esto lo hago porq necesito Rshunt para la funcion "INA226_Alert_Limit_Write"
 8000fce:	4a50      	ldr	r2, [pc, #320]	@ (8001110 <INA226_Init+0x158>)
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	81d3      	strh	r3, [r2, #14]
	 * bit 11-9 : 100 (AVG=128, promedio de numero de muestras)
	 * bit  8-6 : 100 (T=1.1ms, tiempo de conversion de Vbus)
	 * bit  5-3 : 111 (T=8.24ms, tiempo de conversion de Vshunt)
	 * bit  2-0 : 111 (Shunt & Bus continuo, modo de operacion)
	*/
	REGISTER = NO_RESET_INA226|(AVG << 9)|(Time_Vbus << 6)|(Time_Vshunt << 3)|ModeOperation;
 8000fd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fd8:	025b      	lsls	r3, r3, #9
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000fe6:	019b      	lsls	r3, r3, #6
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21b      	sxth	r3, r3
 8001002:	82fb      	strh	r3, [r7, #22]

	MSB = (uint8_t)(REGISTER >> 8);
 8001004:	8afb      	ldrh	r3, [r7, #22]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	b29b      	uxth	r3, r3
 800100a:	757b      	strb	r3, [r7, #21]
	LSB = (uint8_t)(REGISTER & 0xFF);
 800100c:	8afb      	ldrh	r3, [r7, #22]
 800100e:	753b      	strb	r3, [r7, #20]

	datos[0] = INA_CONFIGURATION_REGISTER;
 8001010:	2300      	movs	r3, #0
 8001012:	743b      	strb	r3, [r7, #16]
	datos[1] = MSB;
 8001014:	7d7b      	ldrb	r3, [r7, #21]
 8001016:	747b      	strb	r3, [r7, #17]
	datos[2] = LSB;
 8001018:	7d3b      	ldrb	r3, [r7, #20]
 800101a:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 800101c:	f107 0210 	add.w	r2, r7, #16
 8001020:	2364      	movs	r3, #100	@ 0x64
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2303      	movs	r3, #3
 8001026:	2180      	movs	r1, #128	@ 0x80
 8001028:	483a      	ldr	r0, [pc, #232]	@ (8001114 <INA226_Init+0x15c>)
 800102a:	f002 fbf5 	bl	8003818 <HAL_I2C_Master_Transmit>

	ina.current_LSB = (Maximum_Expected_Current*1000000000/32768); // Conseguir el mejor LSB posible en nA
 800102e:	a336      	add	r3, pc, #216	@ (adr r3, 8001108 <INA226_Init+0x150>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001038:	f7ff fa46 	bl	80004c8 <__aeabi_dmul>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b33      	ldr	r3, [pc, #204]	@ (8001118 <INA226_Init+0x160>)
 800104a:	f7ff fb67 	bl	800071c <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fc49 	bl	80008ec <__aeabi_d2uiz>
 800105a:	4603      	mov	r3, r0
 800105c:	4a2c      	ldr	r2, [pc, #176]	@ (8001110 <INA226_Init+0x158>)
 800105e:	6053      	str	r3, [r2, #4]
	ina.calibration = (float)5120000 / ((float)ina.current_LSB * ina.Rshunt/1000);  // Compute calibration register(CAL)
 8001060:	4b2b      	ldr	r3, [pc, #172]	@ (8001110 <INA226_Init+0x158>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fd67 	bl	8000b38 <__aeabi_ui2f>
 800106a:	4604      	mov	r4, r0
 800106c:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <INA226_Init+0x158>)
 800106e:	89db      	ldrh	r3, [r3, #14]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fd65 	bl	8000b40 <__aeabi_i2f>
 8001076:	4603      	mov	r3, r0
 8001078:	4619      	mov	r1, r3
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff fdb4 	bl	8000be8 <__aeabi_fmul>
 8001080:	4603      	mov	r3, r0
 8001082:	4926      	ldr	r1, [pc, #152]	@ (800111c <INA226_Init+0x164>)
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fe63 	bl	8000d50 <__aeabi_fdiv>
 800108a:	4603      	mov	r3, r0
 800108c:	4619      	mov	r1, r3
 800108e:	4824      	ldr	r0, [pc, #144]	@ (8001120 <INA226_Init+0x168>)
 8001090:	f7ff fe5e 	bl	8000d50 <__aeabi_fdiv>
 8001094:	4603      	mov	r3, r0
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff6c 	bl	8000f74 <__aeabi_f2uiz>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <INA226_Init+0x158>)
 80010a2:	805a      	strh	r2, [r3, #2]

	//La formula para "power_LSB" es solo multiplicar "current_LSB" por 25 (pag.16 datasheet)
	//Lo resto 900 para calibrar(probar desde 600 - 1500 )
	//Lo divido entre 1000 porq el numero es muy grande y para la operacion de "INA226_Power()" el numero excede de uint32_t
	ina.power_LSB   = (float)25 * ina.current_LSB/1000;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <INA226_Init+0x158>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fd45 	bl	8000b38 <__aeabi_ui2f>
 80010ae:	4603      	mov	r3, r0
 80010b0:	491c      	ldr	r1, [pc, #112]	@ (8001124 <INA226_Init+0x16c>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fd98 	bl	8000be8 <__aeabi_fmul>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4918      	ldr	r1, [pc, #96]	@ (800111c <INA226_Init+0x164>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fe47 	bl	8000d50 <__aeabi_fdiv>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff55 	bl	8000f74 <__aeabi_f2uiz>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a10      	ldr	r2, [pc, #64]	@ (8001110 <INA226_Init+0x158>)
 80010ce:	6093      	str	r3, [r2, #8]

	MSB = (uint8_t)(ina.calibration >> 8);
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <INA226_Init+0x158>)
 80010d2:	885b      	ldrh	r3, [r3, #2]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	757b      	strb	r3, [r7, #21]
	LSB = (uint8_t)(ina.calibration & 0xFF);
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <INA226_Init+0x158>)
 80010dc:	885b      	ldrh	r3, [r3, #2]
 80010de:	753b      	strb	r3, [r7, #20]

	datos[0] = INA_CALIBRATION_REGISTER;
 80010e0:	2305      	movs	r3, #5
 80010e2:	743b      	strb	r3, [r7, #16]
	datos[1] = MSB;
 80010e4:	7d7b      	ldrb	r3, [r7, #21]
 80010e6:	747b      	strb	r3, [r7, #17]
	datos[2] = LSB;
 80010e8:	7d3b      	ldrb	r3, [r7, #20]
 80010ea:	74bb      	strb	r3, [r7, #18]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 80010ec:	f107 0210 	add.w	r2, r7, #16
 80010f0:	2364      	movs	r3, #100	@ 0x64
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2303      	movs	r3, #3
 80010f6:	2180      	movs	r1, #128	@ 0x80
 80010f8:	4806      	ldr	r0, [pc, #24]	@ (8001114 <INA226_Init+0x15c>)
 80010fa:	f002 fb8d 	bl	8003818 <HAL_I2C_Master_Transmit>
}
 80010fe:	bf00      	nop
 8001100:	371c      	adds	r7, #28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd90      	pop	{r4, r7, pc}
 8001106:	bf00      	nop
 8001108:	00000000 	.word	0x00000000
 800110c:	41cdcd65 	.word	0x41cdcd65
 8001110:	20000028 	.word	0x20000028
 8001114:	200000d8 	.word	0x200000d8
 8001118:	40e00000 	.word	0x40e00000
 800111c:	447a0000 	.word	0x447a0000
 8001120:	4a9c4000 	.word	0x4a9c4000
 8001124:	41c80000 	.word	0x41c80000

08001128 <INA226_Vbus>:
		Vshunt = (uint32_t)dato * INA_SHUNT_VOLTAGE_LSB;
		return Vshunt/10000.0;
	}
}

float INA226_Vbus(void){
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af02      	add	r7, sp, #8
	uint16_t dato;
	uint32_t Vbus;
	uint8_t datos[3];

	datos[0] = INA_BUS_VOLTAGE_REGISTER;
 800112e:	2302      	movs	r3, #2
 8001130:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 8001132:	1d3a      	adds	r2, r7, #4
 8001134:	2364      	movs	r3, #100	@ 0x64
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	2180      	movs	r1, #128	@ 0x80
 800113c:	4818      	ldr	r0, [pc, #96]	@ (80011a0 <INA226_Vbus+0x78>)
 800113e:	f002 fb6b 	bl	8003818 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 8001142:	1d3a      	adds	r2, r7, #4
 8001144:	2364      	movs	r3, #100	@ 0x64
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2302      	movs	r3, #2
 800114a:	2181      	movs	r1, #129	@ 0x81
 800114c:	4814      	ldr	r0, [pc, #80]	@ (80011a0 <INA226_Vbus+0x78>)
 800114e:	f002 fc61 	bl	8003a14 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 8001152:	793b      	ldrb	r3, [r7, #4]
 8001154:	b21b      	sxth	r3, r3
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	797b      	ldrb	r3, [r7, #5]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21b      	sxth	r3, r3
 8001162:	81fb      	strh	r3, [r7, #14]
	Vbus = (uint32_t)dato * INA_BUS_VOLTAGE_LSB;
 8001164:	89fa      	ldrh	r2, [r7, #14]
 8001166:	4613      	mov	r3, r2
 8001168:	015b      	lsls	r3, r3, #5
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	60bb      	str	r3, [r7, #8]

	return Vbus/100000.0;//Voltios;
 8001172:	68b8      	ldr	r0, [r7, #8]
 8001174:	f7ff f92e 	bl	80003d4 <__aeabi_ui2d>
 8001178:	a307      	add	r3, pc, #28	@ (adr r3, 8001198 <INA226_Vbus+0x70>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff facd 	bl	800071c <__aeabi_ddiv>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fbcf 	bl	800092c <__aeabi_d2f>
 800118e:	4603      	mov	r3, r0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	00000000 	.word	0x00000000
 800119c:	40f86a00 	.word	0x40f86a00
 80011a0:	200000d8 	.word	0x200000d8

080011a4 <INA226_Current>:

float INA226_Current(void){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af02      	add	r7, sp, #8
	uint16_t dato;
	uint32_t current;
	uint8_t datos[3];

	//todo esto es lo mismo que float INA226_Vshunt(void) ya que si ingreso esta funcion dentro de esta funcion, no me deja hacer debug
	datos[0] = INA_SHUNT_VOLTAGE_REGISTER;
 80011aa:	2301      	movs	r3, #1
 80011ac:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80011ae:	1d3a      	adds	r2, r7, #4
 80011b0:	2364      	movs	r3, #100	@ 0x64
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	2180      	movs	r1, #128	@ 0x80
 80011b8:	4824      	ldr	r0, [pc, #144]	@ (800124c <INA226_Current+0xa8>)
 80011ba:	f002 fb2d 	bl	8003818 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 80011be:	1d3a      	adds	r2, r7, #4
 80011c0:	2364      	movs	r3, #100	@ 0x64
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2302      	movs	r3, #2
 80011c6:	2181      	movs	r1, #129	@ 0x81
 80011c8:	4820      	ldr	r0, [pc, #128]	@ (800124c <INA226_Current+0xa8>)
 80011ca:	f002 fc23 	bl	8003a14 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 80011ce:	793b      	ldrb	r3, [r7, #4]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	797b      	ldrb	r3, [r7, #5]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b21b      	sxth	r3, r3
 80011de:	81fb      	strh	r3, [r7, #14]

	if(dato >= 65534){//si no hay carga conectada, devuelve el dato 65535(puede oscilar entre 65534 y 65535)
 80011e0:	89fb      	ldrh	r3, [r7, #14]
 80011e2:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d902      	bls.n	80011f0 <INA226_Current+0x4c>
		return 0;
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	e029      	b.n	8001244 <INA226_Current+0xa0>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	}else{
		datos[0] = INA_CURRENT_REGISTER;
 80011f0:	2304      	movs	r3, #4
 80011f2:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80011f4:	1d3a      	adds	r2, r7, #4
 80011f6:	2364      	movs	r3, #100	@ 0x64
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	2180      	movs	r1, #128	@ 0x80
 80011fe:	4813      	ldr	r0, [pc, #76]	@ (800124c <INA226_Current+0xa8>)
 8001200:	f002 fb0a 	bl	8003818 <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 8001204:	1d3a      	adds	r2, r7, #4
 8001206:	2364      	movs	r3, #100	@ 0x64
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2302      	movs	r3, #2
 800120c:	2181      	movs	r1, #129	@ 0x81
 800120e:	480f      	ldr	r0, [pc, #60]	@ (800124c <INA226_Current+0xa8>)
 8001210:	f002 fc00 	bl	8003a14 <HAL_I2C_Master_Receive>
		dato = ((datos[0]<<8)|datos[1]);
 8001214:	793b      	ldrb	r3, [r7, #4]
 8001216:	b21b      	sxth	r3, r3
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	797b      	ldrb	r3, [r7, #5]
 800121e:	b21b      	sxth	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b21b      	sxth	r3, r3
 8001224:	81fb      	strh	r3, [r7, #14]
		current = (uint32_t)dato * ina.current_LSB;
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <INA226_Current+0xac>)
 800122a:	6852      	ldr	r2, [r2, #4]
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	60bb      	str	r3, [r7, #8]
		return current/1000000;//mA;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	4a07      	ldr	r2, [pc, #28]	@ (8001254 <INA226_Current+0xb0>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9b      	lsrs	r3, r3, #18
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fc7b 	bl	8000b38 <__aeabi_ui2f>
 8001242:	4603      	mov	r3, r0
		HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
		dato = ((datos[0]<<8)|datos[1]);
		current = (uint32_t)dato * (ina.current_LSB-900);
		return current/1000000.0;//mA;
	}*/
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200000d8 	.word	0x200000d8
 8001250:	20000028 	.word	0x20000028
 8001254:	431bde83 	.word	0x431bde83

08001258 <INA226_Mode_pinAlert>:
	dato = ((datos[0]<<8)|datos[1]);
	power = (uint32_t)dato * ina.power_LSB;
	return power/1000000.0;//Watts;
}

uint16_t INA226_Mode_pinAlert(uint16_t umbral){// 1000 0xxx xxx0 0010 = 0x2002
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af02      	add	r7, sp, #8
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
	uint16_t dato;
	uint8_t datos[3];
	uint8_t MSB,LSB;

	ina.mask_Enable = umbral;
 8001262:	4a1d      	ldr	r2, [pc, #116]	@ (80012d8 <INA226_Mode_pinAlert+0x80>)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	8213      	strh	r3, [r2, #16]
	 * bit  2: 0 (Indicador de desbordamiento matematico)
	 * bit  1: 1 (Polaridad de alerta 1:Invertido 0:Normal)
	 * bit  0: 0 (Alert Latch Enable)
	*/

	MSB = (uint8_t)(umbral >> 8);
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	b29b      	uxth	r3, r3
 800126e:	73fb      	strb	r3, [r7, #15]
	LSB = (uint8_t)(umbral & 0xFF);
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	73bb      	strb	r3, [r7, #14]

	//Envio el "umbral" al registro mask/enable
	datos[0] = INA_MASK_ENABLE_REGISTER;
 8001274:	2306      	movs	r3, #6
 8001276:	723b      	strb	r3, [r7, #8]
	datos[1] = MSB;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	727b      	strb	r3, [r7, #9]
	datos[2] = LSB;
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 8001280:	f107 0208 	add.w	r2, r7, #8
 8001284:	2364      	movs	r3, #100	@ 0x64
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2303      	movs	r3, #3
 800128a:	2180      	movs	r1, #128	@ 0x80
 800128c:	4813      	ldr	r0, [pc, #76]	@ (80012dc <INA226_Mode_pinAlert+0x84>)
 800128e:	f002 fac3 	bl	8003818 <HAL_I2C_Master_Transmit>

	//Leo el dato "umbral" que envie, para verificar que llego correctamente
	datos[0] = INA_MASK_ENABLE_REGISTER;
 8001292:	2306      	movs	r3, #6
 8001294:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 8001296:	f107 0208 	add.w	r2, r7, #8
 800129a:	2364      	movs	r3, #100	@ 0x64
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2301      	movs	r3, #1
 80012a0:	2180      	movs	r1, #128	@ 0x80
 80012a2:	480e      	ldr	r0, [pc, #56]	@ (80012dc <INA226_Mode_pinAlert+0x84>)
 80012a4:	f002 fab8 	bl	8003818 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 80012a8:	f107 0208 	add.w	r2, r7, #8
 80012ac:	2364      	movs	r3, #100	@ 0x64
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2302      	movs	r3, #2
 80012b2:	2181      	movs	r1, #129	@ 0x81
 80012b4:	4809      	ldr	r0, [pc, #36]	@ (80012dc <INA226_Mode_pinAlert+0x84>)
 80012b6:	f002 fbad 	bl	8003a14 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 80012ba:	7a3b      	ldrb	r3, [r7, #8]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	7a7b      	ldrb	r3, [r7, #9]
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	81bb      	strh	r3, [r7, #12]
	return dato;
 80012cc:	89bb      	ldrh	r3, [r7, #12]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000028 	.word	0x20000028
 80012dc:	200000d8 	.word	0x200000d8

080012e0 <INA226_Alert_Limit>:

uint16_t INA226_Alert_Limit(uint16_t limite){//presicion ±2mA, el mV y mW falta probar, pero es muy preciso
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
	uint16_t dato;
	uint8_t datos[3];
	uint8_t MSB,LSB;
	float calibrar=1.0099;////lo multiplico por 1.0099 para calibrarlo, esto lo hice con varias pruebas fisicas y probando con varios Rload
 80012ea:	4b93      	ldr	r3, [pc, #588]	@ (8001538 <INA226_Alert_Limit+0x258>)
 80012ec:	617b      	str	r3, [r7, #20]
	 * dato = power/ina.power_LSB;
	 * dato = (power*1000)/ina.power_LSB;      se multiplica por 1000 para tener el "dato" en 16bits
	 * 										   dato: es el valor(0-32767) que nos devuelve el IN226 en "INA226_Vbus()"
	 * 										   limite = power (Ingresar "uint16_t limite" en miliwatts)
	*/
	switch(ina.mask_Enable){
 80012ee:	4b93      	ldr	r3, [pc, #588]	@ (800153c <INA226_Alert_Limit+0x25c>)
 80012f0:	8a1b      	ldrh	r3, [r3, #16]
 80012f2:	f248 0202 	movw	r2, #32770	@ 0x8002
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d021      	beq.n	800133e <INA226_Alert_Limit+0x5e>
 80012fa:	f248 0202 	movw	r2, #32770	@ 0x8002
 80012fe:	4293      	cmp	r3, r2
 8001300:	f300 80dc 	bgt.w	80014bc <INA226_Alert_Limit+0x1dc>
 8001304:	f244 0202 	movw	r2, #16386	@ 0x4002
 8001308:	4293      	cmp	r3, r2
 800130a:	d04f      	beq.n	80013ac <INA226_Alert_Limit+0xcc>
 800130c:	f244 0202 	movw	r2, #16386	@ 0x4002
 8001310:	4293      	cmp	r3, r2
 8001312:	f300 80d3 	bgt.w	80014bc <INA226_Alert_Limit+0x1dc>
 8001316:	f242 0202 	movw	r2, #8194	@ 0x2002
 800131a:	4293      	cmp	r3, r2
 800131c:	d07d      	beq.n	800141a <INA226_Alert_Limit+0x13a>
 800131e:	f242 0202 	movw	r2, #8194	@ 0x2002
 8001322:	4293      	cmp	r3, r2
 8001324:	f300 80ca 	bgt.w	80014bc <INA226_Alert_Limit+0x1dc>
 8001328:	f640 0202 	movw	r2, #2050	@ 0x802
 800132c:	4293      	cmp	r3, r2
 800132e:	f000 80a0 	beq.w	8001472 <INA226_Alert_Limit+0x192>
 8001332:	f241 0202 	movw	r2, #4098	@ 0x1002
 8001336:	4293      	cmp	r3, r2
 8001338:	f000 8085 	beq.w	8001446 <INA226_Alert_Limit+0x166>
 800133c:	e0be      	b.n	80014bc <INA226_Alert_Limit+0x1dc>
		case SHUNT_VOLTAGE_OVER : limite = ((float)limite*ina.Rshunt*10.0*calibrar)/INA_SHUNT_VOLTAGE_LSB;break;
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fbf9 	bl	8000b38 <__aeabi_ui2f>
 8001346:	4604      	mov	r4, r0
 8001348:	4b7c      	ldr	r3, [pc, #496]	@ (800153c <INA226_Alert_Limit+0x25c>)
 800134a:	89db      	ldrh	r3, [r3, #14]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fbf7 	bl	8000b40 <__aeabi_i2f>
 8001352:	4603      	mov	r3, r0
 8001354:	4619      	mov	r1, r3
 8001356:	4620      	mov	r0, r4
 8001358:	f7ff fc46 	bl	8000be8 <__aeabi_fmul>
 800135c:	4603      	mov	r3, r0
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f85a 	bl	8000418 <__aeabi_f2d>
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b75      	ldr	r3, [pc, #468]	@ (8001540 <INA226_Alert_Limit+0x260>)
 800136a:	f7ff f8ad 	bl	80004c8 <__aeabi_dmul>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4614      	mov	r4, r2
 8001374:	461d      	mov	r5, r3
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff f84e 	bl	8000418 <__aeabi_f2d>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4620      	mov	r0, r4
 8001382:	4629      	mov	r1, r5
 8001384:	f7ff f8a0 	bl	80004c8 <__aeabi_dmul>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b6b      	ldr	r3, [pc, #428]	@ (8001544 <INA226_Alert_Limit+0x264>)
 8001396:	f7ff f9c1 	bl	800071c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff faa3 	bl	80008ec <__aeabi_d2uiz>
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
 80013aa:	e087      	b.n	80014bc <INA226_Alert_Limit+0x1dc>
		case SHUNT_VOLTAGE_UNDER: limite = ((float)limite*ina.Rshunt*10.0*calibrar)/INA_SHUNT_VOLTAGE_LSB;break;
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fbc2 	bl	8000b38 <__aeabi_ui2f>
 80013b4:	4604      	mov	r4, r0
 80013b6:	4b61      	ldr	r3, [pc, #388]	@ (800153c <INA226_Alert_Limit+0x25c>)
 80013b8:	89db      	ldrh	r3, [r3, #14]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fbc0 	bl	8000b40 <__aeabi_i2f>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4619      	mov	r1, r3
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7ff fc0f 	bl	8000be8 <__aeabi_fmul>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f823 	bl	8000418 <__aeabi_f2d>
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001540 <INA226_Alert_Limit+0x260>)
 80013d8:	f7ff f876 	bl	80004c8 <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4614      	mov	r4, r2
 80013e2:	461d      	mov	r5, r3
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	f7ff f817 	bl	8000418 <__aeabi_f2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4620      	mov	r0, r4
 80013f0:	4629      	mov	r1, r5
 80013f2:	f7ff f869 	bl	80004c8 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b50      	ldr	r3, [pc, #320]	@ (8001544 <INA226_Alert_Limit+0x264>)
 8001404:	f7ff f98a 	bl	800071c <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fa6c 	bl	80008ec <__aeabi_d2uiz>
 8001414:	4603      	mov	r3, r0
 8001416:	80fb      	strh	r3, [r7, #6]
 8001418:	e050      	b.n	80014bc <INA226_Alert_Limit+0x1dc>
		case BUS_VOLTAGE_OVER   : limite = ((float)limite*0.8);break;
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fb8b 	bl	8000b38 <__aeabi_ui2f>
 8001422:	4603      	mov	r3, r0
 8001424:	4618      	mov	r0, r3
 8001426:	f7fe fff7 	bl	8000418 <__aeabi_f2d>
 800142a:	a341      	add	r3, pc, #260	@ (adr r3, 8001530 <INA226_Alert_Limit+0x250>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff f84a 	bl	80004c8 <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff fa56 	bl	80008ec <__aeabi_d2uiz>
 8001440:	4603      	mov	r3, r0
 8001442:	80fb      	strh	r3, [r7, #6]
 8001444:	e03a      	b.n	80014bc <INA226_Alert_Limit+0x1dc>
		case BUS_VOLTAGE_UNDER  : limite = ((float)limite*0.8);break;
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fb75 	bl	8000b38 <__aeabi_ui2f>
 800144e:	4603      	mov	r3, r0
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe ffe1 	bl	8000418 <__aeabi_f2d>
 8001456:	a336      	add	r3, pc, #216	@ (adr r3, 8001530 <INA226_Alert_Limit+0x250>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f834 	bl	80004c8 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fa40 	bl	80008ec <__aeabi_d2uiz>
 800146c:	4603      	mov	r3, r0
 800146e:	80fb      	strh	r3, [r7, #6]
 8001470:	e024      	b.n	80014bc <INA226_Alert_Limit+0x1dc>
		case OVER_LIMIT_POWER   : limite = ((float)limite*1000.0)/ina.power_LSB;break;
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fb5f 	bl	8000b38 <__aeabi_ui2f>
 800147a:	4603      	mov	r3, r0
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe ffcb 	bl	8000418 <__aeabi_f2d>
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	4b30      	ldr	r3, [pc, #192]	@ (8001548 <INA226_Alert_Limit+0x268>)
 8001488:	f7ff f81e 	bl	80004c8 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4614      	mov	r4, r2
 8001492:	461d      	mov	r5, r3
 8001494:	4b29      	ldr	r3, [pc, #164]	@ (800153c <INA226_Alert_Limit+0x25c>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe ff9b 	bl	80003d4 <__aeabi_ui2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4620      	mov	r0, r4
 80014a4:	4629      	mov	r1, r5
 80014a6:	f7ff f939 	bl	800071c <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fa1b 	bl	80008ec <__aeabi_d2uiz>
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
 80014ba:	bf00      	nop
	}

	MSB = (uint8_t)(limite >> 8);
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	0a1b      	lsrs	r3, r3, #8
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	74fb      	strb	r3, [r7, #19]
	LSB = (uint8_t)(limite & 0xFF);
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	74bb      	strb	r3, [r7, #18]

	//Envio el "limite" al registro mask/enable
	datos[0] = INA_ALERT_LIMIT_REGISTER;
 80014c8:	2307      	movs	r3, #7
 80014ca:	733b      	strb	r3, [r7, #12]
	datos[1] = MSB;
 80014cc:	7cfb      	ldrb	r3, [r7, #19]
 80014ce:	737b      	strb	r3, [r7, #13]
	datos[2] = LSB;
 80014d0:	7cbb      	ldrb	r3, [r7, #18]
 80014d2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 3, 100);
 80014d4:	f107 020c 	add.w	r2, r7, #12
 80014d8:	2364      	movs	r3, #100	@ 0x64
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2303      	movs	r3, #3
 80014de:	2180      	movs	r1, #128	@ 0x80
 80014e0:	481a      	ldr	r0, [pc, #104]	@ (800154c <INA226_Alert_Limit+0x26c>)
 80014e2:	f002 f999 	bl	8003818 <HAL_I2C_Master_Transmit>

	//Leo el dato "limite" que envie, para verificar que llego correctamente
	datos[0] = INA_ALERT_LIMIT_REGISTER;
 80014e6:	2307      	movs	r3, #7
 80014e8:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit (&hi2c1, INA226_I2C_ADDRESS_WRITE, (uint8_t*)datos, 1, 100);
 80014ea:	f107 020c 	add.w	r2, r7, #12
 80014ee:	2364      	movs	r3, #100	@ 0x64
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2301      	movs	r3, #1
 80014f4:	2180      	movs	r1, #128	@ 0x80
 80014f6:	4815      	ldr	r0, [pc, #84]	@ (800154c <INA226_Alert_Limit+0x26c>)
 80014f8:	f002 f98e 	bl	8003818 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, INA226_I2C_ADDRESS_READ, (uint8_t*)datos, 2, 100);
 80014fc:	f107 020c 	add.w	r2, r7, #12
 8001500:	2364      	movs	r3, #100	@ 0x64
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2302      	movs	r3, #2
 8001506:	2181      	movs	r1, #129	@ 0x81
 8001508:	4810      	ldr	r0, [pc, #64]	@ (800154c <INA226_Alert_Limit+0x26c>)
 800150a:	f002 fa83 	bl	8003a14 <HAL_I2C_Master_Receive>
	dato = ((datos[0]<<8)|datos[1]);
 800150e:	7b3b      	ldrb	r3, [r7, #12]
 8001510:	b21b      	sxth	r3, r3
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	b21a      	sxth	r2, r3
 8001516:	7b7b      	ldrb	r3, [r7, #13]
 8001518:	b21b      	sxth	r3, r3
 800151a:	4313      	orrs	r3, r2
 800151c:	b21b      	sxth	r3, r3
 800151e:	823b      	strh	r3, [r7, #16]
	return dato;
 8001520:	8a3b      	ldrh	r3, [r7, #16]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bdb0      	pop	{r4, r5, r7, pc}
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	9999999a 	.word	0x9999999a
 8001534:	3fe99999 	.word	0x3fe99999
 8001538:	3f814467 	.word	0x3f814467
 800153c:	20000028 	.word	0x20000028
 8001540:	40240000 	.word	0x40240000
 8001544:	40390000 	.word	0x40390000
 8001548:	408f4000 	.word	0x408f4000
 800154c:	200000d8 	.word	0x200000d8

08001550 <readVoltage>:
static void MX_TIM3_Init(void);
static void MX_CAN_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

float readVoltage(uint16_t adcVal){
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
	float adcVoltage = (3.3*adcVal)/(4095);
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ff49 	bl	80003f4 <__aeabi_i2d>
 8001562:	a313      	add	r3, pc, #76	@ (adr r3, 80015b0 <readVoltage+0x60>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7fe ffae 	bl	80004c8 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	a310      	add	r3, pc, #64	@ (adr r3, 80015b8 <readVoltage+0x68>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7ff f8cf 	bl	800071c <__aeabi_ddiv>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff f9d1 	bl	800092c <__aeabi_d2f>
 800158a:	4603      	mov	r3, r0
 800158c:	60fb      	str	r3, [r7, #12]
	float voltage = (adcVoltage*15)/3;
 800158e:	490c      	ldr	r1, [pc, #48]	@ (80015c0 <readVoltage+0x70>)
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7ff fb29 	bl	8000be8 <__aeabi_fmul>
 8001596:	4603      	mov	r3, r0
 8001598:	490a      	ldr	r1, [pc, #40]	@ (80015c4 <readVoltage+0x74>)
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fbd8 	bl	8000d50 <__aeabi_fdiv>
 80015a0:	4603      	mov	r3, r0
 80015a2:	60bb      	str	r3, [r7, #8]
	return voltage;
 80015a4:	68bb      	ldr	r3, [r7, #8]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	66666666 	.word	0x66666666
 80015b4:	400a6666 	.word	0x400a6666
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40affe00 	.word	0x40affe00
 80015c0:	41700000 	.word	0x41700000
 80015c4:	40400000 	.word	0x40400000

080015c8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	adcFlag = 1;
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <HAL_ADC_ConvCpltCallback+0x18>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	200001cc 	.word	0x200001cc
 80015e4:	00000000 	.word	0x00000000

080015e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ee:	f000 fce3 	bl	8001fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f2:	f000 f8b3 	bl	800175c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f6:	f000 fa43 	bl	8001a80 <MX_GPIO_Init>
  MX_DMA_Init();
 80015fa:	f000 fa23 	bl	8001a44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015fe:	f000 f9f7 	bl	80019f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001602:	f000 f907 	bl	8001814 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001606:	f000 f9a7 	bl	8001958 <MX_TIM3_Init>
  MX_CAN_Init();
 800160a:	f000 f941 	bl	8001890 <MX_CAN_Init>
  MX_I2C1_Init();
 800160e:	f000 f975 	bl	80018fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	4940      	ldr	r1, [pc, #256]	@ (8001718 <main+0x130>)
 8001616:	4841      	ldr	r0, [pc, #260]	@ (800171c <main+0x134>)
 8001618:	f000 fe08 	bl	800222c <HAL_ADC_Start_DMA>
   HAL_TIM_Base_Start_IT(&htim3);
 800161c:	4840      	ldr	r0, [pc, #256]	@ (8001720 <main+0x138>)
 800161e:	f003 fd01 	bl	8005024 <HAL_TIM_Base_Start_IT>
   HAL_CAN_Start(&hcan);
 8001622:	4840      	ldr	r0, [pc, #256]	@ (8001724 <main+0x13c>)
 8001624:	f001 f9e6 	bl	80029f4 <HAL_CAN_Start>
   /* CAN CONFIGURATION */
  INA226_Init(32.768,2,AVG_4,T_Vbus_1_1ms,T_Vshunt_1_1ms,MODE_SHUNT_BUS_CONTINUOUS);
 8001628:	2307      	movs	r3, #7
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	2304      	movs	r3, #4
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	2304      	movs	r3, #4
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2301      	movs	r3, #1
 8001636:	2202      	movs	r2, #2
 8001638:	a135      	add	r1, pc, #212	@ (adr r1, 8001710 <main+0x128>)
 800163a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800163e:	f7ff fcbb 	bl	8000fb8 <INA226_Init>

  alert = INA226_Mode_pinAlert(SHUNT_VOLTAGE_OVER);
 8001642:	f248 0002 	movw	r0, #32770	@ 0x8002
 8001646:	f7ff fe07 	bl	8001258 <INA226_Mode_pinAlert>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	4b36      	ldr	r3, [pc, #216]	@ (8001728 <main+0x140>)
 8001650:	801a      	strh	r2, [r3, #0]
  alertLimit = INA226_Alert_Limit(401);             //ativa o pino alerta
 8001652:	f240 1091 	movw	r0, #401	@ 0x191
 8001656:	f7ff fe43 	bl	80012e0 <INA226_Alert_Limit>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	4b33      	ldr	r3, [pc, #204]	@ (800172c <main+0x144>)
 8001660:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(adcFlag == 1){
 8001662:	4b33      	ldr	r3, [pc, #204]	@ (8001730 <main+0x148>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d10a      	bne.n	8001680 <main+0x98>
	  		  bbVoltage = readVoltage(adcBuffer[0]);
 800166a:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <main+0x130>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff ff6e 	bl	8001550 <readVoltage>
 8001674:	4603      	mov	r3, r0
 8001676:	4a2f      	ldr	r2, [pc, #188]	@ (8001734 <main+0x14c>)
 8001678:	6013      	str	r3, [r2, #0]
	  		  adcFlag = 0;
 800167a:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <main+0x148>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

	  	  }
     if (canFlag == 1){
 8001680:	4b2d      	ldr	r3, [pc, #180]	@ (8001738 <main+0x150>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d104      	bne.n	8001692 <main+0xaa>
    	 send_can();
 8001688:	f000 fa78 	bl	8001b7c <send_can>
    	 canFlag = 0;
 800168c:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <main+0x150>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
     }
     if(count >= 1000){
 8001692:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <main+0x154>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800169a:	db02      	blt.n	80016a2 <main+0xba>
    	 count = 0;
 800169c:	4b27      	ldr	r3, [pc, #156]	@ (800173c <main+0x154>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
     }
     count++;
 80016a2:	4b26      	ldr	r3, [pc, #152]	@ (800173c <main+0x154>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a24      	ldr	r2, [pc, #144]	@ (800173c <main+0x154>)
 80016aa:	6013      	str	r3, [r2, #0]

	  voltage = INA226_Vbus();
 80016ac:	f7ff fd3c 	bl	8001128 <INA226_Vbus>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a23      	ldr	r2, [pc, #140]	@ (8001740 <main+0x158>)
 80016b4:	6013      	str	r3, [r2, #0]
	  current = (INA226_Current()/1000); // lê em miliA, daí divido por 1000 pra A
 80016b6:	f7ff fd75 	bl	80011a4 <INA226_Current>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4921      	ldr	r1, [pc, #132]	@ (8001744 <main+0x15c>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fb46 	bl	8000d50 <__aeabi_fdiv>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <main+0x160>)
 80016ca:	601a      	str	r2, [r3, #0]

	 if(voltage > 14||bbVoltage < 11||current>20){
 80016cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <main+0x158>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	491e      	ldr	r1, [pc, #120]	@ (800174c <main+0x164>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fc44 	bl	8000f60 <__aeabi_fcmpgt>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d111      	bne.n	8001702 <main+0x11a>
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <main+0x14c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	491b      	ldr	r1, [pc, #108]	@ (8001750 <main+0x168>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fc1d 	bl	8000f24 <__aeabi_fcmplt>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d108      	bne.n	8001702 <main+0x11a>
 80016f0:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <main+0x160>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4917      	ldr	r1, [pc, #92]	@ (8001754 <main+0x16c>)
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fc32 	bl	8000f60 <__aeabi_fcmpgt>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <main+0x126>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET); // caso uma das situações ocorra, aciona o shutdown do glv
 8001702:	2201      	movs	r2, #1
 8001704:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001708:	4813      	ldr	r0, [pc, #76]	@ (8001758 <main+0x170>)
 800170a:	f001 ff07 	bl	800351c <HAL_GPIO_WritePin>
	  if(adcFlag == 1){
 800170e:	e7a8      	b.n	8001662 <main+0x7a>
 8001710:	d2f1a9fc 	.word	0xd2f1a9fc
 8001714:	4040624d 	.word	0x4040624d
 8001718:	200001f8 	.word	0x200001f8
 800171c:	2000003c 	.word	0x2000003c
 8001720:	2000012c 	.word	0x2000012c
 8001724:	200000b0 	.word	0x200000b0
 8001728:	200001f4 	.word	0x200001f4
 800172c:	200001f6 	.word	0x200001f6
 8001730:	200001cc 	.word	0x200001cc
 8001734:	200001c8 	.word	0x200001c8
 8001738:	200001d0 	.word	0x200001d0
 800173c:	200001bc 	.word	0x200001bc
 8001740:	200001c4 	.word	0x200001c4
 8001744:	447a0000 	.word	0x447a0000
 8001748:	200001c0 	.word	0x200001c0
 800174c:	41600000 	.word	0x41600000
 8001750:	41300000 	.word	0x41300000
 8001754:	41a00000 	.word	0x41a00000
 8001758:	40010800 	.word	0x40010800

0800175c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b094      	sub	sp, #80	@ 0x50
 8001760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001766:	2228      	movs	r2, #40	@ 0x28
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f003 ffa6 	bl	80056bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800178c:	2301      	movs	r3, #1
 800178e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001790:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800179a:	2301      	movs	r3, #1
 800179c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179e:	2302      	movs	r3, #2
 80017a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017a8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80017ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 ff20 	bl	80045f8 <HAL_RCC_OscConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017be:	f000 fa0b 	bl	8001bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c2:	230f      	movs	r3, #15
 80017c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2102      	movs	r1, #2
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 f98c 	bl	8004afc <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80017ea:	f000 f9f5 	bl	8001bd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017ee:	2302      	movs	r3, #2
 80017f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80017f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 fb0c 	bl	8004e18 <HAL_RCCEx_PeriphCLKConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001806:	f000 f9e7 	bl	8001bd8 <Error_Handler>
  }
}
 800180a:	bf00      	nop
 800180c:	3750      	adds	r7, #80	@ 0x50
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001824:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <MX_ADC1_Init+0x74>)
 8001826:	4a19      	ldr	r2, [pc, #100]	@ (800188c <MX_ADC1_Init+0x78>)
 8001828:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800182a:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <MX_ADC1_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001830:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <MX_ADC1_Init+0x74>)
 8001832:	2201      	movs	r2, #1
 8001834:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001836:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <MX_ADC1_Init+0x74>)
 8001838:	2200      	movs	r2, #0
 800183a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800183c:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <MX_ADC1_Init+0x74>)
 800183e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001842:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001844:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <MX_ADC1_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800184a:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <MX_ADC1_Init+0x74>)
 800184c:	2201      	movs	r2, #1
 800184e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001850:	480d      	ldr	r0, [pc, #52]	@ (8001888 <MX_ADC1_Init+0x74>)
 8001852:	f000 fc13 	bl	800207c <HAL_ADC_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800185c:	f000 f9bc 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001864:	2301      	movs	r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001868:	2307      	movs	r3, #7
 800186a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	@ (8001888 <MX_ADC1_Init+0x74>)
 8001872:	f000 fdcb 	bl	800240c <HAL_ADC_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800187c:	f000 f9ac 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	2000003c 	.word	0x2000003c
 800188c:	40012400 	.word	0x40012400

08001890 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001894:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <MX_CAN_Init+0x64>)
 8001896:	4a18      	ldr	r2, [pc, #96]	@ (80018f8 <MX_CAN_Init+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 800189a:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <MX_CAN_Init+0x64>)
 800189c:	2212      	movs	r2, #18
 800189e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80018a0:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <MX_CAN_Init+0x64>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018a6:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <MX_CAN_Init+0x64>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <MX_CAN_Init+0x64>)
 80018ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018b2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <MX_CAN_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <MX_CAN_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <MX_CAN_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <MX_CAN_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <MX_CAN_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <MX_CAN_Init+0x64>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <MX_CAN_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_CAN_Init+0x64>)
 80018e0:	f000 ff8d 	bl	80027fe <HAL_CAN_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80018ea:	f000 f975 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200000b0 	.word	0x200000b0
 80018f8:	40006400 	.word	0x40006400

080018fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <MX_I2C1_Init+0x50>)
 8001902:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <MX_I2C1_Init+0x54>)
 8001904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001906:	4b11      	ldr	r3, [pc, #68]	@ (800194c <MX_I2C1_Init+0x50>)
 8001908:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <MX_I2C1_Init+0x58>)
 800190a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <MX_I2C1_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <MX_I2C1_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001918:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <MX_I2C1_Init+0x50>)
 800191a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800191e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001920:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <MX_I2C1_Init+0x50>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MX_I2C1_Init+0x50>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192c:	4b07      	ldr	r3, [pc, #28]	@ (800194c <MX_I2C1_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <MX_I2C1_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001938:	4804      	ldr	r0, [pc, #16]	@ (800194c <MX_I2C1_Init+0x50>)
 800193a:	f001 fe29 	bl	8003590 <HAL_I2C_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001944:	f000 f948 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200000d8 	.word	0x200000d8
 8001950:	40005400 	.word	0x40005400
 8001954:	000186a0 	.word	0x000186a0

08001958 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001976:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <MX_TIM3_Init+0x90>)
 8001978:	4a1c      	ldr	r2, [pc, #112]	@ (80019ec <MX_TIM3_Init+0x94>)
 800197a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 800197c:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <MX_TIM3_Init+0x90>)
 800197e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001982:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b18      	ldr	r3, [pc, #96]	@ (80019e8 <MX_TIM3_Init+0x90>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 800198a:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <MX_TIM3_Init+0x90>)
 800198c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001990:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <MX_TIM3_Init+0x90>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <MX_TIM3_Init+0x90>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800199e:	4812      	ldr	r0, [pc, #72]	@ (80019e8 <MX_TIM3_Init+0x90>)
 80019a0:	f003 faf0 	bl	8004f84 <HAL_TIM_Base_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80019aa:	f000 f915 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <MX_TIM3_Init+0x90>)
 80019b6:	f003 fb87 	bl	80050c8 <HAL_TIM_SlaveConfigSynchro>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80019c0:	f000 f90a 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <MX_TIM3_Init+0x90>)
 80019d2:	f003 fd37 	bl	8005444 <HAL_TIMEx_MasterConfigSynchronization>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80019dc:	f000 f8fc 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000012c 	.word	0x2000012c
 80019ec:	40000400 	.word	0x40000400

080019f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <MX_USART2_UART_Init+0x4c>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	@ (8001a40 <MX_USART2_UART_Init+0x50>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <MX_USART2_UART_Init+0x4c>)
 80019fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a26:	4805      	ldr	r0, [pc, #20]	@ (8001a3c <MX_USART2_UART_Init+0x4c>)
 8001a28:	f003 fd6a 	bl	8005500 <HAL_UART_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a32:	f000 f8d1 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000174 	.word	0x20000174
 8001a40:	40004400 	.word	0x40004400

08001a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <MX_DMA_Init+0x38>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a7c <MX_DMA_Init+0x38>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6153      	str	r3, [r2, #20]
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <MX_DMA_Init+0x38>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	200b      	movs	r0, #11
 8001a68:	f001 f9af 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a6c:	200b      	movs	r0, #11
 8001a6e:	f001 f9c8 	bl	8002e02 <HAL_NVIC_EnableIRQ>

}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000

08001a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a94:	4b35      	ldr	r3, [pc, #212]	@ (8001b6c <MX_GPIO_Init+0xec>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a34      	ldr	r2, [pc, #208]	@ (8001b6c <MX_GPIO_Init+0xec>)
 8001a9a:	f043 0310 	orr.w	r3, r3, #16
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b32      	ldr	r3, [pc, #200]	@ (8001b6c <MX_GPIO_Init+0xec>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aac:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <MX_GPIO_Init+0xec>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8001b6c <MX_GPIO_Init+0xec>)
 8001ab2:	f043 0320 	orr.w	r3, r3, #32
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b6c <MX_GPIO_Init+0xec>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b29      	ldr	r3, [pc, #164]	@ (8001b6c <MX_GPIO_Init+0xec>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a28      	ldr	r2, [pc, #160]	@ (8001b6c <MX_GPIO_Init+0xec>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <MX_GPIO_Init+0xec>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001adc:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <MX_GPIO_Init+0xec>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a22      	ldr	r2, [pc, #136]	@ (8001b6c <MX_GPIO_Init+0xec>)
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <MX_GPIO_Init+0xec>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8001afa:	481d      	ldr	r0, [pc, #116]	@ (8001b70 <MX_GPIO_Init+0xf0>)
 8001afc:	f001 fd0e 	bl	800351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <MX_GPIO_Init+0xf4>)
 8001b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	4619      	mov	r1, r3
 8001b14:	4818      	ldr	r0, [pc, #96]	@ (8001b78 <MX_GPIO_Init+0xf8>)
 8001b16:	f001 fb7d 	bl	8003214 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	f107 0310 	add.w	r3, r7, #16
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480f      	ldr	r0, [pc, #60]	@ (8001b70 <MX_GPIO_Init+0xf0>)
 8001b32:	f001 fb6f 	bl	8003214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4808      	ldr	r0, [pc, #32]	@ (8001b70 <MX_GPIO_Init+0xf0>)
 8001b50:	f001 fb60 	bl	8003214 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2028      	movs	r0, #40	@ 0x28
 8001b5a:	f001 f936 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b5e:	2028      	movs	r0, #40	@ 0x28
 8001b60:	f001 f94f 	bl	8002e02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b64:	bf00      	nop
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010800 	.word	0x40010800
 8001b74:	10110000 	.word	0x10110000
 8001b78:	40011000 	.word	0x40011000

08001b7c <send_can>:

/* USER CODE BEGIN 4 */
void send_can(void ){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	txHeader.StdId = 0x380;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <send_can+0x44>)
 8001b82:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8001b86:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 8001b88:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <send_can+0x44>)
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	611a      	str	r2, [r3, #16]
	txHeader.ExtId = 0;
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <send_can+0x44>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	605a      	str	r2, [r3, #4]
	txHeader.IDE = CAN_ID_STD;
 8001b94:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <send_can+0x44>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <send_can+0x44>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]

	memcpy(&txData[0],&current, sizeof(float));
 8001ba0:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <send_can+0x48>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a08      	ldr	r2, [pc, #32]	@ (8001bc8 <send_can+0x4c>)
 8001ba6:	6013      	str	r3, [r2, #0]
	memcpy(&txData[4],&voltage, sizeof(float));
 8001ba8:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <send_can+0x50>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a06      	ldr	r2, [pc, #24]	@ (8001bc8 <send_can+0x4c>)
 8001bae:	6053      	str	r3, [r2, #4]

	HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox);
 8001bb0:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <send_can+0x54>)
 8001bb2:	4a05      	ldr	r2, [pc, #20]	@ (8001bc8 <send_can+0x4c>)
 8001bb4:	4902      	ldr	r1, [pc, #8]	@ (8001bc0 <send_can+0x44>)
 8001bb6:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <send_can+0x58>)
 8001bb8:	f000 ff60 	bl	8002a7c <HAL_CAN_AddTxMessage>
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200001d4 	.word	0x200001d4
 8001bc4:	200001c0 	.word	0x200001c0
 8001bc8:	200001ec 	.word	0x200001ec
 8001bcc:	200001c4 	.word	0x200001c4
 8001bd0:	200001fc 	.word	0x200001fc
 8001bd4:	200000b0 	.word	0x200000b0

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <Error_Handler+0x8>

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_MspInit+0x5c>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <HAL_MspInit+0x5c>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6193      	str	r3, [r2, #24]
 8001bf6:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_MspInit+0x5c>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_MspInit+0x5c>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a0e      	ldr	r2, [pc, #56]	@ (8001c40 <HAL_MspInit+0x5c>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	61d3      	str	r3, [r2, #28]
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <HAL_MspInit+0x5c>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_MspInit+0x60>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <HAL_MspInit+0x60>)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010000 	.word	0x40010000

08001c48 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a28      	ldr	r2, [pc, #160]	@ (8001d04 <HAL_ADC_MspInit+0xbc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d149      	bne.n	8001cfc <HAL_ADC_MspInit+0xb4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c68:	4b27      	ldr	r3, [pc, #156]	@ (8001d08 <HAL_ADC_MspInit+0xc0>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a26      	ldr	r2, [pc, #152]	@ (8001d08 <HAL_ADC_MspInit+0xc0>)
 8001c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <HAL_ADC_MspInit+0xc0>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <HAL_ADC_MspInit+0xc0>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a20      	ldr	r2, [pc, #128]	@ (8001d08 <HAL_ADC_MspInit+0xc0>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <HAL_ADC_MspInit+0xc0>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4819      	ldr	r0, [pc, #100]	@ (8001d0c <HAL_ADC_MspInit+0xc4>)
 8001ca8:	f001 fab4 	bl	8003214 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001cac:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HAL_ADC_MspInit+0xc8>)
 8001cae:	4a19      	ldr	r2, [pc, #100]	@ (8001d14 <HAL_ADC_MspInit+0xcc>)
 8001cb0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <HAL_ADC_MspInit+0xc8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <HAL_ADC_MspInit+0xc8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8001cbe:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <HAL_ADC_MspInit+0xc8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <HAL_ADC_MspInit+0xc8>)
 8001cc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ccc:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <HAL_ADC_MspInit+0xc8>)
 8001cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cd2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_ADC_MspInit+0xc8>)
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <HAL_ADC_MspInit+0xc8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ce0:	480b      	ldr	r0, [pc, #44]	@ (8001d10 <HAL_ADC_MspInit+0xc8>)
 8001ce2:	f001 f8a9 	bl	8002e38 <HAL_DMA_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001cec:	f7ff ff74 	bl	8001bd8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a07      	ldr	r2, [pc, #28]	@ (8001d10 <HAL_ADC_MspInit+0xc8>)
 8001cf4:	621a      	str	r2, [r3, #32]
 8001cf6:	4a06      	ldr	r2, [pc, #24]	@ (8001d10 <HAL_ADC_MspInit+0xc8>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40012400 	.word	0x40012400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010800 	.word	0x40010800
 8001d10:	2000006c 	.word	0x2000006c
 8001d14:	40020008 	.word	0x40020008

08001d18 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1c      	ldr	r2, [pc, #112]	@ (8001da4 <HAL_CAN_MspInit+0x8c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d131      	bne.n	8001d9c <HAL_CAN_MspInit+0x84>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d38:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <HAL_CAN_MspInit+0x90>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001da8 <HAL_CAN_MspInit+0x90>)
 8001d3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d42:	61d3      	str	r3, [r2, #28]
 8001d44:	4b18      	ldr	r3, [pc, #96]	@ (8001da8 <HAL_CAN_MspInit+0x90>)
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d50:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <HAL_CAN_MspInit+0x90>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <HAL_CAN_MspInit+0x90>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_CAN_MspInit+0x90>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d76:	f107 0310 	add.w	r3, r7, #16
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480b      	ldr	r0, [pc, #44]	@ (8001dac <HAL_CAN_MspInit+0x94>)
 8001d7e:	f001 fa49 	bl	8003214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	4619      	mov	r1, r3
 8001d96:	4805      	ldr	r0, [pc, #20]	@ (8001dac <HAL_CAN_MspInit+0x94>)
 8001d98:	f001 fa3c 	bl	8003214 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001d9c:	bf00      	nop
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40006400 	.word	0x40006400
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010800 	.word	0x40010800

08001db0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a15      	ldr	r2, [pc, #84]	@ (8001e20 <HAL_I2C_MspInit+0x70>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d123      	bne.n	8001e18 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd0:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <HAL_I2C_MspInit+0x74>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a13      	ldr	r2, [pc, #76]	@ (8001e24 <HAL_I2C_MspInit+0x74>)
 8001dd6:	f043 0308 	orr.w	r3, r3, #8
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <HAL_I2C_MspInit+0x74>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001de8:	23c0      	movs	r3, #192	@ 0xc0
 8001dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dec:	2312      	movs	r3, #18
 8001dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480b      	ldr	r0, [pc, #44]	@ (8001e28 <HAL_I2C_MspInit+0x78>)
 8001dfc:	f001 fa0a 	bl	8003214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <HAL_I2C_MspInit+0x74>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	4a07      	ldr	r2, [pc, #28]	@ (8001e24 <HAL_I2C_MspInit+0x74>)
 8001e06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e0a:	61d3      	str	r3, [r2, #28]
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <HAL_I2C_MspInit+0x74>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e18:	bf00      	nop
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40005400 	.word	0x40005400
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40010c00 	.word	0x40010c00

08001e2c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a09      	ldr	r2, [pc, #36]	@ (8001e60 <HAL_TIM_Base_MspInit+0x34>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10b      	bne.n	8001e56 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <HAL_TIM_Base_MspInit+0x38>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a08      	ldr	r2, [pc, #32]	@ (8001e64 <HAL_TIM_Base_MspInit+0x38>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_TIM_Base_MspInit+0x38>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40000400 	.word	0x40000400
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a15      	ldr	r2, [pc, #84]	@ (8001ed8 <HAL_UART_MspInit+0x70>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d123      	bne.n	8001ed0 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e88:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <HAL_UART_MspInit+0x74>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	4a13      	ldr	r2, [pc, #76]	@ (8001edc <HAL_UART_MspInit+0x74>)
 8001e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e92:	61d3      	str	r3, [r2, #28]
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <HAL_UART_MspInit+0x74>)
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <HAL_UART_MspInit+0x74>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8001edc <HAL_UART_MspInit+0x74>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6193      	str	r3, [r2, #24]
 8001eac:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_UART_MspInit+0x74>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eb8:	230c      	movs	r3, #12
 8001eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <HAL_UART_MspInit+0x78>)
 8001ecc:	f001 f9a2 	bl	8003214 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ed0:	bf00      	nop
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40004400 	.word	0x40004400
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010800 	.word	0x40010800

08001ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <NMI_Handler+0x4>

08001eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <HardFault_Handler+0x4>

08001ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <MemManage_Handler+0x4>

08001efc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f34:	f000 f886 	bl	8002044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f40:	4802      	ldr	r0, [pc, #8]	@ (8001f4c <DMA1_Channel1_IRQHandler+0x10>)
 8001f42:	f001 f833 	bl	8002fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000006c 	.word	0x2000006c

08001f50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f54:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f58:	f001 faf8 	bl	800354c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f6c:	f7ff fff8 	bl	8001f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f70:	480b      	ldr	r0, [pc, #44]	@ (8001fa0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f72:	490c      	ldr	r1, [pc, #48]	@ (8001fa4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f74:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f88:	4c09      	ldr	r4, [pc, #36]	@ (8001fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f96:	f003 fb99 	bl	80056cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f9a:	f7ff fb25 	bl	80015e8 <main>
  bx lr
 8001f9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fa8:	08005760 	.word	0x08005760
  ldr r2, =_sbss
 8001fac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fb0:	20000204 	.word	0x20000204

08001fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fb4:	e7fe      	b.n	8001fb4 <ADC1_2_IRQHandler>
	...

08001fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fbc:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <HAL_Init+0x28>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a07      	ldr	r2, [pc, #28]	@ (8001fe0 <HAL_Init+0x28>)
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f000 fef3 	bl	8002db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f000 f808 	bl	8001fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd4:	f7ff fe06 	bl	8001be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40022000 	.word	0x40022000

08001fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_InitTick+0x54>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_InitTick+0x58>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f000 ff0b 	bl	8002e1e <HAL_SYSTICK_Config>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e00e      	b.n	8002030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b0f      	cmp	r3, #15
 8002016:	d80a      	bhi.n	800202e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002018:	2200      	movs	r2, #0
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f000 fed3 	bl	8002dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002024:	4a06      	ldr	r2, [pc, #24]	@ (8002040 <HAL_InitTick+0x5c>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000000 	.word	0x20000000
 800203c:	20000008 	.word	0x20000008
 8002040:	20000004 	.word	0x20000004

08002044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_IncTick+0x1c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <HAL_IncTick+0x20>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4413      	add	r3, r2
 8002054:	4a03      	ldr	r2, [pc, #12]	@ (8002064 <HAL_IncTick+0x20>)
 8002056:	6013      	str	r3, [r2, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	20000008 	.word	0x20000008
 8002064:	20000200 	.word	0x20000200

08002068 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b02      	ldr	r3, [pc, #8]	@ (8002078 <HAL_GetTick+0x10>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	20000200 	.word	0x20000200

0800207c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0be      	b.n	800221c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fdc4 	bl	8001c48 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 faf5 	bl	80026b0 <ADC_ConversionStop_Disable>
 80020c6:	4603      	mov	r3, r0
 80020c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 8099 	bne.w	800220a <HAL_ADC_Init+0x18e>
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f040 8095 	bne.w	800220a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020e8:	f023 0302 	bic.w	r3, r3, #2
 80020ec:	f043 0202 	orr.w	r2, r3, #2
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7b1b      	ldrb	r3, [r3, #12]
 8002102:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002104:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	4313      	orrs	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002114:	d003      	beq.n	800211e <HAL_ADC_Init+0xa2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_ADC_Init+0xa8>
 800211e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002122:	e000      	b.n	8002126 <HAL_ADC_Init+0xaa>
 8002124:	2300      	movs	r3, #0
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7d1b      	ldrb	r3, [r3, #20]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d119      	bne.n	8002168 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7b1b      	ldrb	r3, [r3, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	3b01      	subs	r3, #1
 8002142:	035a      	lsls	r2, r3, #13
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	e00b      	b.n	8002168 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002154:	f043 0220 	orr.w	r2, r3, #32
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	430a      	orrs	r2, r1
 800217a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	4b28      	ldr	r3, [pc, #160]	@ (8002224 <HAL_ADC_Init+0x1a8>)
 8002184:	4013      	ands	r3, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	68b9      	ldr	r1, [r7, #8]
 800218c:	430b      	orrs	r3, r1
 800218e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002198:	d003      	beq.n	80021a2 <HAL_ADC_Init+0x126>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d104      	bne.n	80021ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	051b      	lsls	r3, r3, #20
 80021aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	430a      	orrs	r2, r1
 80021be:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	4b18      	ldr	r3, [pc, #96]	@ (8002228 <HAL_ADC_Init+0x1ac>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d10b      	bne.n	80021e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	f023 0303 	bic.w	r3, r3, #3
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021e6:	e018      	b.n	800221a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	f023 0312 	bic.w	r3, r3, #18
 80021f0:	f043 0210 	orr.w	r2, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002208:	e007      	b.n	800221a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220e:	f043 0210 	orr.w	r2, r3, #16
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800221a:	7dfb      	ldrb	r3, [r7, #23]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	ffe1f7fd 	.word	0xffe1f7fd
 8002228:	ff1f0efe 	.word	0xff1f0efe

0800222c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a64      	ldr	r2, [pc, #400]	@ (80023d4 <HAL_ADC_Start_DMA+0x1a8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d004      	beq.n	8002250 <HAL_ADC_Start_DMA+0x24>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a63      	ldr	r2, [pc, #396]	@ (80023d8 <HAL_ADC_Start_DMA+0x1ac>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d106      	bne.n	800225e <HAL_ADC_Start_DMA+0x32>
 8002250:	4b60      	ldr	r3, [pc, #384]	@ (80023d4 <HAL_ADC_Start_DMA+0x1a8>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002258:	2b00      	cmp	r3, #0
 800225a:	f040 80b3 	bne.w	80023c4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_ADC_Start_DMA+0x40>
 8002268:	2302      	movs	r3, #2
 800226a:	e0ae      	b.n	80023ca <HAL_ADC_Start_DMA+0x19e>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f9c1 	bl	80025fc <ADC_Enable>
 800227a:	4603      	mov	r3, r0
 800227c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 809a 	bne.w	80023ba <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a4e      	ldr	r2, [pc, #312]	@ (80023d8 <HAL_ADC_Start_DMA+0x1ac>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d105      	bne.n	80022b0 <HAL_ADC_Start_DMA+0x84>
 80022a4:	4b4b      	ldr	r3, [pc, #300]	@ (80023d4 <HAL_ADC_Start_DMA+0x1a8>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d115      	bne.n	80022dc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d026      	beq.n	8002318 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022da:	e01d      	b.n	8002318 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a39      	ldr	r2, [pc, #228]	@ (80023d4 <HAL_ADC_Start_DMA+0x1a8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_ADC_Start_DMA+0xd0>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a38      	ldr	r2, [pc, #224]	@ (80023d8 <HAL_ADC_Start_DMA+0x1ac>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d10d      	bne.n	8002318 <HAL_ADC_Start_DMA+0xec>
 80022fc:	4b35      	ldr	r3, [pc, #212]	@ (80023d4 <HAL_ADC_Start_DMA+0x1a8>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002310:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002328:	f023 0206 	bic.w	r2, r3, #6
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002330:	e002      	b.n	8002338 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4a25      	ldr	r2, [pc, #148]	@ (80023dc <HAL_ADC_Start_DMA+0x1b0>)
 8002346:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4a24      	ldr	r2, [pc, #144]	@ (80023e0 <HAL_ADC_Start_DMA+0x1b4>)
 800234e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <HAL_ADC_Start_DMA+0x1b8>)
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0202 	mvn.w	r2, #2
 8002360:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002370:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a18      	ldr	r0, [r3, #32]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	334c      	adds	r3, #76	@ 0x4c
 800237c:	4619      	mov	r1, r3
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f000 fdb3 	bl	8002eec <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002390:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002394:	d108      	bne.n	80023a8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80023a4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023a6:	e00f      	b.n	80023c8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80023b6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023b8:	e006      	b.n	80023c8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80023c2:	e001      	b.n	80023c8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40012400 	.word	0x40012400
 80023d8:	40012800 	.word	0x40012800
 80023dc:	08002733 	.word	0x08002733
 80023e0:	080027af 	.word	0x080027af
 80023e4:	080027cb 	.word	0x080027cb

080023e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_ADC_ConfigChannel+0x20>
 8002428:	2302      	movs	r3, #2
 800242a:	e0dc      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x1da>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b06      	cmp	r3, #6
 800243a:	d81c      	bhi.n	8002476 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	3b05      	subs	r3, #5
 800244e:	221f      	movs	r2, #31
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	4019      	ands	r1, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	3b05      	subs	r3, #5
 8002468:	fa00 f203 	lsl.w	r2, r0, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	635a      	str	r2, [r3, #52]	@ 0x34
 8002474:	e03c      	b.n	80024f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d81c      	bhi.n	80024b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	3b23      	subs	r3, #35	@ 0x23
 8002490:	221f      	movs	r2, #31
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	4019      	ands	r1, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	3b23      	subs	r3, #35	@ 0x23
 80024aa:	fa00 f203 	lsl.w	r2, r0, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80024b6:	e01b      	b.n	80024f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	3b41      	subs	r3, #65	@ 0x41
 80024ca:	221f      	movs	r2, #31
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	4019      	ands	r1, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	3b41      	subs	r3, #65	@ 0x41
 80024e4:	fa00 f203 	lsl.w	r2, r0, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b09      	cmp	r3, #9
 80024f6:	d91c      	bls.n	8002532 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68d9      	ldr	r1, [r3, #12]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	3b1e      	subs	r3, #30
 800250a:	2207      	movs	r2, #7
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	4019      	ands	r1, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6898      	ldr	r0, [r3, #8]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	3b1e      	subs	r3, #30
 8002524:	fa00 f203 	lsl.w	r2, r0, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]
 8002530:	e019      	b.n	8002566 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6919      	ldr	r1, [r3, #16]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	2207      	movs	r2, #7
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	4019      	ands	r1, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	6898      	ldr	r0, [r3, #8]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	fa00 f203 	lsl.w	r2, r0, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b10      	cmp	r3, #16
 800256c:	d003      	beq.n	8002576 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002572:	2b11      	cmp	r3, #17
 8002574:	d132      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1d      	ldr	r2, [pc, #116]	@ (80025f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d125      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d126      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800259c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d11a      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025a6:	4b13      	ldr	r3, [pc, #76]	@ (80025f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a13      	ldr	r2, [pc, #76]	@ (80025f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	0c9a      	lsrs	r2, r3, #18
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025bc:	e002      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f9      	bne.n	80025be <HAL_ADC_ConfigChannel+0x1b2>
 80025ca:	e007      	b.n	80025dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	40012400 	.word	0x40012400
 80025f4:	20000000 	.word	0x20000000
 80025f8:	431bde83 	.word	0x431bde83

080025fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b01      	cmp	r3, #1
 8002618:	d040      	beq.n	800269c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800262a:	4b1f      	ldr	r3, [pc, #124]	@ (80026a8 <ADC_Enable+0xac>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1f      	ldr	r2, [pc, #124]	@ (80026ac <ADC_Enable+0xb0>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	0c9b      	lsrs	r3, r3, #18
 8002636:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002638:	e002      	b.n	8002640 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3b01      	subs	r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f9      	bne.n	800263a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002646:	f7ff fd0f 	bl	8002068 <HAL_GetTick>
 800264a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800264c:	e01f      	b.n	800268e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800264e:	f7ff fd0b 	bl	8002068 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d918      	bls.n	800268e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b01      	cmp	r3, #1
 8002668:	d011      	beq.n	800268e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266e:	f043 0210 	orr.w	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267a:	f043 0201 	orr.w	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e007      	b.n	800269e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d1d8      	bne.n	800264e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000
 80026ac:	431bde83 	.word	0x431bde83

080026b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d12e      	bne.n	8002728 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026da:	f7ff fcc5 	bl	8002068 <HAL_GetTick>
 80026de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026e0:	e01b      	b.n	800271a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026e2:	f7ff fcc1 	bl	8002068 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d914      	bls.n	800271a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d10d      	bne.n	800271a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002702:	f043 0210 	orr.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e007      	b.n	800272a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d0dc      	beq.n	80026e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002744:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002748:	2b00      	cmp	r3, #0
 800274a:	d127      	bne.n	800279c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002762:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002766:	d115      	bne.n	8002794 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800276c:	2b00      	cmp	r3, #0
 800276e:	d111      	bne.n	8002794 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7fe ff17 	bl	80015c8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800279a:	e004      	b.n	80027a6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7ff fe13 	bl	80023e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e8:	f043 0204 	orr.w	r2, r3, #4
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f7ff fe02 	bl	80023fa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0ed      	b.n	80029ec <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff fa7b 	bl	8001d18 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0201 	orr.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002832:	f7ff fc19 	bl	8002068 <HAL_GetTick>
 8002836:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002838:	e012      	b.n	8002860 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800283a:	f7ff fc15 	bl	8002068 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b0a      	cmp	r3, #10
 8002846:	d90b      	bls.n	8002860 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2205      	movs	r2, #5
 8002858:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0c5      	b.n	80029ec <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0e5      	beq.n	800283a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0202 	bic.w	r2, r2, #2
 800287c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800287e:	f7ff fbf3 	bl	8002068 <HAL_GetTick>
 8002882:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002884:	e012      	b.n	80028ac <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002886:	f7ff fbef 	bl	8002068 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b0a      	cmp	r3, #10
 8002892:	d90b      	bls.n	80028ac <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2205      	movs	r2, #5
 80028a4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e09f      	b.n	80029ec <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e5      	bne.n	8002886 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7e1b      	ldrb	r3, [r3, #24]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d108      	bne.n	80028d4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e007      	b.n	80028e4 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7e5b      	ldrb	r3, [r3, #25]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d108      	bne.n	80028fe <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e007      	b.n	800290e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7e9b      	ldrb	r3, [r3, #26]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d108      	bne.n	8002928 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0220 	orr.w	r2, r2, #32
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e007      	b.n	8002938 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0220 	bic.w	r2, r2, #32
 8002936:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	7edb      	ldrb	r3, [r3, #27]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d108      	bne.n	8002952 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0210 	bic.w	r2, r2, #16
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e007      	b.n	8002962 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0210 	orr.w	r2, r2, #16
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	7f1b      	ldrb	r3, [r3, #28]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d108      	bne.n	800297c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0208 	orr.w	r2, r2, #8
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e007      	b.n	800298c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0208 	bic.w	r2, r2, #8
 800298a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7f5b      	ldrb	r3, [r3, #29]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d108      	bne.n	80029a6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0204 	orr.w	r2, r2, #4
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	e007      	b.n	80029b6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0204 	bic.w	r2, r2, #4
 80029b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	ea42 0103 	orr.w	r1, r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	1e5a      	subs	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d12e      	bne.n	8002a66 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a20:	f7ff fb22 	bl	8002068 <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a26:	e012      	b.n	8002a4e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a28:	f7ff fb1e 	bl	8002068 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b0a      	cmp	r3, #10
 8002a34:	d90b      	bls.n	8002a4e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2205      	movs	r2, #5
 8002a46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e012      	b.n	8002a74 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e5      	bne.n	8002a28 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e006      	b.n	8002a74 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
  }
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	@ 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a90:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a9a:	7ffb      	ldrb	r3, [r7, #31]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d003      	beq.n	8002aa8 <HAL_CAN_AddTxMessage+0x2c>
 8002aa0:	7ffb      	ldrb	r3, [r7, #31]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	f040 80ad 	bne.w	8002c02 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8095 	beq.w	8002bf2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	0e1b      	lsrs	r3, r3, #24
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10d      	bne.n	8002b00 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002aee:	68f9      	ldr	r1, [r7, #12]
 8002af0:	6809      	ldr	r1, [r1, #0]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	3318      	adds	r3, #24
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	440b      	add	r3, r1
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e00f      	b.n	8002b20 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b0a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b10:	68f9      	ldr	r1, [r7, #12]
 8002b12:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002b14:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	3318      	adds	r3, #24
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	440b      	add	r3, r1
 8002b1e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	3318      	adds	r3, #24
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	440b      	add	r3, r1
 8002b30:	3304      	adds	r3, #4
 8002b32:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	7d1b      	ldrb	r3, [r3, #20]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d111      	bne.n	8002b60 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3318      	adds	r3, #24
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	6811      	ldr	r1, [r2, #0]
 8002b50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3318      	adds	r3, #24
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3307      	adds	r3, #7
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	061a      	lsls	r2, r3, #24
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3306      	adds	r3, #6
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	041b      	lsls	r3, r3, #16
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3305      	adds	r3, #5
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	3204      	adds	r2, #4
 8002b80:	7812      	ldrb	r2, [r2, #0]
 8002b82:	4610      	mov	r0, r2
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	6811      	ldr	r1, [r2, #0]
 8002b88:	ea43 0200 	orr.w	r2, r3, r0
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	440b      	add	r3, r1
 8002b92:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002b96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3303      	adds	r3, #3
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	061a      	lsls	r2, r3, #24
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	041b      	lsls	r3, r3, #16
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3301      	adds	r3, #1
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	7812      	ldrb	r2, [r2, #0]
 8002bb8:	4610      	mov	r0, r2
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	6811      	ldr	r1, [r2, #0]
 8002bbe:	ea43 0200 	orr.w	r2, r3, r0
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002bcc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	3318      	adds	r3, #24
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4413      	add	r3, r2
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	6811      	ldr	r1, [r2, #0]
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3318      	adds	r3, #24
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	440b      	add	r3, r1
 8002bec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e00e      	b.n	8002c10 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e006      	b.n	8002c10 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
  }
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3724      	adds	r7, #36	@ 0x24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
	...

08002c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4e:	4a04      	ldr	r2, [pc, #16]	@ (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	60d3      	str	r3, [r2, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c68:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <__NVIC_GetPriorityGrouping+0x18>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 0307 	and.w	r3, r3, #7
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db0b      	blt.n	8002caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4906      	ldr	r1, [pc, #24]	@ (8002cb4 <__NVIC_EnableIRQ+0x34>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	e000e100 	.word	0xe000e100

08002cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	db0a      	blt.n	8002ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	490c      	ldr	r1, [pc, #48]	@ (8002d04 <__NVIC_SetPriority+0x4c>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce0:	e00a      	b.n	8002cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4908      	ldr	r1, [pc, #32]	@ (8002d08 <__NVIC_SetPriority+0x50>)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	3b04      	subs	r3, #4
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	761a      	strb	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000e100 	.word	0xe000e100
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	@ 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f1c3 0307 	rsb	r3, r3, #7
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf28      	it	cs
 8002d2a:	2304      	movcs	r3, #4
 8002d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d902      	bls.n	8002d3c <NVIC_EncodePriority+0x30>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3b03      	subs	r3, #3
 8002d3a:	e000      	b.n	8002d3e <NVIC_EncodePriority+0x32>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	401a      	ands	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	43d9      	mvns	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	4313      	orrs	r3, r2
         );
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3724      	adds	r7, #36	@ 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d80:	d301      	bcc.n	8002d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d82:	2301      	movs	r3, #1
 8002d84:	e00f      	b.n	8002da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d86:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <SysTick_Config+0x40>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8e:	210f      	movs	r1, #15
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	f7ff ff90 	bl	8002cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d98:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <SysTick_Config+0x40>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9e:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <SysTick_Config+0x40>)
 8002da0:	2207      	movs	r2, #7
 8002da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	e000e010 	.word	0xe000e010

08002db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff2d 	bl	8002c1c <__NVIC_SetPriorityGrouping>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ddc:	f7ff ff42 	bl	8002c64 <__NVIC_GetPriorityGrouping>
 8002de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	6978      	ldr	r0, [r7, #20]
 8002de8:	f7ff ff90 	bl	8002d0c <NVIC_EncodePriority>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff5f 	bl	8002cb8 <__NVIC_SetPriority>
}
 8002dfa:	bf00      	nop
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff35 	bl	8002c80 <__NVIC_EnableIRQ>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ffa2 	bl	8002d70 <SysTick_Config>
 8002e2c:	4603      	mov	r3, r0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e043      	b.n	8002ed6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b22      	ldr	r3, [pc, #136]	@ (8002ee0 <HAL_DMA_Init+0xa8>)
 8002e56:	4413      	add	r3, r2
 8002e58:	4a22      	ldr	r2, [pc, #136]	@ (8002ee4 <HAL_DMA_Init+0xac>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	009a      	lsls	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee8 <HAL_DMA_Init+0xb0>)
 8002e6a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e82:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	bffdfff8 	.word	0xbffdfff8
 8002ee4:	cccccccd 	.word	0xcccccccd
 8002ee8:	40020000 	.word	0x40020000

08002eec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_DMA_Start_IT+0x20>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e04b      	b.n	8002fa4 <HAL_DMA_Start_IT+0xb8>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d13a      	bne.n	8002f96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f937 	bl	80031b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 020e 	orr.w	r2, r2, #14
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	e00f      	b.n	8002f84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0204 	bic.w	r2, r2, #4
 8002f72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 020a 	orr.w	r2, r2, #10
 8002f82:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	e005      	b.n	8002fa2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	2204      	movs	r2, #4
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d04f      	beq.n	8003074 <HAL_DMA_IRQHandler+0xc8>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d04a      	beq.n	8003074 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d107      	bne.n	8002ffc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0204 	bic.w	r2, r2, #4
 8002ffa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a66      	ldr	r2, [pc, #408]	@ (800319c <HAL_DMA_IRQHandler+0x1f0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d029      	beq.n	800305a <HAL_DMA_IRQHandler+0xae>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a65      	ldr	r2, [pc, #404]	@ (80031a0 <HAL_DMA_IRQHandler+0x1f4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d022      	beq.n	8003056 <HAL_DMA_IRQHandler+0xaa>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a63      	ldr	r2, [pc, #396]	@ (80031a4 <HAL_DMA_IRQHandler+0x1f8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01a      	beq.n	8003050 <HAL_DMA_IRQHandler+0xa4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a62      	ldr	r2, [pc, #392]	@ (80031a8 <HAL_DMA_IRQHandler+0x1fc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d012      	beq.n	800304a <HAL_DMA_IRQHandler+0x9e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a60      	ldr	r2, [pc, #384]	@ (80031ac <HAL_DMA_IRQHandler+0x200>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00a      	beq.n	8003044 <HAL_DMA_IRQHandler+0x98>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a5f      	ldr	r2, [pc, #380]	@ (80031b0 <HAL_DMA_IRQHandler+0x204>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d102      	bne.n	800303e <HAL_DMA_IRQHandler+0x92>
 8003038:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800303c:	e00e      	b.n	800305c <HAL_DMA_IRQHandler+0xb0>
 800303e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003042:	e00b      	b.n	800305c <HAL_DMA_IRQHandler+0xb0>
 8003044:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003048:	e008      	b.n	800305c <HAL_DMA_IRQHandler+0xb0>
 800304a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800304e:	e005      	b.n	800305c <HAL_DMA_IRQHandler+0xb0>
 8003050:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003054:	e002      	b.n	800305c <HAL_DMA_IRQHandler+0xb0>
 8003056:	2340      	movs	r3, #64	@ 0x40
 8003058:	e000      	b.n	800305c <HAL_DMA_IRQHandler+0xb0>
 800305a:	2304      	movs	r3, #4
 800305c:	4a55      	ldr	r2, [pc, #340]	@ (80031b4 <HAL_DMA_IRQHandler+0x208>)
 800305e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8094 	beq.w	8003192 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003072:	e08e      	b.n	8003192 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	2202      	movs	r2, #2
 800307a:	409a      	lsls	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d056      	beq.n	8003132 <HAL_DMA_IRQHandler+0x186>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d051      	beq.n	8003132 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 020a 	bic.w	r2, r2, #10
 80030aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a38      	ldr	r2, [pc, #224]	@ (800319c <HAL_DMA_IRQHandler+0x1f0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d029      	beq.n	8003112 <HAL_DMA_IRQHandler+0x166>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a37      	ldr	r2, [pc, #220]	@ (80031a0 <HAL_DMA_IRQHandler+0x1f4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d022      	beq.n	800310e <HAL_DMA_IRQHandler+0x162>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a35      	ldr	r2, [pc, #212]	@ (80031a4 <HAL_DMA_IRQHandler+0x1f8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01a      	beq.n	8003108 <HAL_DMA_IRQHandler+0x15c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a34      	ldr	r2, [pc, #208]	@ (80031a8 <HAL_DMA_IRQHandler+0x1fc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d012      	beq.n	8003102 <HAL_DMA_IRQHandler+0x156>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a32      	ldr	r2, [pc, #200]	@ (80031ac <HAL_DMA_IRQHandler+0x200>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00a      	beq.n	80030fc <HAL_DMA_IRQHandler+0x150>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a31      	ldr	r2, [pc, #196]	@ (80031b0 <HAL_DMA_IRQHandler+0x204>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d102      	bne.n	80030f6 <HAL_DMA_IRQHandler+0x14a>
 80030f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80030f4:	e00e      	b.n	8003114 <HAL_DMA_IRQHandler+0x168>
 80030f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030fa:	e00b      	b.n	8003114 <HAL_DMA_IRQHandler+0x168>
 80030fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003100:	e008      	b.n	8003114 <HAL_DMA_IRQHandler+0x168>
 8003102:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003106:	e005      	b.n	8003114 <HAL_DMA_IRQHandler+0x168>
 8003108:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800310c:	e002      	b.n	8003114 <HAL_DMA_IRQHandler+0x168>
 800310e:	2320      	movs	r3, #32
 8003110:	e000      	b.n	8003114 <HAL_DMA_IRQHandler+0x168>
 8003112:	2302      	movs	r3, #2
 8003114:	4a27      	ldr	r2, [pc, #156]	@ (80031b4 <HAL_DMA_IRQHandler+0x208>)
 8003116:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003124:	2b00      	cmp	r3, #0
 8003126:	d034      	beq.n	8003192 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003130:	e02f      	b.n	8003192 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	2208      	movs	r2, #8
 8003138:	409a      	lsls	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d028      	beq.n	8003194 <HAL_DMA_IRQHandler+0x1e8>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d023      	beq.n	8003194 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 020e 	bic.w	r2, r2, #14
 800315a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003164:	2101      	movs	r1, #1
 8003166:	fa01 f202 	lsl.w	r2, r1, r2
 800316a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
    }
  }
  return;
 8003192:	bf00      	nop
 8003194:	bf00      	nop
}
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40020008 	.word	0x40020008
 80031a0:	4002001c 	.word	0x4002001c
 80031a4:	40020030 	.word	0x40020030
 80031a8:	40020044 	.word	0x40020044
 80031ac:	40020058 	.word	0x40020058
 80031b0:	4002006c 	.word	0x4002006c
 80031b4:	40020000 	.word	0x40020000

080031b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ce:	2101      	movs	r1, #1
 80031d0:	fa01 f202 	lsl.w	r2, r1, r2
 80031d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d108      	bne.n	80031f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031f6:	e007      	b.n	8003208 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	60da      	str	r2, [r3, #12]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
	...

08003214 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003214:	b480      	push	{r7}
 8003216:	b08b      	sub	sp, #44	@ 0x2c
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800321e:	2300      	movs	r3, #0
 8003220:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003226:	e169      	b.n	80034fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003228:	2201      	movs	r2, #1
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	429a      	cmp	r2, r3
 8003242:	f040 8158 	bne.w	80034f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4a9a      	ldr	r2, [pc, #616]	@ (80034b4 <HAL_GPIO_Init+0x2a0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d05e      	beq.n	800330e <HAL_GPIO_Init+0xfa>
 8003250:	4a98      	ldr	r2, [pc, #608]	@ (80034b4 <HAL_GPIO_Init+0x2a0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d875      	bhi.n	8003342 <HAL_GPIO_Init+0x12e>
 8003256:	4a98      	ldr	r2, [pc, #608]	@ (80034b8 <HAL_GPIO_Init+0x2a4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d058      	beq.n	800330e <HAL_GPIO_Init+0xfa>
 800325c:	4a96      	ldr	r2, [pc, #600]	@ (80034b8 <HAL_GPIO_Init+0x2a4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d86f      	bhi.n	8003342 <HAL_GPIO_Init+0x12e>
 8003262:	4a96      	ldr	r2, [pc, #600]	@ (80034bc <HAL_GPIO_Init+0x2a8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d052      	beq.n	800330e <HAL_GPIO_Init+0xfa>
 8003268:	4a94      	ldr	r2, [pc, #592]	@ (80034bc <HAL_GPIO_Init+0x2a8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d869      	bhi.n	8003342 <HAL_GPIO_Init+0x12e>
 800326e:	4a94      	ldr	r2, [pc, #592]	@ (80034c0 <HAL_GPIO_Init+0x2ac>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d04c      	beq.n	800330e <HAL_GPIO_Init+0xfa>
 8003274:	4a92      	ldr	r2, [pc, #584]	@ (80034c0 <HAL_GPIO_Init+0x2ac>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d863      	bhi.n	8003342 <HAL_GPIO_Init+0x12e>
 800327a:	4a92      	ldr	r2, [pc, #584]	@ (80034c4 <HAL_GPIO_Init+0x2b0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d046      	beq.n	800330e <HAL_GPIO_Init+0xfa>
 8003280:	4a90      	ldr	r2, [pc, #576]	@ (80034c4 <HAL_GPIO_Init+0x2b0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d85d      	bhi.n	8003342 <HAL_GPIO_Init+0x12e>
 8003286:	2b12      	cmp	r3, #18
 8003288:	d82a      	bhi.n	80032e0 <HAL_GPIO_Init+0xcc>
 800328a:	2b12      	cmp	r3, #18
 800328c:	d859      	bhi.n	8003342 <HAL_GPIO_Init+0x12e>
 800328e:	a201      	add	r2, pc, #4	@ (adr r2, 8003294 <HAL_GPIO_Init+0x80>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	0800330f 	.word	0x0800330f
 8003298:	080032e9 	.word	0x080032e9
 800329c:	080032fb 	.word	0x080032fb
 80032a0:	0800333d 	.word	0x0800333d
 80032a4:	08003343 	.word	0x08003343
 80032a8:	08003343 	.word	0x08003343
 80032ac:	08003343 	.word	0x08003343
 80032b0:	08003343 	.word	0x08003343
 80032b4:	08003343 	.word	0x08003343
 80032b8:	08003343 	.word	0x08003343
 80032bc:	08003343 	.word	0x08003343
 80032c0:	08003343 	.word	0x08003343
 80032c4:	08003343 	.word	0x08003343
 80032c8:	08003343 	.word	0x08003343
 80032cc:	08003343 	.word	0x08003343
 80032d0:	08003343 	.word	0x08003343
 80032d4:	08003343 	.word	0x08003343
 80032d8:	080032f1 	.word	0x080032f1
 80032dc:	08003305 	.word	0x08003305
 80032e0:	4a79      	ldr	r2, [pc, #484]	@ (80034c8 <HAL_GPIO_Init+0x2b4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032e6:	e02c      	b.n	8003342 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	623b      	str	r3, [r7, #32]
          break;
 80032ee:	e029      	b.n	8003344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	3304      	adds	r3, #4
 80032f6:	623b      	str	r3, [r7, #32]
          break;
 80032f8:	e024      	b.n	8003344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	3308      	adds	r3, #8
 8003300:	623b      	str	r3, [r7, #32]
          break;
 8003302:	e01f      	b.n	8003344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	330c      	adds	r3, #12
 800330a:	623b      	str	r3, [r7, #32]
          break;
 800330c:	e01a      	b.n	8003344 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003316:	2304      	movs	r3, #4
 8003318:	623b      	str	r3, [r7, #32]
          break;
 800331a:	e013      	b.n	8003344 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003324:	2308      	movs	r3, #8
 8003326:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	611a      	str	r2, [r3, #16]
          break;
 800332e:	e009      	b.n	8003344 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003330:	2308      	movs	r3, #8
 8003332:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	615a      	str	r2, [r3, #20]
          break;
 800333a:	e003      	b.n	8003344 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800333c:	2300      	movs	r3, #0
 800333e:	623b      	str	r3, [r7, #32]
          break;
 8003340:	e000      	b.n	8003344 <HAL_GPIO_Init+0x130>
          break;
 8003342:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2bff      	cmp	r3, #255	@ 0xff
 8003348:	d801      	bhi.n	800334e <HAL_GPIO_Init+0x13a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	e001      	b.n	8003352 <HAL_GPIO_Init+0x13e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3304      	adds	r3, #4
 8003352:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2bff      	cmp	r3, #255	@ 0xff
 8003358:	d802      	bhi.n	8003360 <HAL_GPIO_Init+0x14c>
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	e002      	b.n	8003366 <HAL_GPIO_Init+0x152>
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	3b08      	subs	r3, #8
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	210f      	movs	r1, #15
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	401a      	ands	r2, r3
 8003378:	6a39      	ldr	r1, [r7, #32]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	431a      	orrs	r2, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80b1 	beq.w	80034f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003394:	4b4d      	ldr	r3, [pc, #308]	@ (80034cc <HAL_GPIO_Init+0x2b8>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	4a4c      	ldr	r2, [pc, #304]	@ (80034cc <HAL_GPIO_Init+0x2b8>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6193      	str	r3, [r2, #24]
 80033a0:	4b4a      	ldr	r3, [pc, #296]	@ (80034cc <HAL_GPIO_Init+0x2b8>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033ac:	4a48      	ldr	r2, [pc, #288]	@ (80034d0 <HAL_GPIO_Init+0x2bc>)
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	3302      	adds	r3, #2
 80033b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	220f      	movs	r2, #15
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4013      	ands	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a40      	ldr	r2, [pc, #256]	@ (80034d4 <HAL_GPIO_Init+0x2c0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d013      	beq.n	8003400 <HAL_GPIO_Init+0x1ec>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3f      	ldr	r2, [pc, #252]	@ (80034d8 <HAL_GPIO_Init+0x2c4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00d      	beq.n	80033fc <HAL_GPIO_Init+0x1e8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3e      	ldr	r2, [pc, #248]	@ (80034dc <HAL_GPIO_Init+0x2c8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d007      	beq.n	80033f8 <HAL_GPIO_Init+0x1e4>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3d      	ldr	r2, [pc, #244]	@ (80034e0 <HAL_GPIO_Init+0x2cc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_GPIO_Init+0x1e0>
 80033f0:	2303      	movs	r3, #3
 80033f2:	e006      	b.n	8003402 <HAL_GPIO_Init+0x1ee>
 80033f4:	2304      	movs	r3, #4
 80033f6:	e004      	b.n	8003402 <HAL_GPIO_Init+0x1ee>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e002      	b.n	8003402 <HAL_GPIO_Init+0x1ee>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <HAL_GPIO_Init+0x1ee>
 8003400:	2300      	movs	r3, #0
 8003402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003404:	f002 0203 	and.w	r2, r2, #3
 8003408:	0092      	lsls	r2, r2, #2
 800340a:	4093      	lsls	r3, r2
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003412:	492f      	ldr	r1, [pc, #188]	@ (80034d0 <HAL_GPIO_Init+0x2bc>)
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3302      	adds	r3, #2
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d006      	beq.n	800343a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800342c:	4b2d      	ldr	r3, [pc, #180]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	492c      	ldr	r1, [pc, #176]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	608b      	str	r3, [r1, #8]
 8003438:	e006      	b.n	8003448 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800343a:	4b2a      	ldr	r3, [pc, #168]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	43db      	mvns	r3, r3
 8003442:	4928      	ldr	r1, [pc, #160]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 8003444:	4013      	ands	r3, r2
 8003446:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d006      	beq.n	8003462 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003454:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	4922      	ldr	r1, [pc, #136]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	4313      	orrs	r3, r2
 800345e:	60cb      	str	r3, [r1, #12]
 8003460:	e006      	b.n	8003470 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003462:	4b20      	ldr	r3, [pc, #128]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	43db      	mvns	r3, r3
 800346a:	491e      	ldr	r1, [pc, #120]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 800346c:	4013      	ands	r3, r2
 800346e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800347c:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	4918      	ldr	r1, [pc, #96]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
 8003488:	e006      	b.n	8003498 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800348a:	4b16      	ldr	r3, [pc, #88]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	43db      	mvns	r3, r3
 8003492:	4914      	ldr	r1, [pc, #80]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 8003494:	4013      	ands	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d021      	beq.n	80034e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034a4:	4b0f      	ldr	r3, [pc, #60]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	490e      	ldr	r1, [pc, #56]	@ (80034e4 <HAL_GPIO_Init+0x2d0>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	600b      	str	r3, [r1, #0]
 80034b0:	e021      	b.n	80034f6 <HAL_GPIO_Init+0x2e2>
 80034b2:	bf00      	nop
 80034b4:	10320000 	.word	0x10320000
 80034b8:	10310000 	.word	0x10310000
 80034bc:	10220000 	.word	0x10220000
 80034c0:	10210000 	.word	0x10210000
 80034c4:	10120000 	.word	0x10120000
 80034c8:	10110000 	.word	0x10110000
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40010800 	.word	0x40010800
 80034d8:	40010c00 	.word	0x40010c00
 80034dc:	40011000 	.word	0x40011000
 80034e0:	40011400 	.word	0x40011400
 80034e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <HAL_GPIO_Init+0x304>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	4909      	ldr	r1, [pc, #36]	@ (8003518 <HAL_GPIO_Init+0x304>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	3301      	adds	r3, #1
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	fa22 f303 	lsr.w	r3, r2, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	f47f ae8e 	bne.w	8003228 <HAL_GPIO_Init+0x14>
  }
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	372c      	adds	r7, #44	@ 0x2c
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	40010400 	.word	0x40010400

0800351c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
 8003528:	4613      	mov	r3, r2
 800352a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800352c:	787b      	ldrb	r3, [r7, #1]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003538:	e003      	b.n	8003542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800353a:	887b      	ldrh	r3, [r7, #2]
 800353c:	041a      	lsls	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	611a      	str	r2, [r3, #16]
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003556:	4b08      	ldr	r3, [pc, #32]	@ (8003578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003562:	4a05      	ldr	r2, [pc, #20]	@ (8003578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f806 	bl	800357c <HAL_GPIO_EXTI_Callback>
  }
}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40010400 	.word	0x40010400

0800357c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e12b      	b.n	80037fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fe fbfa 	bl	8001db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2224      	movs	r2, #36	@ 0x24
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035f4:	f001 fbca 	bl	8004d8c <HAL_RCC_GetPCLK1Freq>
 80035f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4a81      	ldr	r2, [pc, #516]	@ (8003804 <HAL_I2C_Init+0x274>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d807      	bhi.n	8003614 <HAL_I2C_Init+0x84>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a80      	ldr	r2, [pc, #512]	@ (8003808 <HAL_I2C_Init+0x278>)
 8003608:	4293      	cmp	r3, r2
 800360a:	bf94      	ite	ls
 800360c:	2301      	movls	r3, #1
 800360e:	2300      	movhi	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	e006      	b.n	8003622 <HAL_I2C_Init+0x92>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4a7d      	ldr	r2, [pc, #500]	@ (800380c <HAL_I2C_Init+0x27c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	bf94      	ite	ls
 800361c:	2301      	movls	r3, #1
 800361e:	2300      	movhi	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e0e7      	b.n	80037fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4a78      	ldr	r2, [pc, #480]	@ (8003810 <HAL_I2C_Init+0x280>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	0c9b      	lsrs	r3, r3, #18
 8003634:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a6a      	ldr	r2, [pc, #424]	@ (8003804 <HAL_I2C_Init+0x274>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d802      	bhi.n	8003664 <HAL_I2C_Init+0xd4>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	3301      	adds	r3, #1
 8003662:	e009      	b.n	8003678 <HAL_I2C_Init+0xe8>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	4a69      	ldr	r2, [pc, #420]	@ (8003814 <HAL_I2C_Init+0x284>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	3301      	adds	r3, #1
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	430b      	orrs	r3, r1
 800367e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800368a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	495c      	ldr	r1, [pc, #368]	@ (8003804 <HAL_I2C_Init+0x274>)
 8003694:	428b      	cmp	r3, r1
 8003696:	d819      	bhi.n	80036cc <HAL_I2C_Init+0x13c>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1e59      	subs	r1, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036a6:	1c59      	adds	r1, r3, #1
 80036a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036ac:	400b      	ands	r3, r1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_I2C_Init+0x138>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1e59      	subs	r1, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80036c0:	3301      	adds	r3, #1
 80036c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c6:	e051      	b.n	800376c <HAL_I2C_Init+0x1dc>
 80036c8:	2304      	movs	r3, #4
 80036ca:	e04f      	b.n	800376c <HAL_I2C_Init+0x1dc>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d111      	bne.n	80036f8 <HAL_I2C_Init+0x168>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1e58      	subs	r0, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	440b      	add	r3, r1
 80036e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	e012      	b.n	800371e <HAL_I2C_Init+0x18e>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	0099      	lsls	r1, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	fbb0 f3f3 	udiv	r3, r0, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Init+0x196>
 8003722:	2301      	movs	r3, #1
 8003724:	e022      	b.n	800376c <HAL_I2C_Init+0x1dc>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10e      	bne.n	800374c <HAL_I2C_Init+0x1bc>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1e58      	subs	r0, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	440b      	add	r3, r1
 800373c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003740:	3301      	adds	r3, #1
 8003742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800374a:	e00f      	b.n	800376c <HAL_I2C_Init+0x1dc>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1e58      	subs	r0, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	0099      	lsls	r1, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003762:	3301      	adds	r3, #1
 8003764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003768:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	6809      	ldr	r1, [r1, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800379a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6911      	ldr	r1, [r2, #16]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68d2      	ldr	r2, [r2, #12]
 80037a6:	4311      	orrs	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	000186a0 	.word	0x000186a0
 8003808:	001e847f 	.word	0x001e847f
 800380c:	003d08ff 	.word	0x003d08ff
 8003810:	431bde83 	.word	0x431bde83
 8003814:	10624dd3 	.word	0x10624dd3

08003818 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	461a      	mov	r2, r3
 8003824:	460b      	mov	r3, r1
 8003826:	817b      	strh	r3, [r7, #10]
 8003828:	4613      	mov	r3, r2
 800382a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800382c:	f7fe fc1c 	bl	8002068 <HAL_GetTick>
 8003830:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b20      	cmp	r3, #32
 800383c:	f040 80e0 	bne.w	8003a00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2319      	movs	r3, #25
 8003846:	2201      	movs	r2, #1
 8003848:	4970      	ldr	r1, [pc, #448]	@ (8003a0c <HAL_I2C_Master_Transmit+0x1f4>)
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fc9e 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	e0d3      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_I2C_Master_Transmit+0x50>
 8003864:	2302      	movs	r3, #2
 8003866:	e0cc      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b01      	cmp	r3, #1
 800387c:	d007      	beq.n	800388e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800389c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2221      	movs	r2, #33	@ 0x21
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2210      	movs	r2, #16
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	893a      	ldrh	r2, [r7, #8]
 80038be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a50      	ldr	r2, [pc, #320]	@ (8003a10 <HAL_I2C_Master_Transmit+0x1f8>)
 80038ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038d0:	8979      	ldrh	r1, [r7, #10]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6a3a      	ldr	r2, [r7, #32]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fb08 	bl	8003eec <I2C_MasterRequestWrite>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e08d      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038fc:	e066      	b.n	80039cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	6a39      	ldr	r1, [r7, #32]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fd5c 	bl	80043c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00d      	beq.n	800392a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	2b04      	cmp	r3, #4
 8003914:	d107      	bne.n	8003926 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003924:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e06b      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	781a      	ldrb	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b04      	cmp	r3, #4
 8003966:	d11b      	bne.n	80039a0 <HAL_I2C_Master_Transmit+0x188>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396c:	2b00      	cmp	r3, #0
 800396e:	d017      	beq.n	80039a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	781a      	ldrb	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	6a39      	ldr	r1, [r7, #32]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fd53 	bl	8004450 <I2C_WaitOnBTFFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d107      	bne.n	80039c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e01a      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d194      	bne.n	80038fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e000      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	00100002 	.word	0x00100002
 8003a10:	ffff0000 	.word	0xffff0000

08003a14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08c      	sub	sp, #48	@ 0x30
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	607a      	str	r2, [r7, #4]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	460b      	mov	r3, r1
 8003a22:	817b      	strh	r3, [r7, #10]
 8003a24:	4613      	mov	r3, r2
 8003a26:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7fe fb1c 	bl	8002068 <HAL_GetTick>
 8003a30:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	f040 824b 	bne.w	8003ed6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2319      	movs	r3, #25
 8003a46:	2201      	movs	r2, #1
 8003a48:	497f      	ldr	r1, [pc, #508]	@ (8003c48 <HAL_I2C_Master_Receive+0x234>)
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 fb9e 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
 8003a58:	e23e      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_I2C_Master_Receive+0x54>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e237      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d007      	beq.n	8003a8e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2222      	movs	r2, #34	@ 0x22
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	893a      	ldrh	r2, [r7, #8]
 8003abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a5f      	ldr	r2, [pc, #380]	@ (8003c4c <HAL_I2C_Master_Receive+0x238>)
 8003ace:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ad0:	8979      	ldrh	r1, [r7, #10]
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fa8a 	bl	8003ff0 <I2C_MasterRequestRead>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e1f8      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d113      	bne.n	8003b16 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	e1cc      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d11e      	bne.n	8003b5c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b2e:	b672      	cpsid	i
}
 8003b30:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b58:	b662      	cpsie	i
}
 8003b5a:	e035      	b.n	8003bc8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d11e      	bne.n	8003ba2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b74:	b672      	cpsid	i
}
 8003b76:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b9e:	b662      	cpsie	i
}
 8003ba0:	e012      	b.n	8003bc8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003bc8:	e172      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	f200 811f 	bhi.w	8003e12 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d123      	bne.n	8003c24 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fc7d 	bl	80044e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e173      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c22:	e145      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d152      	bne.n	8003cd2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c32:	2200      	movs	r2, #0
 8003c34:	4906      	ldr	r1, [pc, #24]	@ (8003c50 <HAL_I2C_Master_Receive+0x23c>)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 faa8 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e148      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
 8003c46:	bf00      	nop
 8003c48:	00100002 	.word	0x00100002
 8003c4c:	ffff0000 	.word	0xffff0000
 8003c50:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c54:	b672      	cpsid	i
}
 8003c56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c9a:	b662      	cpsie	i
}
 8003c9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cd0:	e0ee      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd8:	2200      	movs	r2, #0
 8003cda:	4981      	ldr	r1, [pc, #516]	@ (8003ee0 <HAL_I2C_Master_Receive+0x4cc>)
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fa55 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0f5      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cfc:	b672      	cpsid	i
}
 8003cfe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d32:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee4 <HAL_I2C_Master_Receive+0x4d0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	08db      	lsrs	r3, r3, #3
 8003d38:	4a6b      	ldr	r2, [pc, #428]	@ (8003ee8 <HAL_I2C_Master_Receive+0x4d4>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	0a1a      	lsrs	r2, r3, #8
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	00da      	lsls	r2, r3, #3
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d118      	bne.n	8003d8a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d7a:	b662      	cpsie	i
}
 8003d7c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0a6      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d1d9      	bne.n	8003d4c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dda:	b662      	cpsie	i
}
 8003ddc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e10:	e04e      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fb62 	bl	80044e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e058      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d124      	bne.n	8003eb0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d107      	bne.n	8003e7e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e7c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f47f ae88 	bne.w	8003bca <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3728      	adds	r7, #40	@ 0x28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	00010004 	.word	0x00010004
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	14f8b589 	.word	0x14f8b589

08003eec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d006      	beq.n	8003f16 <I2C_MasterRequestWrite+0x2a>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d003      	beq.n	8003f16 <I2C_MasterRequestWrite+0x2a>
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f14:	d108      	bne.n	8003f28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e00b      	b.n	8003f40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	2b12      	cmp	r3, #18
 8003f2e:	d107      	bne.n	8003f40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f91d 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f66:	d103      	bne.n	8003f70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e035      	b.n	8003fe0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f7c:	d108      	bne.n	8003f90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f7e:	897b      	ldrh	r3, [r7, #10]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f8c:	611a      	str	r2, [r3, #16]
 8003f8e:	e01b      	b.n	8003fc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f90:	897b      	ldrh	r3, [r7, #10]
 8003f92:	11db      	asrs	r3, r3, #7
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0306 	and.w	r3, r3, #6
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f063 030f 	orn	r3, r3, #15
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	490e      	ldr	r1, [pc, #56]	@ (8003fe8 <I2C_MasterRequestWrite+0xfc>)
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f966 	bl	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e010      	b.n	8003fe0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fbe:	897b      	ldrh	r3, [r7, #10]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	4907      	ldr	r1, [pc, #28]	@ (8003fec <I2C_MasterRequestWrite+0x100>)
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f956 	bl	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	00010008 	.word	0x00010008
 8003fec:	00010002 	.word	0x00010002

08003ff0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004014:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b08      	cmp	r3, #8
 800401a:	d006      	beq.n	800402a <I2C_MasterRequestRead+0x3a>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d003      	beq.n	800402a <I2C_MasterRequestRead+0x3a>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004028:	d108      	bne.n	800403c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e00b      	b.n	8004054 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004040:	2b11      	cmp	r3, #17
 8004042:	d107      	bne.n	8004054 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004052:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f893 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00d      	beq.n	8004088 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800407a:	d103      	bne.n	8004084 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e079      	b.n	800417c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004090:	d108      	bne.n	80040a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004092:	897b      	ldrh	r3, [r7, #10]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	b2da      	uxtb	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	611a      	str	r2, [r3, #16]
 80040a2:	e05f      	b.n	8004164 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040a4:	897b      	ldrh	r3, [r7, #10]
 80040a6:	11db      	asrs	r3, r3, #7
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 0306 	and.w	r3, r3, #6
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f063 030f 	orn	r3, r3, #15
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4930      	ldr	r1, [pc, #192]	@ (8004184 <I2C_MasterRequestRead+0x194>)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f8dc 	bl	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e054      	b.n	800417c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040d2:	897b      	ldrh	r3, [r7, #10]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4929      	ldr	r1, [pc, #164]	@ (8004188 <I2C_MasterRequestRead+0x198>)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f8cc 	bl	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e044      	b.n	800417c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f2:	2300      	movs	r3, #0
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004116:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f831 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00d      	beq.n	800414c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800413e:	d103      	bne.n	8004148 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004146:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e017      	b.n	800417c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800414c:	897b      	ldrh	r3, [r7, #10]
 800414e:	11db      	asrs	r3, r3, #7
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f003 0306 	and.w	r3, r3, #6
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f063 030e 	orn	r3, r3, #14
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	4907      	ldr	r1, [pc, #28]	@ (8004188 <I2C_MasterRequestRead+0x198>)
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f888 	bl	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	00010008 	.word	0x00010008
 8004188:	00010002 	.word	0x00010002

0800418c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800419c:	e048      	b.n	8004230 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d044      	beq.n	8004230 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a6:	f7fd ff5f 	bl	8002068 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d302      	bcc.n	80041bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d139      	bne.n	8004230 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	0c1b      	lsrs	r3, r3, #16
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d10d      	bne.n	80041e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	43da      	mvns	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4013      	ands	r3, r2
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	e00c      	b.n	80041fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	43da      	mvns	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4013      	ands	r3, r2
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d116      	bne.n	8004230 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	f043 0220 	orr.w	r2, r3, #32
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e023      	b.n	8004278 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	0c1b      	lsrs	r3, r3, #16
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d10d      	bne.n	8004256 <I2C_WaitOnFlagUntilTimeout+0xca>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	43da      	mvns	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4013      	ands	r3, r2
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	e00c      	b.n	8004270 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	43da      	mvns	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	429a      	cmp	r2, r3
 8004274:	d093      	beq.n	800419e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800428e:	e071      	b.n	8004374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429e:	d123      	bne.n	80042e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	f043 0204 	orr.w	r2, r3, #4
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e067      	b.n	80043b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d041      	beq.n	8004374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f0:	f7fd feba 	bl	8002068 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d302      	bcc.n	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d136      	bne.n	8004374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	d10c      	bne.n	800432a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	43da      	mvns	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4013      	ands	r3, r2
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	bf14      	ite	ne
 8004322:	2301      	movne	r3, #1
 8004324:	2300      	moveq	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	e00b      	b.n	8004342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	43da      	mvns	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d016      	beq.n	8004374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e021      	b.n	80043b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	0c1b      	lsrs	r3, r3, #16
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10c      	bne.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	43da      	mvns	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4013      	ands	r3, r2
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf14      	ite	ne
 8004390:	2301      	movne	r3, #1
 8004392:	2300      	moveq	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	e00b      	b.n	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	43da      	mvns	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4013      	ands	r3, r2
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	bf14      	ite	ne
 80043aa:	2301      	movne	r3, #1
 80043ac:	2300      	moveq	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f47f af6d 	bne.w	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043cc:	e034      	b.n	8004438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f8e3 	bl	800459a <I2C_IsAcknowledgeFailed>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e034      	b.n	8004448 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d028      	beq.n	8004438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e6:	f7fd fe3f 	bl	8002068 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d302      	bcc.n	80043fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d11d      	bne.n	8004438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004406:	2b80      	cmp	r3, #128	@ 0x80
 8004408:	d016      	beq.n	8004438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	f043 0220 	orr.w	r2, r3, #32
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e007      	b.n	8004448 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004442:	2b80      	cmp	r3, #128	@ 0x80
 8004444:	d1c3      	bne.n	80043ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800445c:	e034      	b.n	80044c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f89b 	bl	800459a <I2C_IsAcknowledgeFailed>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e034      	b.n	80044d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d028      	beq.n	80044c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004476:	f7fd fdf7 	bl	8002068 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	429a      	cmp	r2, r3
 8004484:	d302      	bcc.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d11d      	bne.n	80044c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b04      	cmp	r3, #4
 8004498:	d016      	beq.n	80044c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	f043 0220 	orr.w	r2, r3, #32
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e007      	b.n	80044d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d1c3      	bne.n	800445e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044ec:	e049      	b.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d119      	bne.n	8004530 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0210 	mvn.w	r2, #16
 8004504:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e030      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004530:	f7fd fd9a 	bl	8002068 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	d302      	bcc.n	8004546 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d11d      	bne.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004550:	2b40      	cmp	r3, #64	@ 0x40
 8004552:	d016      	beq.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	f043 0220 	orr.w	r2, r3, #32
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e007      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458c:	2b40      	cmp	r3, #64	@ 0x40
 800458e:	d1ae      	bne.n	80044ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045b0:	d11b      	bne.n	80045ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	f043 0204 	orr.w	r2, r3, #4
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr
	...

080045f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e272      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8087 	beq.w	8004726 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004618:	4b92      	ldr	r3, [pc, #584]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 030c 	and.w	r3, r3, #12
 8004620:	2b04      	cmp	r3, #4
 8004622:	d00c      	beq.n	800463e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004624:	4b8f      	ldr	r3, [pc, #572]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d112      	bne.n	8004656 <HAL_RCC_OscConfig+0x5e>
 8004630:	4b8c      	ldr	r3, [pc, #560]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800463c:	d10b      	bne.n	8004656 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463e:	4b89      	ldr	r3, [pc, #548]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d06c      	beq.n	8004724 <HAL_RCC_OscConfig+0x12c>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d168      	bne.n	8004724 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e24c      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800465e:	d106      	bne.n	800466e <HAL_RCC_OscConfig+0x76>
 8004660:	4b80      	ldr	r3, [pc, #512]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a7f      	ldr	r2, [pc, #508]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004666:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	e02e      	b.n	80046cc <HAL_RCC_OscConfig+0xd4>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0x98>
 8004676:	4b7b      	ldr	r3, [pc, #492]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a7a      	ldr	r2, [pc, #488]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 800467c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	4b78      	ldr	r3, [pc, #480]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a77      	ldr	r2, [pc, #476]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004688:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e01d      	b.n	80046cc <HAL_RCC_OscConfig+0xd4>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0xbc>
 800469a:	4b72      	ldr	r3, [pc, #456]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a71      	ldr	r2, [pc, #452]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 80046a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	4b6f      	ldr	r3, [pc, #444]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a6e      	ldr	r2, [pc, #440]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_OscConfig+0xd4>
 80046b4:	4b6b      	ldr	r3, [pc, #428]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a6a      	ldr	r2, [pc, #424]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 80046ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b68      	ldr	r3, [pc, #416]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a67      	ldr	r2, [pc, #412]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 80046c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d013      	beq.n	80046fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d4:	f7fd fcc8 	bl	8002068 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046dc:	f7fd fcc4 	bl	8002068 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b64      	cmp	r3, #100	@ 0x64
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e200      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0xe4>
 80046fa:	e014      	b.n	8004726 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fd fcb4 	bl	8002068 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004704:	f7fd fcb0 	bl	8002068 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	@ 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e1ec      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004716:	4b53      	ldr	r3, [pc, #332]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x10c>
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d063      	beq.n	80047fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004732:	4b4c      	ldr	r3, [pc, #304]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800473e:	4b49      	ldr	r3, [pc, #292]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 030c 	and.w	r3, r3, #12
 8004746:	2b08      	cmp	r3, #8
 8004748:	d11c      	bne.n	8004784 <HAL_RCC_OscConfig+0x18c>
 800474a:	4b46      	ldr	r3, [pc, #280]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d116      	bne.n	8004784 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004756:	4b43      	ldr	r3, [pc, #268]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_RCC_OscConfig+0x176>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d001      	beq.n	800476e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e1c0      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476e:	4b3d      	ldr	r3, [pc, #244]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4939      	ldr	r1, [pc, #228]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004782:	e03a      	b.n	80047fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800478c:	4b36      	ldr	r3, [pc, #216]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7fd fc69 	bl	8002068 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800479a:	f7fd fc65 	bl	8002068 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e1a1      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4927      	ldr	r1, [pc, #156]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	600b      	str	r3, [r1, #0]
 80047cc:	e015      	b.n	80047fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ce:	4b26      	ldr	r3, [pc, #152]	@ (8004868 <HAL_RCC_OscConfig+0x270>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fd fc48 	bl	8002068 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047dc:	f7fd fc44 	bl	8002068 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e180      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d03a      	beq.n	800487c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d019      	beq.n	8004842 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800480e:	4b17      	ldr	r3, [pc, #92]	@ (800486c <HAL_RCC_OscConfig+0x274>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004814:	f7fd fc28 	bl	8002068 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800481c:	f7fd fc24 	bl	8002068 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e160      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482e:	4b0d      	ldr	r3, [pc, #52]	@ (8004864 <HAL_RCC_OscConfig+0x26c>)
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f0      	beq.n	800481c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800483a:	2001      	movs	r0, #1
 800483c:	f000 face 	bl	8004ddc <RCC_Delay>
 8004840:	e01c      	b.n	800487c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004842:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <HAL_RCC_OscConfig+0x274>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004848:	f7fd fc0e 	bl	8002068 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800484e:	e00f      	b.n	8004870 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004850:	f7fd fc0a 	bl	8002068 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d908      	bls.n	8004870 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e146      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	42420000 	.word	0x42420000
 800486c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004870:	4b92      	ldr	r3, [pc, #584]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e9      	bne.n	8004850 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80a6 	beq.w	80049d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488e:	4b8b      	ldr	r3, [pc, #556]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10d      	bne.n	80048b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489a:	4b88      	ldr	r3, [pc, #544]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	4a87      	ldr	r2, [pc, #540]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a4:	61d3      	str	r3, [r2, #28]
 80048a6:	4b85      	ldr	r3, [pc, #532]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b6:	4b82      	ldr	r3, [pc, #520]	@ (8004ac0 <HAL_RCC_OscConfig+0x4c8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d118      	bne.n	80048f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ac0 <HAL_RCC_OscConfig+0x4c8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ac0 <HAL_RCC_OscConfig+0x4c8>)
 80048c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ce:	f7fd fbcb 	bl	8002068 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d6:	f7fd fbc7 	bl	8002068 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b64      	cmp	r3, #100	@ 0x64
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e103      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e8:	4b75      	ldr	r3, [pc, #468]	@ (8004ac0 <HAL_RCC_OscConfig+0x4c8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d106      	bne.n	800490a <HAL_RCC_OscConfig+0x312>
 80048fc:	4b6f      	ldr	r3, [pc, #444]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	4a6e      	ldr	r2, [pc, #440]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	6213      	str	r3, [r2, #32]
 8004908:	e02d      	b.n	8004966 <HAL_RCC_OscConfig+0x36e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10c      	bne.n	800492c <HAL_RCC_OscConfig+0x334>
 8004912:	4b6a      	ldr	r3, [pc, #424]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	4a69      	ldr	r2, [pc, #420]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	6213      	str	r3, [r2, #32]
 800491e:	4b67      	ldr	r3, [pc, #412]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	4a66      	ldr	r2, [pc, #408]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004924:	f023 0304 	bic.w	r3, r3, #4
 8004928:	6213      	str	r3, [r2, #32]
 800492a:	e01c      	b.n	8004966 <HAL_RCC_OscConfig+0x36e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	2b05      	cmp	r3, #5
 8004932:	d10c      	bne.n	800494e <HAL_RCC_OscConfig+0x356>
 8004934:	4b61      	ldr	r3, [pc, #388]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	4a60      	ldr	r2, [pc, #384]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 800493a:	f043 0304 	orr.w	r3, r3, #4
 800493e:	6213      	str	r3, [r2, #32]
 8004940:	4b5e      	ldr	r3, [pc, #376]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	4a5d      	ldr	r2, [pc, #372]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	6213      	str	r3, [r2, #32]
 800494c:	e00b      	b.n	8004966 <HAL_RCC_OscConfig+0x36e>
 800494e:	4b5b      	ldr	r3, [pc, #364]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	4a5a      	ldr	r2, [pc, #360]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	6213      	str	r3, [r2, #32]
 800495a:	4b58      	ldr	r3, [pc, #352]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	4a57      	ldr	r2, [pc, #348]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004960:	f023 0304 	bic.w	r3, r3, #4
 8004964:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d015      	beq.n	800499a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496e:	f7fd fb7b 	bl	8002068 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004974:	e00a      	b.n	800498c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004976:	f7fd fb77 	bl	8002068 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004984:	4293      	cmp	r3, r2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e0b1      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498c:	4b4b      	ldr	r3, [pc, #300]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0ee      	beq.n	8004976 <HAL_RCC_OscConfig+0x37e>
 8004998:	e014      	b.n	80049c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499a:	f7fd fb65 	bl	8002068 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a0:	e00a      	b.n	80049b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a2:	f7fd fb61 	bl	8002068 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e09b      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b8:	4b40      	ldr	r3, [pc, #256]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1ee      	bne.n	80049a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d105      	bne.n	80049d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ca:	4b3c      	ldr	r3, [pc, #240]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	4a3b      	ldr	r2, [pc, #236]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 80049d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 8087 	beq.w	8004aee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049e0:	4b36      	ldr	r3, [pc, #216]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 030c 	and.w	r3, r3, #12
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d061      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d146      	bne.n	8004a82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f4:	4b33      	ldr	r3, [pc, #204]	@ (8004ac4 <HAL_RCC_OscConfig+0x4cc>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fa:	f7fd fb35 	bl	8002068 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a02:	f7fd fb31 	bl	8002068 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e06d      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a14:	4b29      	ldr	r3, [pc, #164]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1f0      	bne.n	8004a02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a28:	d108      	bne.n	8004a3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a2a:	4b24      	ldr	r3, [pc, #144]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	4921      	ldr	r1, [pc, #132]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a19      	ldr	r1, [r3, #32]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	491b      	ldr	r1, [pc, #108]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a54:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac4 <HAL_RCC_OscConfig+0x4cc>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5a:	f7fd fb05 	bl	8002068 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a62:	f7fd fb01 	bl	8002068 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e03d      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a74:	4b11      	ldr	r3, [pc, #68]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f0      	beq.n	8004a62 <HAL_RCC_OscConfig+0x46a>
 8004a80:	e035      	b.n	8004aee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a82:	4b10      	ldr	r3, [pc, #64]	@ (8004ac4 <HAL_RCC_OscConfig+0x4cc>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a88:	f7fd faee 	bl	8002068 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a90:	f7fd faea 	bl	8002068 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e026      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa2:	4b06      	ldr	r3, [pc, #24]	@ (8004abc <HAL_RCC_OscConfig+0x4c4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0x498>
 8004aae:	e01e      	b.n	8004aee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d107      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e019      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8004af8 <HAL_RCC_OscConfig+0x500>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d106      	bne.n	8004aea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d001      	beq.n	8004aee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40021000 	.word	0x40021000

08004afc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0d0      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b10:	4b6a      	ldr	r3, [pc, #424]	@ (8004cbc <HAL_RCC_ClockConfig+0x1c0>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d910      	bls.n	8004b40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b67      	ldr	r3, [pc, #412]	@ (8004cbc <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f023 0207 	bic.w	r2, r3, #7
 8004b26:	4965      	ldr	r1, [pc, #404]	@ (8004cbc <HAL_RCC_ClockConfig+0x1c0>)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2e:	4b63      	ldr	r3, [pc, #396]	@ (8004cbc <HAL_RCC_ClockConfig+0x1c0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0b8      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d020      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b58:	4b59      	ldr	r3, [pc, #356]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4a58      	ldr	r2, [pc, #352]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b70:	4b53      	ldr	r3, [pc, #332]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a52      	ldr	r2, [pc, #328]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b76:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004b7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b7c:	4b50      	ldr	r3, [pc, #320]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	494d      	ldr	r1, [pc, #308]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d040      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba2:	4b47      	ldr	r3, [pc, #284]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d115      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e07f      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bba:	4b41      	ldr	r3, [pc, #260]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e073      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bca:	4b3d      	ldr	r3, [pc, #244]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e06b      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bda:	4b39      	ldr	r3, [pc, #228]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f023 0203 	bic.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4936      	ldr	r1, [pc, #216]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bec:	f7fd fa3c 	bl	8002068 <HAL_GetTick>
 8004bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf4:	f7fd fa38 	bl	8002068 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e053      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f003 020c 	and.w	r2, r3, #12
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d1eb      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b27      	ldr	r3, [pc, #156]	@ (8004cbc <HAL_RCC_ClockConfig+0x1c0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d210      	bcs.n	8004c4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2a:	4b24      	ldr	r3, [pc, #144]	@ (8004cbc <HAL_RCC_ClockConfig+0x1c0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f023 0207 	bic.w	r2, r3, #7
 8004c32:	4922      	ldr	r1, [pc, #136]	@ (8004cbc <HAL_RCC_ClockConfig+0x1c0>)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3a:	4b20      	ldr	r3, [pc, #128]	@ (8004cbc <HAL_RCC_ClockConfig+0x1c0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e032      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c58:	4b19      	ldr	r3, [pc, #100]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4916      	ldr	r1, [pc, #88]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c76:	4b12      	ldr	r3, [pc, #72]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	490e      	ldr	r1, [pc, #56]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c8a:	f000 f821 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	091b      	lsrs	r3, r3, #4
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	490a      	ldr	r1, [pc, #40]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9c:	5ccb      	ldrb	r3, [r1, r3]
 8004c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca2:	4a09      	ldr	r2, [pc, #36]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1cc>)
 8004ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ca6:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <HAL_RCC_ClockConfig+0x1d0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd f99a 	bl	8001fe4 <HAL_InitTick>

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40022000 	.word	0x40022000
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	0800572c 	.word	0x0800572c
 8004cc8:	20000000 	.word	0x20000000
 8004ccc:	20000004 	.word	0x20000004

08004cd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004cea:	4b1e      	ldr	r3, [pc, #120]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d002      	beq.n	8004d00 <HAL_RCC_GetSysClockFreq+0x30>
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d003      	beq.n	8004d06 <HAL_RCC_GetSysClockFreq+0x36>
 8004cfe:	e027      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d00:	4b19      	ldr	r3, [pc, #100]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d02:	613b      	str	r3, [r7, #16]
      break;
 8004d04:	e027      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	0c9b      	lsrs	r3, r3, #18
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	4a17      	ldr	r2, [pc, #92]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d10:	5cd3      	ldrb	r3, [r2, r3]
 8004d12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d010      	beq.n	8004d40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d1e:	4b11      	ldr	r3, [pc, #68]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	0c5b      	lsrs	r3, r3, #17
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	4a11      	ldr	r2, [pc, #68]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d2a:	5cd3      	ldrb	r3, [r2, r3]
 8004d2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a0d      	ldr	r2, [pc, #52]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d32:	fb03 f202 	mul.w	r2, r3, r2
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e004      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a0c      	ldr	r2, [pc, #48]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d44:	fb02 f303 	mul.w	r3, r2, r3
 8004d48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	613b      	str	r3, [r7, #16]
      break;
 8004d4e:	e002      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d50:	4b05      	ldr	r3, [pc, #20]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d52:	613b      	str	r3, [r7, #16]
      break;
 8004d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d56:	693b      	ldr	r3, [r7, #16]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40021000 	.word	0x40021000
 8004d68:	007a1200 	.word	0x007a1200
 8004d6c:	08005744 	.word	0x08005744
 8004d70:	08005754 	.word	0x08005754
 8004d74:	003d0900 	.word	0x003d0900

08004d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d7c:	4b02      	ldr	r3, [pc, #8]	@ (8004d88 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr
 8004d88:	20000000 	.word	0x20000000

08004d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d90:	f7ff fff2 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004d94:	4602      	mov	r2, r0
 8004d96:	4b05      	ldr	r3, [pc, #20]	@ (8004dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	0a1b      	lsrs	r3, r3, #8
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	4903      	ldr	r1, [pc, #12]	@ (8004db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da2:	5ccb      	ldrb	r3, [r1, r3]
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40021000 	.word	0x40021000
 8004db0:	0800573c 	.word	0x0800573c

08004db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004db8:	f7ff ffde 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	4b05      	ldr	r3, [pc, #20]	@ (8004dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	0adb      	lsrs	r3, r3, #11
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	4903      	ldr	r1, [pc, #12]	@ (8004dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dca:	5ccb      	ldrb	r3, [r1, r3]
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	0800573c 	.word	0x0800573c

08004ddc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004de4:	4b0a      	ldr	r3, [pc, #40]	@ (8004e10 <RCC_Delay+0x34>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a0a      	ldr	r2, [pc, #40]	@ (8004e14 <RCC_Delay+0x38>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	0a5b      	lsrs	r3, r3, #9
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	fb02 f303 	mul.w	r3, r2, r3
 8004df6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004df8:	bf00      	nop
  }
  while (Delay --);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1e5a      	subs	r2, r3, #1
 8004dfe:	60fa      	str	r2, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1f9      	bne.n	8004df8 <RCC_Delay+0x1c>
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr
 8004e10:	20000000 	.word	0x20000000
 8004e14:	10624dd3 	.word	0x10624dd3

08004e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d07d      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e34:	2300      	movs	r3, #0
 8004e36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e38:	4b4f      	ldr	r3, [pc, #316]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10d      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e44:	4b4c      	ldr	r3, [pc, #304]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	4a4b      	ldr	r2, [pc, #300]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e4e:	61d3      	str	r3, [r2, #28]
 8004e50:	4b49      	ldr	r3, [pc, #292]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e60:	4b46      	ldr	r3, [pc, #280]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d118      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e6c:	4b43      	ldr	r3, [pc, #268]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a42      	ldr	r2, [pc, #264]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e78:	f7fd f8f6 	bl	8002068 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7e:	e008      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e80:	f7fd f8f2 	bl	8002068 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b64      	cmp	r3, #100	@ 0x64
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e06d      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e92:	4b3a      	ldr	r3, [pc, #232]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e9e:	4b36      	ldr	r3, [pc, #216]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ea6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d02e      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d027      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ec4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ec8:	2201      	movs	r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ed2:	4a29      	ldr	r2, [pc, #164]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d014      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee2:	f7fd f8c1 	bl	8002068 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee8:	e00a      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eea:	f7fd f8bd 	bl	8002068 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e036      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f00:	4b1d      	ldr	r3, [pc, #116]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0ee      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	4917      	ldr	r1, [pc, #92]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d105      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f24:	4b14      	ldr	r3, [pc, #80]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	4a13      	ldr	r2, [pc, #76]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	490b      	ldr	r1, [pc, #44]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f5a:	4b07      	ldr	r3, [pc, #28]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	4904      	ldr	r1, [pc, #16]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40007000 	.word	0x40007000
 8004f80:	42420440 	.word	0x42420440

08004f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e041      	b.n	800501a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fc ff3e 	bl	8001e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f000 f8c2 	bl	800514c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d001      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e03a      	b.n	80050b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <HAL_TIM_Base_Start_IT+0x98>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00e      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x58>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005066:	d009      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x58>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a14      	ldr	r2, [pc, #80]	@ (80050c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x58>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a13      	ldr	r2, [pc, #76]	@ (80050c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d111      	bne.n	80050a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b06      	cmp	r3, #6
 800508c:	d010      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509e:	e007      	b.n	80050b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40000400 	.word	0x40000400
 80050c4:	40000800 	.word	0x40000800

080050c8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80050dc:	2302      	movs	r3, #2
 80050de:	e031      	b.n	8005144 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f898 	bl	8005228 <TIM_SlaveTimer_SetConfig>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e018      	b.n	8005144 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005120:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005130:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a2f      	ldr	r2, [pc, #188]	@ (800521c <TIM_Base_SetConfig+0xd0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00b      	beq.n	800517c <TIM_Base_SetConfig+0x30>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800516a:	d007      	beq.n	800517c <TIM_Base_SetConfig+0x30>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a2c      	ldr	r2, [pc, #176]	@ (8005220 <TIM_Base_SetConfig+0xd4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_Base_SetConfig+0x30>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a2b      	ldr	r2, [pc, #172]	@ (8005224 <TIM_Base_SetConfig+0xd8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d108      	bne.n	800518e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a22      	ldr	r2, [pc, #136]	@ (800521c <TIM_Base_SetConfig+0xd0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00b      	beq.n	80051ae <TIM_Base_SetConfig+0x62>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800519c:	d007      	beq.n	80051ae <TIM_Base_SetConfig+0x62>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005220 <TIM_Base_SetConfig+0xd4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_Base_SetConfig+0x62>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005224 <TIM_Base_SetConfig+0xd8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d108      	bne.n	80051c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a0d      	ldr	r2, [pc, #52]	@ (800521c <TIM_Base_SetConfig+0xd0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f023 0201 	bic.w	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]
  }
}
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr
 800521c:	40012c00 	.word	0x40012c00
 8005220:	40000400 	.word	0x40000400
 8005224:	40000800 	.word	0x40000800

08005228 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005244:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f023 0307 	bic.w	r3, r3, #7
 8005256:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b70      	cmp	r3, #112	@ 0x70
 8005270:	d01a      	beq.n	80052a8 <TIM_SlaveTimer_SetConfig+0x80>
 8005272:	2b70      	cmp	r3, #112	@ 0x70
 8005274:	d860      	bhi.n	8005338 <TIM_SlaveTimer_SetConfig+0x110>
 8005276:	2b60      	cmp	r3, #96	@ 0x60
 8005278:	d054      	beq.n	8005324 <TIM_SlaveTimer_SetConfig+0xfc>
 800527a:	2b60      	cmp	r3, #96	@ 0x60
 800527c:	d85c      	bhi.n	8005338 <TIM_SlaveTimer_SetConfig+0x110>
 800527e:	2b50      	cmp	r3, #80	@ 0x50
 8005280:	d046      	beq.n	8005310 <TIM_SlaveTimer_SetConfig+0xe8>
 8005282:	2b50      	cmp	r3, #80	@ 0x50
 8005284:	d858      	bhi.n	8005338 <TIM_SlaveTimer_SetConfig+0x110>
 8005286:	2b40      	cmp	r3, #64	@ 0x40
 8005288:	d019      	beq.n	80052be <TIM_SlaveTimer_SetConfig+0x96>
 800528a:	2b40      	cmp	r3, #64	@ 0x40
 800528c:	d854      	bhi.n	8005338 <TIM_SlaveTimer_SetConfig+0x110>
 800528e:	2b30      	cmp	r3, #48	@ 0x30
 8005290:	d055      	beq.n	800533e <TIM_SlaveTimer_SetConfig+0x116>
 8005292:	2b30      	cmp	r3, #48	@ 0x30
 8005294:	d850      	bhi.n	8005338 <TIM_SlaveTimer_SetConfig+0x110>
 8005296:	2b20      	cmp	r3, #32
 8005298:	d051      	beq.n	800533e <TIM_SlaveTimer_SetConfig+0x116>
 800529a:	2b20      	cmp	r3, #32
 800529c:	d84c      	bhi.n	8005338 <TIM_SlaveTimer_SetConfig+0x110>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d04d      	beq.n	800533e <TIM_SlaveTimer_SetConfig+0x116>
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d04b      	beq.n	800533e <TIM_SlaveTimer_SetConfig+0x116>
 80052a6:	e047      	b.n	8005338 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80052b8:	f000 f8a4 	bl	8005404 <TIM_ETR_SetConfig>
      break;
 80052bc:	e040      	b.n	8005340 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b05      	cmp	r3, #5
 80052c4:	d101      	bne.n	80052ca <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e03b      	b.n	8005342 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6a1a      	ldr	r2, [r3, #32]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052f0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]
      break;
 800530e:	e017      	b.n	8005340 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800531c:	461a      	mov	r2, r3
 800531e:	f000 f814 	bl	800534a <TIM_TI1_ConfigInputStage>
      break;
 8005322:	e00d      	b.n	8005340 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005330:	461a      	mov	r2, r3
 8005332:	f000 f838 	bl	80053a6 <TIM_TI2_ConfigInputStage>
      break;
 8005336:	e003      	b.n	8005340 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	75fb      	strb	r3, [r7, #23]
      break;
 800533c:	e000      	b.n	8005340 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800533e:	bf00      	nop
  }

  return status;
 8005340:	7dfb      	ldrb	r3, [r7, #23]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800534a:	b480      	push	{r7}
 800534c:	b087      	sub	sp, #28
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	f023 0201 	bic.w	r2, r3, #1
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005374:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 030a 	bic.w	r3, r3, #10
 8005386:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	621a      	str	r2, [r3, #32]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr

080053a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b087      	sub	sp, #28
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	f023 0210 	bic.w	r2, r3, #16
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	031b      	lsls	r3, r3, #12
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	621a      	str	r2, [r3, #32]
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr

08005404 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800541e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	021a      	lsls	r2, r3, #8
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	431a      	orrs	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4313      	orrs	r3, r2
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	609a      	str	r2, [r3, #8]
}
 8005438:	bf00      	nop
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr
	...

08005444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005458:	2302      	movs	r3, #2
 800545a:	e046      	b.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a16      	ldr	r2, [pc, #88]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00e      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a8:	d009      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a12      	ldr	r2, [pc, #72]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a10      	ldr	r2, [pc, #64]	@ (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d10c      	bne.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800

08005500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e042      	b.n	8005598 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fc fc9e 	bl	8001e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2224      	movs	r2, #36	@ 0x24
 8005530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f82b 	bl	80055a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695a      	ldr	r2, [r3, #20]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80055da:	f023 030c 	bic.w	r3, r3, #12
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	430b      	orrs	r3, r1
 80055e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a2c      	ldr	r2, [pc, #176]	@ (80056b4 <UART_SetConfig+0x114>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d103      	bne.n	8005610 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005608:	f7ff fbd4 	bl	8004db4 <HAL_RCC_GetPCLK2Freq>
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	e002      	b.n	8005616 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005610:	f7ff fbbc 	bl	8004d8c <HAL_RCC_GetPCLK1Freq>
 8005614:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009a      	lsls	r2, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	4a22      	ldr	r2, [pc, #136]	@ (80056b8 <UART_SetConfig+0x118>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	0119      	lsls	r1, r3, #4
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009a      	lsls	r2, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	fbb2 f2f3 	udiv	r2, r2, r3
 800564c:	4b1a      	ldr	r3, [pc, #104]	@ (80056b8 <UART_SetConfig+0x118>)
 800564e:	fba3 0302 	umull	r0, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	2064      	movs	r0, #100	@ 0x64
 8005656:	fb00 f303 	mul.w	r3, r0, r3
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	3332      	adds	r3, #50	@ 0x32
 8005660:	4a15      	ldr	r2, [pc, #84]	@ (80056b8 <UART_SetConfig+0x118>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800566c:	4419      	add	r1, r3
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009a      	lsls	r2, r3, #2
 8005678:	441a      	add	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	fbb2 f2f3 	udiv	r2, r2, r3
 8005684:	4b0c      	ldr	r3, [pc, #48]	@ (80056b8 <UART_SetConfig+0x118>)
 8005686:	fba3 0302 	umull	r0, r3, r3, r2
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	2064      	movs	r0, #100	@ 0x64
 800568e:	fb00 f303 	mul.w	r3, r0, r3
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	3332      	adds	r3, #50	@ 0x32
 8005698:	4a07      	ldr	r2, [pc, #28]	@ (80056b8 <UART_SetConfig+0x118>)
 800569a:	fba2 2303 	umull	r2, r3, r2, r3
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	f003 020f 	and.w	r2, r3, #15
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	440a      	add	r2, r1
 80056aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40013800 	.word	0x40013800
 80056b8:	51eb851f 	.word	0x51eb851f

080056bc <memset>:
 80056bc:	4603      	mov	r3, r0
 80056be:	4402      	add	r2, r0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d100      	bne.n	80056c6 <memset+0xa>
 80056c4:	4770      	bx	lr
 80056c6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ca:	e7f9      	b.n	80056c0 <memset+0x4>

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	2600      	movs	r6, #0
 80056d0:	4d0c      	ldr	r5, [pc, #48]	@ (8005704 <__libc_init_array+0x38>)
 80056d2:	4c0d      	ldr	r4, [pc, #52]	@ (8005708 <__libc_init_array+0x3c>)
 80056d4:	1b64      	subs	r4, r4, r5
 80056d6:	10a4      	asrs	r4, r4, #2
 80056d8:	42a6      	cmp	r6, r4
 80056da:	d109      	bne.n	80056f0 <__libc_init_array+0x24>
 80056dc:	f000 f81a 	bl	8005714 <_init>
 80056e0:	2600      	movs	r6, #0
 80056e2:	4d0a      	ldr	r5, [pc, #40]	@ (800570c <__libc_init_array+0x40>)
 80056e4:	4c0a      	ldr	r4, [pc, #40]	@ (8005710 <__libc_init_array+0x44>)
 80056e6:	1b64      	subs	r4, r4, r5
 80056e8:	10a4      	asrs	r4, r4, #2
 80056ea:	42a6      	cmp	r6, r4
 80056ec:	d105      	bne.n	80056fa <__libc_init_array+0x2e>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f4:	4798      	blx	r3
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7ee      	b.n	80056d8 <__libc_init_array+0xc>
 80056fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fe:	4798      	blx	r3
 8005700:	3601      	adds	r6, #1
 8005702:	e7f2      	b.n	80056ea <__libc_init_array+0x1e>
 8005704:	08005758 	.word	0x08005758
 8005708:	08005758 	.word	0x08005758
 800570c:	08005758 	.word	0x08005758
 8005710:	0800575c 	.word	0x0800575c

08005714 <_init>:
 8005714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005716:	bf00      	nop
 8005718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571a:	bc08      	pop	{r3}
 800571c:	469e      	mov	lr, r3
 800571e:	4770      	bx	lr

08005720 <_fini>:
 8005720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005722:	bf00      	nop
 8005724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005726:	bc08      	pop	{r3}
 8005728:	469e      	mov	lr, r3
 800572a:	4770      	bx	lr
